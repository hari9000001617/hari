<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> epm </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Online Help for Configuration Workbench for Singleview Process Engine 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "9510.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "9512.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('55480');expand('11011');highlight('37422')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="9510.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="9512.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Online Help for Configuration Workbench for Singleview Process Engine 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h3 class="heading3">epm</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'epm' (37422)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="syntaxheading">Purpose</p>
<p class="bodytext">Calls an EPM function from a Process Engine expression.</p>
<p class="bodytext">There are no restrictions on which EPM functions can be called based on the function's application environment; that is, a Process Engine expression can call an EPM function with an application environment of Any, PE, or CB.</p>
<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="note">Convergent Billing functions with application environments other than Any cannot be called from Process Engine functions, and are not visible in the EPM Function Tool.</p></td></tr></table>
<table class="cautionstyle" width="100%"><tr><td><p class="caution">Caution:</p><p class="caution">Not all Convergent Billing EPM local functions with an application environment of Any can be called in Process Engine.  When called, Process Engine attempts to execute the function, but if the function cannot be executed, a runtime error is displayed.</p></td></tr></table>
<p class="bodytext">Restrictions for calling EPM functions from Process Engine expressions are:</p>
<ul class="listbullet"><li class="listbullet">Transactional EPM functions (functions that update or create data in the database) cannot be called from Process Engine expressions; this ensures data integrity.</li><li class="listbullet">Asynchronous EPM functions cannot be called because they do not return a value.</li><li class="listbullet">Parameters can only be passed by value.</li></ul><table class="cautionstyle" width="100%"><tr><td><p class="caution">Caution:</p><p class="caution">Configurers must be aware of the data integrity risks when calling EPM functions from Process Engine expressions.  To ensure data integrity, avoid the following:</p><ul class="cautionlistbullet"><li class="cautionlistbullet">Transactional Convergent Billing EPM functions.  Transactional Process Engine EPM functions are restricted; however, transactional Convergent Billing EPM functions can be called.</li><li class="cautionlistbullet">Convergent Billing EPM functions that internally call transactional Process Engine EPM functions (see the <span class="referrals">Configuration Fundamentals Guide for Singleview Convergent Billing</span>).</li><li class="cautionlistbullet">Remote EPM functions. </li></td></tr></table></ul><p class="syntaxheading">Returned Data Type</p>
<p class="bodytext">All.</p>
<p class="bodytext">The table below lists only the EPM return types implicitly converted to Process Engine data types.  All other conversions must be done explicitly using a conversion expression.  For example, to convert an EPM return type of integer into a boolean, use:</p>
<p class="bodytext"><span class="unixoutputc">to_bool(epm(function&amp;(&lt;expression&gt;)))</span></p>
<p class="bodytext">Parameters passed into EPM function calls are mapped in the same way that EPM data types are mapped to Process Engine fact types.</p>
<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="note">Hash parameters are not supported.</p></td></tr></table>
<p class="bodytext">&nbsp;</p>
<p class="caption">Return Type and Process Engine Data Type Conversion</p>
<table class="tableintopic" width="426" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="192"><p class="tableheading">EPM Return Type</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="234"><p class="tableheading">Process Engine Data Type</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext">Integer</p>
</td>
<td style="border:1px solid #010101;" width="234"><p class="tablebodytext">Integer</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext">String</p>
</td>
<td style="border:1px solid #010101;" width="234"><p class="tablebodytext">Text</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext">Real</p>
</td>
<td style="border:1px solid #010101;" width="234"><p class="tablebodytext">Decimal</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext">Date</p>
</td>
<td style="border:1px solid #010101;" width="234"><p class="tablebodytext">Date Time</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext">Blob</p>
</td>
<td style="border:1px solid #010101;" width="234"><p class="tablebodytext">Reference</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext">Blob array</p>
</td>
<td style="border:1px solid #010101;" width="234"><p class="tablebodytext">Reference subset</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Examples</p>
<p class="bodytext">The following procedure passes the current case into an EPM function and returns a string, indicating the case type:</p>
<ol class="listnumber"><li class="listnumber">Create an EPM function called <span class="unixoutputc">fCM_CaseType$()</span>:<p class="listcontinue"><span class="unixoutputc">fCM_CaseType$(Case@) = {</span></p>
<p class="listcontinue"><span class="unixoutputc">    const case_type@ := to_blob(ObjectFactGet?(Case@,Fact:Case.Type@));</span><br><span class="unixoutputc">    const case_type$ := to_string(ObjectFactGet?(case_type@,Fact:Case_Type.Display_Name@));</span><br><span class="unixoutputc">    return := 'Case type is: ' + case_type$;    </span></p>
<p class="listcontinue"><span class="unixoutputc">}</span></p>
</li><li class="listnumber">Create a text fact called CaseDetails_X in the Case class with the following derivation expression:<p class="listcontinue"><span class="unixoutputc">epm(fCM_CaseType$({This_Case}))</span></p>
</li></ol><p class="bodytext">The following procedure calls a custom EPM function that displays the percentage of customer types for a market region:</p>
<ol class="listnumber"><li class="listnumber">Create an EPM function called <span class="unixoutputc">fCM_GetCustMktPercent#()</span>:<p class="listcontinue"><span class="unixoutputc">fCM_GetCustPercent#() = {</span></p>
<p class="listcontinue"><span class="unixoutputc">    # Using customer type and market region, look up the derived</span><br><span class="unixoutputc">    # attribute table and return a real value</span></p>
<p class="listcontinue"><span class="unixoutputc">    const Customer@ := CurrentObjectGet@();</span><br><span class="unixoutputc">    const CustType&amp; := ObjectKeyGet&amp;(Customer@);</span><br><span class="unixoutputc">    const Market@ := to_blob(ObjectFactGet?(Customer@, </span><br><span class="unixoutputc">                    Fact:Cust_Acct.Market_Region@));</span><br><span class="unixoutputc">    const MarketReg&amp; := ObjectKeyGet&amp;(Market@);</span><br><span class="unixoutputc">    var Result$[];</span><br><span class="unixoutputc">    var Irc&amp;;</span></p>
<p class="listcontinue"><span class="unixoutputc">    try {</span></p>
<p class="listcontinue"><span class="unixoutputc">        Irc&amp; := biDerivedTableLookupByDatex&amp;(</span><br><span class="unixoutputc">        'dCLEC_CMN_LatePay_Percent#',</span><br><span class="unixoutputc">        current_date(),</span><br><span class="unixoutputc">        [to_string(CustType&amp;),</span><br><span class="unixoutputc">        to_string(MarketReg&amp;)],</span><br><span class="unixoutputc">        Result$[]);</span></p>
<p class="listcontinue"><span class="unixoutputc">    } except {</span><br><span class="unixoutputc">        RaiseError&amp;(Message:gen_CB_message@,[error_message()]);</span><br><span class="unixoutputc">    } return(to_real(Result$[0]));</span></p>
<p class="listcontinue"><span class="unixoutputc">}</span></p>
</li><li class="listnumber">Create a Percent fact called CustMktPercent_P in the Case class with the following derivation expression:<p class="listcontinue"><span class="unixoutputc">to_percent(epm(fCM_GetCustMktPercent#()))</span></p>
</li></ol>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="9510.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="9512.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Online Help for Configuration Workbench for Singleview Process Engine 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


