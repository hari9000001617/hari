{"pages":[{"id":1,"title":"","url":"10952.htm","text":""},{"id":2,"title":"Disclaimer and Copyright","url":"10989.htm","text":"Publication Date  Saturday, 11 February 2017  Document Version Number  v1.0  Software Version Number  Singleview Process Engine v9.00.16  Disclaimer  Although every endeavour has been made to ensure that the information contained within this document is up to date and accurate, CSG Systems International, Inc ('CSG International') cannot be held responsible for any inaccuracy or error in the information contained within this document. CSG International makes no warranty of any kind with regard to the information and CSG International shall not be liable for any direct, indirect, incidental or consequential damages which may arise in connection with the furnishing, reliance, or use of the information contained within this document.  Specifications and statements as to performance in this document are CSG International estimates, intended for general guidance. CSG International reserves the right to change the information contained within this document and any product specification and/or availability dates without notice.  Statements in this document are not part of a contract or program product licence. Issue of this document does not entitle the recipient to access or use the products described, and such access or use shall be subject to separate contracts or licences.  Licence Agreement  The software described in this guide is supplied under a licence agreement and may only be used in accordance with the terms of that agreement.  This documentation and products described in this document are provided under licence from CSG International.  It is possible that the applicable licence does not cover all the elements of functionality described in this document.  If you have any questions regarding the functionality for which your site is licensed, contact your contract administrator.  Confidentiality obligations set forth in the licence apply to all documentation that is marked as CSG International Confidential Information.  Copyright Information  &copy; 2016 CSG Systems International, Inc and/or its affiliates.  All rights reserved.    The information contained within this document or application is the property of CSG International, and is confidential and protected by international copyright laws, and any unauthorised use of this document or application or its contents may violate copyright, trademark, and other laws. No part of this document may be photocopied, reproduced, translated in any form or by any means, stored in a retrieval system, or transmitted electronically or otherwise, without the prior written consent of CSG International.  If you breach any of these terms, your authorisation to use this document automatically terminates. You may not modify this document or its contents in any way or publicly display, perform, distribute, or otherwise use this document or its contents for any public or commercial purpose. Any use of this document or its contents for any other purpose other than as mutually agreed upon with CSG International is prohibited.  Singl.eView&reg; is a registered trademark of CSG Systems International, Inc.  Third Party Software Copyright and Licence Information  This product may contain, use, or be distributed with third party software.   All third party trademarks, registered trademarks, service marks, and product names referenced are the property of their respective owners and all rights therein are reserved.   Trademarks  Adobe Systems Incorporated<br>Adobe Acrobat, Adobe Reader, Adobe PostScript, and Adobe SVG Viewer are either registered trademarks or trademarks of Adobe Systems Incorporated in the United States and other countries. Refer to: http://www.adobe.com/legal/licenses-terms.html  American Mathematical Society<br>TeX is a trademark of the American Mathematical Society. Refer to: http://www.ams.org/publications/authors/tex/tex  The Apache Software Foundation<br>Apache Tomcat, Apache Xerces, Batik SVG Toolkit, apr, apr-util, and Subversion are trademarks or registered trademarks of The Apache Software Foundation.   Artifex Software Inc. <br>Ghostscript and GPL Ghostscript are registered trademarks of Artifex Software, Inc.  BYTE Computer & Software Ltd<br>Adrock is a registered trademark of BYTE Computer & Software Ltd.   The Codehaus<br>Classworlds is a registered trademark of The Codehaus.<br>The Codehaus hosts versions of the Jetty Project before Jetty v7. <br>Refer to: http://www.codehaus.org/  Eclipse Foundation<br>Eclipse are registered trademarks of The Eclipse Foundation.<br>Refer to: http://www.eclipse.org/legal/logo_guidelines.php<br>Eclipse Foundation hosts v7, v8, and v9 of the Jetty Project, and BPMN2 Modeler.  Embarcadero Technologies, Inc.<br>Delphi is a trademark or registered trademark of Embarcadero Technologies.   Free Software Foundation, Inc.<br>GNU is a registered trademark of the Free Software Foundation, Inc. Refer to: http://www.gnu.org/licenses/agpl-3.0.html  Gentleware AG<br>Poseidon for UML is a registered trademark of Gentleware AG.   Google, Inc.<br>Google and Google Chrome are registered trademarks of Google Inc.<br>Refer to: http://www.google.com.au/permissions/trademark/our-trademarks.html  ICEsoft Technologies Inc<br>ICEfaces is a trademark of ICEsoft Technologies Inc.<br>Refer to: http://www.icesoft.org/community/license-faq.jsf  International Business Machines Corp.<br>AIX is a registered trademark of International Business Machines Corp.   Linus Torvalds<br>Linux is a registered trademark of Linus Torvalds, which is administered by the Linux Mark Institute.  Massachusetts Institute of Technology<br>Kerberos is a registered trademark of the Massachusetts Institute of Technology.<br>Refer to: http://web.mit.edu/kerberos/  Metadot Corporation<br>Metadot is a trademark or registered trademark of Metadot Corporation.   Microsoft<br>Windows 8, Windows 7, Windows XP, Windows Vista, Microsoft Word, Microsoft Excel, Microsoft Office Visio, Microsoft Internet Explorer, Microsoft Visual C++, Microsoft Exchange <br>Server, Outlook, and FrontPage are trademarks of Microsoft in the USA and other countries.    Mozilla<br>Firefox is a registered trademark of Mozilla. <br>Refer to: http://www.mozilla.org/en-US/about/legal.html  Object Management Group, Inc.<br>CORBA and Business Process Model And Notation (BPMN) Version 2.0 are either registered trademarks or trademarks of the Object Management Group, Inc. in the United States and/or other countries. <br>Refer to: http://www.omg.org/  Oracle Corporation<br>Oracle Solaris, Oracle Enterprise Linux, Java, JavaMail, JavaBeans Activation Framework, Oracle Tuxedo, MySQL, Hyperion SQR, Hyperion Report Builder, Instant Client, and SPARC are registered trademarks of Oracle Corporation and/or its affiliates.   Perl.org<br>Perl and Perl CPAN is a registered trademark of Perl.org.  Red Hat, Inc.<br>Red Hat Enterprise Linux, JBoss, JBoss Business Process Management (jBPM), and JBoss Business Rules Management System (BRMS) are registered trademarks or trademarks of Red Hat, Inc.   Savarese Software Research Corporation<br>Ssrc SVG is a registered trademark of the Savarese Software Research Corporation.  The Open Group<br>UNIX is a registered trademark of The Open Group.  OW2 Consortium<br>ASM is hosted by the OW2 Consortium.  TIBCO Software Inc.<br>TIBCO, TIBCO Rendezvous, and TIBCO ActiveEnterprise are registered trademarks or trademarks of TIBCO Software Inc. in the United States and other countries.  Unicode, Inc. <br>Unicode and the Unicode logo are trademarks of Unicode, Inc.  World Wide Web Consortium (W3C)<br>W3C is a trademark (registered in numerous countries) of the World Wide Web Consortium; marks of W3C are registered and held by its host institutions MIT, ERCIM, Keio, and Beihang.  Copyrights and Licensing Statements  Open Source Initiative OSI - The MIT License (MIT):Licensing<br>The MIT License (MIT)<br>Copyright (C) 2014, Massachusetts Institute of Technology<br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:<br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.<br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  OpenSSL<br>Copyright (c) 1998-2011 The OpenSSL Project.  All rights reserved.<br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. <br>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in  the documentation and/or other materials provided with the distribution.<br>3. All advertising materials mentioning features or use of this software must display the following acknowledgment:<br>\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)\"<br>4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact licensing@OpenSSL.org.<br>5. Products derived from this software may not be called \"OpenSSL\" nor may \"OpenSSL\" appear in their names without prior written permission of the OpenSSL Project.<br>6. Redistributions of any form whatsoever must retain the following acknowledgment:<br>\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit http://www.OpenSSL.org/)\"<br>THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br>This product includes cryptographic software written by Eric Young (eay@cryptsoft.com).  This product includes software written by Tim Hudson (tjh@cryptsoft.com).  zlib<br>Copyright (C) 1995-2013 Jean-loup Gailly and Mark Adler<br>This software is provided 'as-is', without any express or implied warranty.  In no event will the authors be held liable for any damages arising from the use of this software.<br>Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:<br>1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.<br>2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.<br>3. This notice may not be removed or altered from any source distribution.<br>Jean-loup Gailly        Mark Adler<br>jloup@gzip.org          madler@alumni.caltech.edu  lodash<br>Copyright 2012-2014 The Dojo Foundation (http://dojofoundation.org/) Based on Underscore.js 1.6.0, copyright 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors (http://underscorejs.org/)<br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use,  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:<br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.<br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ng-table<br>Copyright (c) 2013, esvit.<br>All rights reserved.<br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>Neither the name of the esvit nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  expat (expat XML parser)<br>Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd and Clark Cooper<br>Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006 Expat maintainers.<br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:<br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.<br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  bsalsa<br>bsalsa productions develop freeware solutions for users and programmers with \"Embarcadero Delphi\" for \"Microsoft Windows\" OS. Our main product is the Embedded Web Browser Component Pack. Most of its components were originally developed by Per Lindsø Larsen.<br>THIS SOFTWARE IS PROVIDED TO YOU \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED INCLUDING BUT NOT LIMITED TO THE APPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. YOU ASSUME THE ENTIRE RISK AS TO THE ACCURACY AND THE USE OF THE SOFTWARE AND ALL OTHER RISK ARISING OUT OF THE USE OR PERFORMANCE OF THIS SOFTWARE AND DOCUMENTATION. BSALSA PRODUCTIONS DOES NOT WARRANT THAT THE SOFTWARE IS ERROR-FREE OR WILL OPERATE WITHOUT INTERRUPTION. THE SOFTWARE IS NOT DESIGNED, INTENDED OR LICENSED FOR USE IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE CONTROLS, INCLUDING WITHOUT LIMITATION, THE DESIGN, CONSTRUCTION, MAINTENANCE OR OPERATION OF NUCLEAR FACILITIES, AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, AND LIFE SUPPORT OR WEAPONS SYSTEMS. BSALSA PRODUCTIONS SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR SUCH PURPOSE.  Apache / JBoss Business Process Management (jBPM)<br>Copyright 1997-2014 Apache Software Foundation<br>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 <br>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.   Java<br>Copyright (c) 2004-2008 QOS.ch All rights reserved.<br>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:<br>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.<br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.   JRuby<br>JRuby is Copyright (c) 2007-2014 The JRuby project, and is released under a tri EPL/GPL/LGPL license. You can use it, redistribute it and/or modify it under the terms of the:<br>  Eclipse Public License version 1.0<br>  GNU General Public License version 2<br>  GNU Lesser General Public License version 2.1<br>build_lib/bytelist.jar (http://github.com/jruby/bytelist), build_lib/yydebug.jar (http://svn.codehaus.org/jruby/trunk/jay/yydebug) are released under the same copyright/license.<br>Some additional libraries distributed with JRuby are not covered by JRuby's licence. Most of these libraries and their licenses are listed below. Also see LICENSE.RUBY for most files found in lib/ruby/1.8, lib/ruby/1.9, and lib/ruby/site_ruby/1.8/rubygems*.<br>bench/rails/public/javascripts/* are distributed under the MIT license, and have the following copyrights:<br>   controls.js is Copyright:<br>   (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)<br>   (c) 2005-2007 Ivan Krstic (http://blogs.law.harvard.edu/ivan)<br>   (c) 2005-2007 Jon Tirsen (http://www.tirsen.com)<br>dragdrop.js is Copyright:<br>   (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)<br>   (c) 2005-2007 Sammi Williams (http://www.oriontransfer.co.nz, sammi@oriontransfer.co.nz)<br>effect.js is Copyright (c) 2005-2008 Thomas Fuchs.<br>prototype.js is Copyright (c) 2005-2007 Sam Stephenson.<br>The \"rake\" library (http://rake.rubyforge.org/) is distributed under the MIT license, and has the following copyright:   <br>   Copyright (c) 2003, 2004 Jim Weirich<br>build_lib/*asm*jar (http://asm.objectweb.org) are distributed under the BSD license.<br>build_lib/apt-mirror-api.jar, build_lib/bnd-0.0.249.jar, build_lib/commons-logging-1.1.1.jar, build_lib/joda-time-1.6.2.jar, BSF and ant are distributed under the Apache Software License, Version 1.1 (license file inside the jars).<br>build_lib/jcodings.jar (http://github.com/jruby/jcodings) and build_lib/joni.jar (http://github.com/jruby/joni) are distributed under the MIT license.<br>build_lib/jnr-constants.jar (http://github.com/jnr/jnr-constants), build_lib/jarjar-1.0rc8.jar (http://code.google.com/p/jarjar), build_lib/joda-time-1.6.2.jar (http://joda-time.sourceforge.net), build_lib/jffi*jar (https://github.com/jnr/jffi), build_lib/jnr-ffi.jar (https://github.com/jnr/jnr-jffi), build_lib/jnr-netdb.jar (http://github.com/jnr/jnr-netdb), build_lib/dynalang-0.3.jar (http://dynalang.sourceforge.net), build_lib/nailgun-0.7.1.jar and tool/nailgun/ng.exe (http://martiansoftware.com/nailgun) are distributed under the Apache License version 2.0. build_lib/emma*jar (http://emma.sourceforge.net) and build_lib/junit.jar (http://www.junit.org) are distributed under the Common Public License v1.0.<br>build_lib/jline-* (http://jline.sourceforge.net) is distributed under the following license:<br>   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>   Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>   Neither the name of JLine nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br> build_lib/jsr292-mock.jar (http://code.google.com/p/jvm-language-runtime) distributed under the LGPL license. It is only used as a compile-time mock for Java 7-only features.<br> Bouncycastle is released under the MIT license, and is Copyright (c) 2000 - 2006 The Legion Of The Bouncy Castle.<br> The \"yecht\" library is Copyright (c) 2009-2011 Ola Bini, and released under the MIT license.  ASM<br>Copyright (c) 2000-2011 INRIA, France Telecom<br>All rights reserved.<br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>3. Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Classworlds<br>Copyright 2002 (C) The Codehaus. All Rights Reserved. <br> Redistribution and use of this software and associated documentation (\"Software\"), with or without modification, are permitted provided that the following conditions are met:<br> 1. Redistributions of source code must retain copyright statements and notices. Redistributions must also contain a copy of this document. <br> 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. <br> 3. The name \"classworlds\" must not be used to endorse or promote products derived from this Software without prior written permission of The Codehaus. For written permission, please contact bob@codehaus.org. <br> 4. Products derived from this Software may not be called \"classworlds\" nor may \"classworlds\" appear in their names without prior written permission of The Codehaus. \"classworlds\" is a registered trademark of The Codehaus. <br> 5. Due credit should be given to The Codehaus. (http://classworlds.codehaus.org/). <br> THIS SOFTWARE IS PROVIDED BY THE CODEHAUS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CODEHAUS OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  GNU Lesser General Public License version 2.1 / JBoss Business Rules Management System (BRMS)<br>Copyright (C) 2014 Red Hat, Inc.<br>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.<br>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  BPMN2 Modeler<br>BPMN2 Modeler is Copyright (c) 2014 The Eclipse Foundation, and is released under the license. You can use it, redistribute it and/or modify it under the terms of the Eclipse Public License version 1.0.  The following copyrights apply to the SNMP package:  CMU/UCD copyright notice: (BSD like) <br>Copyright 1989, 1991, 1992 by Carnegie Mellon University<br>Derivative Work - 1996, 1998-2000<br>Copyright 1996, 1998-2000 The Regents of the University of California All Rights Reserved<br>Permission to use, copy, modify and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appears in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of CMU and The Regents of the University of California not be used in advertising or publicity pertaining to distribution of the software without specific written permission.<br>CMU AND THE REGENTS OF THE UNIVERSITY OF CALIFORNIA DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL CMU OR THE REGENTS OF THE UNIVERSITY OF CALIFORNIA BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM THE LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  Networks Associates Technology, Inc copyright notice (BSD) <br>Copyright (c) 2001-2003, Networks Associates Technology, Inc<br>All rights reserved. <br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>*  Neither the name of the Networks Associates Technology, Inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Cambridge Broadband Ltd. copyright notice (BSD) <br>Portions of this code are copyright (c) 2001-2003, Cambridge Broadband Ltd. All rights reserved.<br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: <br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. <br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. <br>*  The name of Cambridge Broadband Ltd. may not be used to endorse or promote products derived from this software without specific prior written permission. <br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Sun Microsystems, Inc. copyright notice (BSD)<br>Copyright &copy; 2003 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, California 95054, U.S.A. All rights reserved.<br>Use is subject to license terms below.<br>This distribution may include materials developed by third parties.<br>Sun, Sun Microsystems, the Sun logo and Solaris are trademarks or registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries.<br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>*  Neither the name of the Sun Microsystems, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Sparta, Inc copyright notice (BSD)<br>Copyright (c) 2003-2009, Sparta, Inc<br>All rights reserved. <br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: <br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>*  Neither the name of Sparta, Inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. <br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Cisco/BUPTNIC copyright notice (BSD)<br>Copyright (c) 2004, Cisco, Inc and Information Network<br>Center of Beijing University of Posts and Telecommunications.<br>All rights reserved. <br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: <br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. <br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. <br>*  Neither the name of Cisco, Inc, Beijing University of Posts and Telecommunications, nor the names of their contributors may be used to endorse or promote products derived from this software without specific prior written permission. <br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Fabasoft R&D Software GmbH & Co KG copyright notice (BSD)<br>Copyright (c) Fabasoft R&D Software GmbH & Co KG, 2003<br>oss@fabasoft.com<br>Author: Bernhard Penz <br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>*  The name of Fabasoft R&D Software GmbH & Co KG or any of its subsidiaries, brand or product names may not be used to endorse or promote products derived from this software without specific prior written permission.<br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Apple Inc. copyright notice (BSD)<br>Copyright (c) 2007 Apple Inc. All rights reserved.<br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<br>1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.<br>2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.<br>3.  Neither the name of Apple Inc. (\"Apple\") nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.<br>THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  ScienceLogic, LLC copyright notice (BSD)<br>Copyright (c) 2009, ScienceLogic, LLC<br>All rights reserved. <br>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: <br>*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. <br>*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. <br>*  Neither the name of ScienceLogic, LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. <br>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  "},{"id":3,"title":"Overview","url":"10986.htm","text":"Singleview Process Engine is highly configurable core software that provides the foundation for the development of specific customer solutions.  Key elements that can be configured include the look and feel of the end-user interface, customer-specific business logic, workflow, and triggers to drive business processes.  Process Engine business solutions are market-ready configurations built on the core Process Engine technology.  Examples include Singleview Customer Management, a call centre front end.   "},{"id":4,"title":"Use Online Help","url":"9649.htm","text":"Access help using one of the following methods:  Method  Description  Click inside the window and press the F1 key.  Provides information about the current window.  Select Help @ Contents.  Provides information from the following types of help:  Window help  Glossary of terms.  The information can be searched using a text search.  Select Help @ Contents and click on the Search tab.  Searches online help using words, exact phrases, exclusions, and logical operators to define match criteria.  Select Help @ Contents and select the Glossary of Terms item in the Contents tab.  Provides definitions of terms used in Singleview.  "},{"id":5,"title":"Configuration Workbench Overview","url":"55297.htm","text":"The Configuration Workbench is a set of tools for customising Process Engine and related operations.  To effectively use the Configuration Workbench, the configurer requires a thorough understanding of the Process Engine data model and knowledge of an organisation's business processes for Process Engine maintenance and customisation.  This section provides details about the general operation of the Configuration Workbench and an introduction to the configuration tools. Detailed information about some of the configuration tools is provided in this documentation.  Specific access to each of the Configuration Workbench tools can be configured.  The configuration Workbench does not support 64-bit integers. It is recommended that the Configuration Studio be used to view data exceeding the 32-bit integer limit .  "},{"id":6,"title":"Configuration Workbench Tools Access","url":"57823.htm","text":"Access to log in to the Configuration Workbench, and access to individual Configuration Workbench tools, is controlled by a user's profile using form roles. Form roles are a collection of form codes provided for each Configuration Workbench tool and other functionality (see the Security and Auditing Configuration Guide for Singleview).  Access to the Data tab of the Class and Data Tool can be configured independently of access to the Class and Data Tool itself.  For each form role, a form code can be configured as follows:  No form code  User has no access to tool.  No access (form code is configured, but access level is 0)  User has no access to the tool.  Read-only access  User can view data within the tool.  Read-write access  User can view, create, modify, and delete data within the tool.  "},{"id":7,"title":"Configuration Workbench Structure","url":"58235.htm","text":"Title Bar  The title bar at the top of the Configuration Workbench displays the name of the Process Engine server, user, and client (that is, Configuration Workbench).  Menu Bar  The component below the title bar is the menu bar.  The menus available are:  File  Edit  Business Model  User Interface  Integration  Workflow  Analysis  Users  Windows  Help.  Most of the options available from these menus are also available from the operations toolbar, configuration toolbar, or shortcut menus.  Operations Toolbar  The operations toolbar is below the menu bar and contains the most commonly used supplementary operations.  Supplementary operations available from the operations toolbar are also available from the File and Edit menus; many of them are also available from the shortcut menus.  The Default Category drop-down list is available from the operations toolbar. It sets the category that should be applied to objects created or modified in the Configuration Workbench. If no default category selection is made, default categories are derived from the configurer's profile (see the Security and Auditing Configuration Guide for Singleview).  Default categories selected in the Default Category drop-down list apply only to objects created or modified after the selection is made. Default categories can be removed.  Selected default categories are saved between Configuration Workbench sessions for each Process Engine and Windows user on a workstation.  Configuration Toolbar  The configuration toolbar contains the set of tools used to customise Process Engine.  Configuration tools available from the configuration toolbar are also available from the menus.  "},{"id":8,"title":"Generic Features","url":"50535.htm","text":"Each configuration tool has a separate window that is opened when the tool is selected.  The tool windows have many common features.  Tool windows do not have a menu bar or toolbar of their own because overall control is maintained by the menus and toolbars on the Configuration Workbench.  All configuration tool windows:  Have the same general layout.  Allow selection of operations by mouse or keyboard.  Use the same shortcut keys and access keys.  Have an additional shortcut menu available for selecting the most commonly used operations for the tool.  Allow 'drag-and-drop' editing, wherever applicable, for moving objects from one area of a window to another.  Allow scrolling and copying values within a tool without locking the tool.  Shortcut Menus  Shortcut menus are available only from within the configuration tool windows.  These menus allow configurers to select the most commonly used operations related to the task being performed by clicking the right-hand mouse button.  The following figure displays a typical shortcut menu.  Typical Shortcut Menu  The operations available from the shortcut menus are also available from the File and Edit menus and the operations toolbar.  "},{"id":9,"title":"Using Multiple Configuration Tools","url":"50535.htm#o10018","text":"The Configuration Workbench allows configurers to have several configuration tools open at the same time, allowing the configurer to switch between tools.  For example, the Class and Data Tool and the Fact Tool can be open at the same time.  Being able to use multiple tools at the same time has implications for saving or cancelling changes.  "},{"id":10,"title":"Switching between Tools","url":"50535.htm#o10019","text":"To switch from one open tool to another, do one of the following:  Select the Windows option from the menu bar and then select the required window.  Click on the window, which makes that window active and brings it to the foreground.  Select the tool from the configuration toolbar or menus.  If multiple tools are open, clicking on the window is not recommended because it is not always easy to identify the required window, because of the windows overlay.  "},{"id":11,"title":"Zoom To Tool Button","url":"50535.htm#o10022","text":"It is also possible to switch to another tool from inside a tool whenever the Zoom to Tool button is displayed.  The Zoom to Tool button is displayed only on configuration tool windows and only when switching to another tool is possible.  If a tool is opened from within another tool using the Zoom to Tool button, that window is modal and must be closed before any other window is used.  "},{"id":12,"title":"Concurrent Configurers","url":"50535.htm#o10024","text":"The Configuration Workbench can be used by multiple configurers at the same time on the same Process Engine server.  Therefore, it is necessary to ensure that configuration changes can be made without affecting other configurers.  The Configuration Workbench achieves this by automatically locking objects while they are being edited.  Before an object is edited in a configuration tool, the Lock option must be applied to the configuration tool.  Object locking occurs automatically when a configurer begins to edit an object in a configuration tool and prevents other configurers from editing the same object at the same time.  For example, if a configurer is editing the Priority fact using the Fact Tool and another configurer attempts to edit the same fact, the second configurer receives an error message indicating that the object is locked.  Object locking prevents multiple configurers from attempting to modify the same object, while allowing other configurers to configure other objects.  A large number of concurrent configurers (10 or more) can degrade the performance of Configuration Workbench substantially. In this situation, Configuration Workbench performance can be improved significantly by configuring multiple read-only instances of f_asp. However, two read-only instances of f_asp is usually sufficient (see the Architecture Overview for Singleview).  "},{"id":13,"title":"Updating the Process Engine Client Cache","url":"50535.htm#o10029","text":"Depending on the type of change made to Process Engine web client using the Configuration Workbench, the Process Engine web client's cache may need to be reloaded or updated to review the change.  Details of the situations when this is required are outlined in the relevant sections of this guide.  "},{"id":14,"title":"Operations Toolbar","url":"10030.htm","text":"The operations available at any given time depend on the object selected in the object tab and the configuration tool being used.  Unavailable operations are displayed as greyed-out on the operations toolbar and shortcut menus.  How an operation works can differ between configuration tools.  Therefore, the descriptions provided in this section are generic and provide a general understanding of each operation's use; exceptions to the rule are detailed in the relevant sections of this guide.  "},{"id":15,"title":"Operations Toolbar Options","url":"10030.htm#o9982","text":"Many of the options available from the operations toolbar are also available from the File and Edit menus; some of them are also available from the shortcut menus.  The following table lists available options.  Available Options on the Operations Toolbar  Option  Button  Menu  Shortcut Keys  Shortcut Menu  About  Help  Cancel  File  Ctrl+R  Copy  Edit  Ctrl+C  Cut  Edit  Ctrl+X  Default Category  Available only from drop-down list.  Exit  File  Ctrl+F4  Export  File  Help  Help  F1  Import  File  Lock  File  Ctrl+L  Make Obsolete/Restore  File  Ctrl+D  New  File  Ctrl+N  Paste  Edit  Ctrl+V  Refresh  Edit  F5  Reload Configuration  File  Rename  Edit  F2  Save  File  Ctrl+S  Show Dependencies  File  Undo  Edit  Ctrl+Z  Windows  Windows  Zoom To Tool  Only available from some configuration tool windows.  "},{"id":16,"title":"Lock","url":"10030.htm#o50084","text":"When a configuration tool is initially selected, the objects in the tool are not editable.  Selecting Lock enables editing of the objects.  If the Lock button is active and the object's values are greyed-out, the objects in the tool are not editable.  Values can be copied without locking the tool.  Process Engine permits scrolling and copying within a tool without selecting the Lock button.  The Lock operation should not be confused with object locking.  "},{"id":17,"title":"Save","url":"10030.htm#o10031","text":"The Save operation is used to commit all unsaved changes to the database, including changes made using any of the configuration tools since changes were last saved or cancelled.  That is, if changes have been made using multiple tools, it is not possible to save only those changes made in the active tool.  Because all unsaved changes are committed to the database at the same time, it is easy to lose track of what is saved.  To avoid problems, devise a system of saving at logical points.  Before committing changes, Process Engine checks the validity of the changes.  The outcome of these checks is displayed in the Commit Process Message window at the bottom of the screen (see the Configuration Guide for Singleview Process Engine).  "},{"id":18,"title":"Cancel","url":"10030.htm#o10035","text":"The Cancel operation discards all changes made, using any of the tools, since changes were last saved or cancelled.  All changes made using the configuration tools are cancelled at the same time.  That is, if changes have been made using multiple tools and not yet saved, Cancel discards all unsaved changes, not only those made in the active tool.  The latest unsaved changes to an object are rolled back by selecting the object and selecting Undo.  Because all unsaved changes are discarded at the same time, it is easy to lose track of what is saved and cancelled.  To avoid problems, devise a system of saving at logical points.  "},{"id":19,"title":"Undo","url":"10030.htm#o10037","text":"The Undo operation rolls back all unsaved changes made to the selected object in the active tool.  "},{"id":20,"title":"New","url":"10030.htm#o10039","text":"The New operation is used to create a new object in the active tool.  In most cases, the newly-created object is given a default name based on the object.  For example, 'NEW LOGON' is the default name if adding a new user.  After the object is created, the default name can be edited.  "},{"id":21,"title":"Make Obsolete/Restore","url":"10030.htm#o10012","text":"The Make Obsolete/Restore operation does either of the following:  Makes the selected current object obsolete.  Restores the selected obsolete object.  When an object is made obsolete, it remains in the database and can be restored using Make Obsolete/Restore unless it is removed using archiving.  For information about archiving, refer to the System Administration Guide for Singleview.  "},{"id":22,"title":"Cut","url":"10030.htm#o10041","text":"The Cut operation allows selected text in the Details tab of an object to be removed or copied for pasting.  "},{"id":23,"title":"Copy","url":"10030.htm#o10043","text":"The Copy operation allows an object selected in the object tab or text in the Details tab to be copied.  "},{"id":24,"title":"Paste","url":"10030.htm#o10045","text":"The Paste operation allows cut or copied text to be inserted in the Details tab of an object.  "},{"id":25,"title":"Rename","url":"10030.htm#o10047","text":"The Rename operation allows an object selected in the object tab to be renamed.  "},{"id":26,"title":"Refresh","url":"10030.htm#o10049","text":"The Refresh operation updates values in the active tab of the active tool to reflect any changes made since the tool was opened or the last Refresh or Save performed.  The Refresh operation in the Configuration Workbench is different from the RefreshFacts operation used in the Process Engine client (see the Configuration Guide for Singleview Process Engine).   "},{"id":27,"title":"Show Dependencies","url":"10030.htm#o10051","text":"The Show Dependencies operation activates the Dependency Browser.  The Dependency Browser graphically displays the relationships between the object selected in the object list box of any tool and any other configuration objects.  Even though multiple configuration tools can be open at the same time, only one instance of the Dependency Browser can be open at any one time.  To improve clarity of display, dependencies on the last modified user and core security groups objects are not displayed.  Many objects can be used in different areas of the configuration for different purposes.  This applies particularly to facts, where the number of dependencies of a fact may be many, and their relationships not obvious.  To address this, the Dependency Browser allows configurers to assess the impact of any change before it is made.   "},{"id":28,"title":"Exit","url":"10030.htm#o10053","text":"The Exit operation closes the Configuration Workbench and all open configuration tools and windows.  If any unsaved data exists, the Configuration Workbench displays a warning message.   "},{"id":29,"title":"Import and Export","url":"10030.htm#o10055","text":"The Import operation (File @ Import) allows data to be imported from a file into the Process Engine server.  The Export operation (File @ Export) allows Process Engine data to be exported to a specified flat file.  To ensure that no configuration is incomplete, all configuration tools must be closed before importing or exporting data.  "},{"id":30,"title":"Windows","url":"10030.htm#o10056","text":"The Windows operation displays a dynamic list of the open configuration tool windows.  Using the list, the configurer can switch from one tool to another when multiple configuration tools are in use.  "},{"id":31,"title":"Help","url":"10030.htm#o10057","text":"The Help operation (Help @ Contents) displays the Configuration Workbench Online Help.   "},{"id":32,"title":"About","url":"10030.htm#o57836","text":"The About operation (Help @ About) provides information about the client and server version of the Configuration Workbench, as displayed in [[FigureXref:57836-1]].  [[Figure:57836-1]]  Configuration Workbench Version Information  "},{"id":33,"title":"Configuration Workbench Tools","url":"10987.htm","text":""},{"id":34,"title":"Common Attributes","url":"39911.htm","text":"The following table lists attributes displayed on all tools.  Any information for these fields for a specific tool is included in the section describing that tool.  Common Attributes  Attributes  Description  Name field  Unique name for the object.  It is strongly recommended that a naming convention be adopted for all components of a configuration.  A naming standard simplifies identification of the type of configuration of a component.  The Customer Management configuration uses specific naming conventions (see the Configuration Principles for Singleview Customer Management).  Display Name field  Name displayed in Process Engine web client.  This field is not displayed on the Message Tool or View tab of the Interface Design Tool.  Description field  Description of the object.  Key field  Object key.  The key is used for debugging configuration.  Automatically generated and read-only.  The minimum key ranges for static and local classes, facts, and messages can be configured using the appropriate configuration item (see the Configuration Guide for Singleview Process Engine).  Last Modified field  Date-time changes last saved to the object.  It is automatically updated and read-only.  Last Modified User field  User who last saved changes to the object.  It is automatically updated and read-only.  Obsolete Date field  Date-time the object was made obsolete.  It is displayed only when the Obsolete tab is selected, and replaces the Last Modified field.    It is automatically generated and read-only.  Categories field and Edit categories button   Lists assigned categories for the object.   The Edit categories button displays the Categories Maintenance window where categories can be:  Created.  Assigned to and removed from objects.  The Core category cannot be removed from core configuration objects, or added to other objects. Other categories can be added to core configuration objects if required.  Version field  Reserved for future use.  "},{"id":35,"title":"Class and Data Tool","url":"11418.htm","text":"The Class and Data Tool is used to set up the data model and reference data.  "},{"id":36,"title":"Detail Tab Attributes","url":"11418.htm#o11413","text":"The following table lists Detail tab attributes.  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Detail Tab Attributes  Attribute  Description  Description field  It is recommended that for:  Remote classes, the class description contain a reference to the remote entity to which the class is mapped (for example, the Convergent Billing entity).  Classes mapped to Convergent Billing reference types or derived attribute tables, the class description contain the name and ID of the Convergent Billing reference type or derived attribute table.    Security Group drop-down list  Mandatory.  Specifies the security group that has access to the class's data and objects.  External check box  Specifies that the class contains data that is retrieved from an external system.  If selected, the Dynamic check box is automatically selected, and the Admin Static, Shared, Structured, and Cached check boxes are disabled.  External classes are always dynamic classes.  External classes cannot be changed to internal classes after the class is saved and committed.  Differences between external and shared classes are described in the Configuration Guide for Singleview Process Engine.  Dynamic check box  Determines whether the class is dynamic (see the Configuration Guide for Singleview Process Engine).  If not selected, the class is static.  The default setting for all new classes is static.  If selected, the Admin Static, Structured, and Cached check boxes are disabled.  A dynamic class cannot be changed to a static, admin static, or external class after it is saved and committed.  AdminStatic check box  Determines whether the class is admin static (see the Configuration Guide for Singleview Process Engine).  If selected, the External and Dynamic check boxes are disabled.  Shared check box  Determines whether a class is shared (see the Configuration Guide for Singleview Process Engine).  That is, a remote table or view is accessed and allows read access to data that is maintained external to Process Engine.  If selected, the External check box is disabled.  A shared class cannot be changed to a local or external class after it is saved and committed.  Structured check box  Specifies that the class contains a structured hierarchy of facts for use in a structured list.  It only applies to structured classes.  If selected, the External and Dynamic check boxes are disabled.  Cached check box  Determines whether a static class's data is cached locally on the PC on which Process Engine web client runs, or stored and retrieved from the Process Engine server when required.  If a class is cached (see the Configuration Guide for Singleview Process Engine), the data is loaded onto the local PC when the user logs into Process Engine web client.  If selected, the External and Dynamic check boxes are disabled.  Cached classes improve performance because the data does not have to be retrieved from the Process Engine server.  Local static classes accessed on a daily basis should be cached.  If the local static class is not constantly used, it should not be cached.  Generally, admin static or shared static classes are not cached.  It is only editable for static and admin static classes.  The cache setting for core static and core admin static classes cannot be changed.  Key Adjusted check box  Specifies that the object key offset be added to object keys when they are passed to the Process Engine server.  Object keys must be positive when passed to the Process Engine server; therefore, adjusting the key is necessary when object keys in shared classes have negative values (for example, Convergent Billing reference codes values, which can be zero or negative).  It only applies to shared static and shared admin static classes.  The value of the offset is specified in the ObjKey_Offset configuration item (see the Configuration Guide for Singleview Process Engine).  It can also be set using the pe_moveclass server utility (see the System Reference Guide for Singleview).  It is strongly recommended that only classes mapping to Convergent Billing reference types be key adjusted.  Last Modified Details check box  Specifies that the Last_Modified and Last_Mod_User facts be created for dynamic classes.  It is read-only and selected by default for all static and admin static classes.  Association 1 field  Specifies the fact that is used to define a simple (one-to-many) association between classes.   The field applies to dynamic, static, and admin static classes.  Clicking the arrow displays the Class Association window.  When creating an association, storage is created for a reference subset fact by default.  If no storage is to be allocated, the No Storage check box must be selected when creating a reference subset fact.  All associations to shared classes must have the No Storage check box selected.  Stored reference subset facts have negative performance impacts if data is being archived and purged from the class.  While data is being purged, Process Engine must rebuild the reference subset facts if they are stored.  For more information on reference subset facts in simple associations, refer to the Configuration Guide for Singleview Process Engine.  Facts from the Association 1 class can be used in a layout.   Associations cannot be modified after the class is saved and committed.  While configuring expressions and EPM functions, the fact specified in the Association1 field is called the AssocRefA fact.  At all other times, it is called the Association 1 fact.  Association 2 field  Used in conjunction with the Association 1 field, and specifies the fact used to define a complex (many-to-many) association.  The field applies to dynamic, static, and admin static classes.  For more information about reference subset facts in complex associations, refer to the Configuration Guide for Singleview Process Engine.  Facts from the Association 2 class can be used in a layout.  Associations cannot be modified after the class is saved and committed.  While configuring expressions and EPM functions, the fact specified in the Association 2 field is called the AssocRefB fact.  At all other times, it is called the Association 2 fact.  Description Fact check box  Determines whether a Description fact for the class is automatically created.  It is recommended that all static and admin static classes have a Description fact.  A Description fact can be manually added to the class after the class is saved and committed.  Display Name Fact drop-down list  Specifies the name of the fact in the class that contains the display name for all the class's objects.   For example, the Contact class has a Display Name fact of OfficialName_X.  The derivation expression for OfficialName_X concatenates the first and last name of the contact.  The value of OfficialName_X (that is, the first and last name of the contact) is displayed in the title bar of the Contact view.  For more information, refer to the Internationalisation Configuration Guide for Singleview.  Local Table Name field  Specifies the physical database table used for the class.  The class usage type determines the default table for class storage. The table below displays default table names for each class type.  The pe_createtable server utility is used to create a user-defined table that can be used as an alternative to the default table.   A user-defined table can store only one class.  The field cannot be changed after the class is saved and committed.  The pe_moveclass server utility can be used to move a class to another table.  Debug Option Include Config check box  Selecting the check box displays additional classes available only for debugging purposes. The list of classes is refreshed to include all classes.  The configuration classes must be updated from the relevant tool and not in the Class and Data Tool; for example, a status class must be updated from the Status Tool.  Use Type Fact check box  Specifies whether the class includes a Type fact for specifying a type for objects in the class.  When selected, the Type Fact drop-down list is mandatory.  Type Fact drop-down list  Enabled when the Use Type Fact check box is selected.  Specifies the Type fact for the class.  A Type fact is a reference fact to a class containing a list of types for the object. A Type fact can only reference static classes.  The drop-down list contains all reference facts belonging to the class.  Only reference facts with an Initial State of Mandatory can be selected as the Type fact.  To define a Type fact, select <new> and click the arrow to open the Fact Tool and create a reference fact with an Initial State of Mandatory.  Type facts allow flexibility.  For example, the Issue class has a Type fact that specifies the following issue types:  Troubleshooting  Billing inquiry  Customer service  Account adjustment.  Different screen layouts and security can be defined for each type in a class.  For example, security can be defined so that only Business users can work with contacts with a Type fact of Business.  Type facts allow gathering of different information for different issue types.  For more information about how a Type fact is used in specifying layouts, refer to the Configuration Guide for Singleview Process Engine.  When a Type fact is used in a class, a static class defining the types must be created.  For example, the Issue class has a Type fact referencing the Issue_Type class that defines the valid issue types.  If required, a Type fact must be created when a dynamic class is created because it cannot be added after the class is saved and committed.  However, the Type fact for a class can be updated after saving.  Status Fact drop-down list  Specifies the Status fact used for each object in the class.  The Status fact is a reference fact to the Status class.  Statuses are defined using the Status Tool.  For example, objects in the Case class can have a status of Open or Closed.  The Open and Closed values are objects stored in the Status fact.  Status facts apply only to dynamic and admin static classes.   Use the arrow to define the Status fact, if required.  The fact can be defined at any time (that is, it does not have to be defined when the class is defined).  Use Categories Fact check box  Specifies whether the class includes a Categories fact for categorising objects.   A Categories fact can be defined for all non-core, fact-based classes. Non-fact-based classes have a Categories attribute.  It is read-only and is automatically:  Checked for local classes  Unchecked for dynamic classes.  Categories Fact drop-down list  Enabled when the Use Categories Fact check box is selected.  Specifies the Categories fact for the class. A Categories fact can be any text fact belonging to the class.  To define a Categories fact, select either of the following:  <new>, and click the Zoom to Tool button to open the Fact Tool and create a string fact.  One of the listed text facts.  If a Categories fact has not been created when a Static or Admin Static class is saved, a fact called Categories is created and associated to the class automatically.  Categories facts cannot be removed from core classes.  They are usually applied to configuration classes, but can be defined for any class.  Use Version Fact check box  Reserved for future use.  Version Fact drop-down list  Reserved for future use.  System Generated check box  If selected, Process Engine automatically generates alias values for the Name fact for the class's objects.  If aliases are automatically generated, the rules for their generation must be specified in the String Expression and Integer Padding fields.  Unless it is essential that a sequential number be allocated for each object in the class, it is recommended that this check box not be selected and the Name fact in the class be defined as Derived, and stored with a derivation expression; for example:  alias([Type].[Name],{This_<classname>}, 1)  It is read-only after the class is saved and committed; that is, it can only be selected when creating a class.   The term 'alias' also relates to a field that names each combination of possible values in a structured class.    String Expression field  Specifies the format of the first portion of system-generated aliases.  Integer Padding field  Specifies the minimum number of characters to be used in the numeric part of system-generated aliases.  If necessary, the generated number is zero-padded to the left to meet this specification.  The following table lists default table names for each class type.  Default Database Table by Class Type  Class Type  Table  Static  UDOC_VAL  Admin Static  UDOC_ADMIN_VAL  Dynamic  UDOC_DYNAMIC_VAL  "},{"id":37,"title":"Structure Tab Attributes","url":"11418.htm#o11415","text":"[[TableXref:11415-1]] lists attributes on the Structure tab.  [[Table:11415-1]]  Structure Tab Attributes  Attribute  Description  Available Fact field  Lists the facts in the class available for inclusion in the structure.  Facts must be designated as available for the structure when they are defined in the Fact Tool.  Only text facts can be used in a structured hierarchy.  Facts can be moved from the Available Fact field to the Alias Fact or Structured Level fields, as applicable, using drag and drop or the arrow buttons.  Alias Fact field  Fact used as the name for each group of permissible values in the structure.  It is displayed in the client as the name for each set of values.  It defaults to the Name fact.  It is recommended that the Name fact be used because it is unique for each object; that is, each set of values.  The fact to be used as the structure's alias can be moved from the Available Fact list.  The term 'alias' also relates to deriving a unique value for a fact in a class using the System Generated check box.    Structured Level field  Allows facts to be included in the structure and their positions in the hierarchy to be specified.  Facts to be included in the structure can be moved from the Available Fact list.  The fact at the top of the Structured Levels list is the fact at the top of the hierarchy.  The following buttons to the right of the list allow a selected fact's position in the hierarchy to be moved:  Top moves the fact to the top of the hierarchy.  Up moves the fact up one position.  Down moves the fact down one position.  Bottom moves the fact to the bottom of the hierarchy.  Levels can be changed after the class is in use; however, a warning message is displayed indicating that the change will make the existing data invalid.  Structured classes cannot be made unstructured after the class is saved.  "},{"id":38,"title":"Local Storage Tab Attributes","url":"11418.htm#o11416","text":"The following table lists attributes on the Local Storage tab.  Local Storage Tab Attributes  Column  Description  Row Key  Column displaying the RowKey value for all facts in the row.  Text  Group of columns in which facts with a type of Text are stored.  Decimal  Group of columns in which facts with a type of Decimal, Date Time, Duration, Currency, or Percentage are stored.  If no date columns are configured, all Date Time facts are stored in decimal columns.  System-generated Date Time facts are always stored in decimal columns even if date columns exist and cannot be moved to a date column.  Integer  Group of columns in which facts with a type of Integer, Boolean, or Reference are stored.  Date  Group of columns in which facts with a type of Date Time are stored.  Date columns are optional and by default, the Storage tab only contains a placeholder for date columns. Add date columns using the pe_addtablecols server utility (see the Configuration Guide for Singleview Process Engine).  If date columns exist, user-defined Date Time facts are stored in these columns.  Otherwise, Date Time facts are stored in decimal columns.  "},{"id":39,"title":"Remote Table Tab Attributes","url":"10088.htm","text":"Attributes are divided on the Remote Table tab by group.  "},{"id":40,"title":"Table Selection Group","url":"10088.htm#o10089","text":"The following table lists Table Selection group attributes.  Table Selection Group Attributes  Attribute  Description  Remote Table field  Specifies the synonym name for the table or view in Convergent Billing.  Table names displayed in the available remote table's list are synonyms for the table names in Convergent Billing.  Synonyms are created using the pe_setsyn server utility (see the System Reference Guide for Singleview).  A table or view can be mapped to more than one class.  It is preferable to map to a table rather than a view because a view is normally a join between two or more tables and can negatively impact performance.  However, sometimes more data is required than is provided in the base Convergent Billing table, and a view must be defined.  When mapping to a reference type, specify REFERENCE_CODE_CM_V.  Expiry Duration field  Specifies the maximum time an object retrieved from Convergent Billing can be held in the server cache before it must be refreshed.  This value is typically longer for static classes than for dynamic classes.   When the class duration expires and the value is required again, the value is retrieved by the server and stored in the public cache.   Updating this field prompts a warning on commit if Convergent Billing's EntityClassAssociation derived attribute table contains details to purge this Process Engine class when an entity purge in Convergent Billing must also trigger a Process Engine class purge (see the Configuration Guide for Singleview Process Engine).  To determine the optimal expiry duration, analysis must be done to ensure updates performed in Convergent Billing are seen in a timely manner in Process Engine.  If the expiry duration of a class is not defined properly, performance is affected, because the server performs redundant retrievals.   For most static and admin static shared classes, a one-day expiry duration is reasonable.  A shorter time is used if the data in the external system is expected to change frequently.  For example, a shorter expiry duration may be required for the CBUser class mapped to Convergent Billing users, because if new users are added or profile adjustment limits changed, it is likely that the updates would be effective in a short period of time.    For dynamic shared classes, a much shorter expiry duration is used.  If the data can be updated in Convergent Billing and up-to-date information must be displayed in the Process Engine web client, an expiry duration of less than two minutes is acceptable.  An object can be manually re-derived before the expiry duration using the ObjectRefresh&() function in a trigger (see the Configuration Guide for Singleview Process Engine).  If expiry duration is not set, it defaults to 1d for shared static classes, and 10min for non-shared static classes.  The pe_admin server utility with the -pc option can be used to purge the data from the server cache before the expiry duration period has lapsed.  This field is not related to the Expiry Duration field in the Fact Tool.  Remote Master check box  Specifies that the data is controlled by Convergent Billing.  Keyless Class check box  Specifies that the Convergent Billing table's primary key is based on multiple columns or a non-numeric column.  By default, a temporary numeric key is generated on retrieval from the database and the key is only valid while the object remains in the local server cache.  The multiple columns that make up the Convergent Billing table's primary key can be stored in the Process Engine database (see the Configuration Guide for Singleview Process Engine).  Facts belonging to a keyless class cannot be stored locally.  The Create Storage check box is automatically cleared for Last Modified, Last Modified User, Categories, and Version facts when the Keyless Class check box is selected.   "},{"id":41,"title":"Object Identification Group","url":"10088.htm#o10090","text":"The following table lists Object Identification group attributes.  Object Identification Group Attributes  Attribute  Description  Object Key Column field  Specifies the column in the remote table that represents the object key in the Convergent Billing.  It must be an integer column in the Convergent Billing.  This field is not enabled if the Keyless Class check box is selected.  Entity Name field  Used for updating the value in the Convergent Billing table using an EPM function call in a pre-commit or pre-validation trigger.  Therefore, the name does not work from the Configuration Workbench because it does not invoke triggers when committing changes.  The entity name matches a value in the ENTITY_MAPPING table in Convergent Billing.  Remote Allocation Function drop-down list  Specifies an EPM function that obtains the ID of the partition required for this object.  This drop-down list is disabled if the Association 1 fact for the shared class is not null.  If the shared class has a null Association 1 fact and the EPM function is not specified, the biEntityNextId&() EPM function is run and the default partition is used for the object (see the Configuration Guide for Singleview Process Engine).  "},{"id":42,"title":"Contain Multiple Classes Group","url":"10088.htm#o10091","text":"The Contain Multiple Classes group is used for mapping a shared class to a Convergent Billing table with multiple classes.  The Class Id Column and Class Id fields of a shared class identify rows belonging to a specific class in a Convergent Billing table with multiple classes.  The Class Id Column field indicates that the column contains a unique class ID.  The Class Id field specifies the value identifying the class.  Class Id must be selected when Class Id Column is specified.  The following table lists Contain Multiple Classes group attributes.  Contain Multiple Classes Group Attributes  Attribute  Description  Contain Multiple Classes check box  Specifies whether the table in Convergent Billing contains multiple classes.  If selected, in addition to the object primary key, a class ID is required.  The ID is used, for example, when mapping a class to a reference type in Convergent Billing.  Class Id Column field  Specifies the column that contains the class ID.  Class Id field  Specifies which value identifies the class.  The value can only be selected from the Class ID Value Selection window.  "},{"id":43,"title":"Class ID Value Selection Window","url":"10088.htm#o10092","text":"The following table lists Class ID Value Selection window attributes.  Class ID Value Selection Window Attributes  Attribute  Description  Available Values list  Lists the class ID values and Class ID column from the selected table.  Table Name field  Defaults to the remote table name selected on the Remote Table tab.  However, if the required class ID value is not located within the table, the user can browse to select a different table.   When mapping classes to Convergent Billing reference types, select the REFERENCE_TYPE table that contains a complete listing of all defined reference types.  Class ID Column Name field  Column from the selected table that contains the class ID value.  Only integer and string columns are displayed from the table.  When mapping classes to Convergent Billing reference types, select the REFERENCE_TYPE_ID column.  String Column field  Column from the selected table that identifies the name or description of the class ID value.  Only string columns are displayed from the table.  When mapping classes to Convergent Billing reference types, select the TYPE_LABEL column.  String Column Filter field  Specifies a filter for the String Column field.  Query button  Used to run the query that returns a list of class ID values from the selected table.  The values are displayed in the Available Values list.  Selected Class ID Value field  Class ID value selected from the Available Values list that is used in the Class Id field on the Remote Table tab.  If the class ID value is known, the value can be entered directly into this field without having to select the remote table name and invoke the query.  When the field is populated, the OK button is enabled.  "},{"id":44,"title":"Class Associations Group","url":"10088.htm#o10093","text":"The following table lists Class Associations group attributes.  Class Associations Group Attributes  Attribute  Description  Association 1 Fact Column field  Column in the remote table that is mapped to the association 1 reference fact.  Association 2 Fact Column fields  Column in the remote table that is mapped to the association 2 reference fact.   "},{"id":45,"title":"Remote Table Columns Area","url":"10088.htm#o10095","text":"This area lists available columns from the remote table, including column name, data type, whether the column is indexed, and length of a string column.   "},{"id":46,"title":"Remote System Facts Tab Attributes","url":"10098.htm","text":"Attributes on the Remote System Facts tab are divided into the following tabs:  System Facts, which contains system facts.  Date Ranging, which contains the groups for:  Date ranging  Date ranging facts.  "},{"id":47,"title":"System Facts Tab","url":"10098.htm#o10099","text":"The mandatory facts that must be defined are name, security group, last update, and obsolete date.  These facts must be mapped if stored and the class is Remote Master or Keyless.  The Last Update and Obsolete Date facts are defined as <<No Storage>> when the class is defined as the Remote Master.  However, remote storage can be specified for these facts in the normal way.  If the class is Local Master, these facts must be local and cannot be <<No Storage>>.  Optional system facts are only enabled if the corresponding facts are defined in the Detail tab; otherwise, they are disabled.  The following table lists System Facts tab attributes.  System Facts Tab Attributes  Attribute  Description  Name Fact Column field  Mandatory.  Specifies the column that maps to the local Name fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to a string data type column.  Security Group Fact Column field  Mandatory.  Specifies the column that maps to the local Security Group fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to an integer or string data type column.  If integrating with Convergent Billing, this fact is typically mapped to the ATLANTA_GROUP_ID or GROUP_ID column.  Last Update Fact Column field  Mandatory.  Specifies the column that maps to the local Last Update fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to a decimal, date, or string data type column.  Obsolete Date Fact Column field  Mandatory.  Specifies the column that maps to the local Obsolete Date fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to a decimal, date, or string data type column.  If integrating with Convergent Billing, this fact is not mapped and remains as <<No Storage>> because Convergent Billing does not have the concept of obsolete objects.  Status Fact Column field  Optional.  Specifies the column that maps to the local Status fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to an integer or string data type column.  Type Fact Column field  Optional.  Specifies the column that maps to the local Type fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to an integer or string data type column.  Display Name Fact Column field  Optional.  Specifies the column that maps to the local Display Name fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to an integer or string data type column.  Description Fact Column field  Optional.  Specifies the column that maps to the local Description fact.  Defined as local storage or a column name from the remote table.  It can be assigned only to a string data type column.  "},{"id":48,"title":"Date Ranging Tab","url":"10098.htm#o10101","text":"The Date Ranging group specifies date ranging for the class.  The options are:  No date ranging  Date-only ranging  Date-time ranging.  Select the option corresponding to the date-time ranging used in the remote table.  For more information about date ranging, refer to the Configuration Guide for Singleview Process Engine.  If date-time ranging is used, it is recommended that all classes are date-time ranged.  If some classes are date-time ranged and some are date-only ranged, this may result in unexpected behaviour.   If a date ranging option that does not correspond to the date ranging used in the remote table is selected, errors will occur in Process Engine.   Errors may occur if a class is changed from date-time to date-only ranging after data is created in the class.  Enabling date-time ranging can result in frequent retrieval of shared class objects from remote databases, which can negatively impact system performance.  "},{"id":49,"title":"Date Ranging Facts Group","url":"10098.htm#o11423","text":"The Start Date Fact and End Date Fact fields must be defined before a remote column can be mapped for the start and end dates.  The <new> option and arrow can be used to define appropriate facts.  The Date Ranging Facts group is only enabled if the Date-only ranging or Date-time ranging option is selected in the Date Ranging group.  The following table lists Date Ranging Facts group attributes.  Date Ranging Facts Group Attributes  Attribute  Description  Start Date Fact field  Specifies the fact in Process Engine mapped to the Convergent Billing Start Date Fact Column.  Start Date Fact Column field  Specifies the column in Convergent Billing containing the start date.  It is typically mapped to the EFFECTIVE_START_DATE the start date.  It can be assigned only to a decimal, date, or string data type.  End Date Fact field  Specifies the fact in Process Engine mapped to the Convergent Billing End Date Fact Column.  End Date Fact Column field  Specifies the column in Convergent Billing containing the end date.  It can be assigned only to a decimal, date, or string data type column.  It is typically mapped to the EFFECTIVE_END_DATE column.  "},{"id":50,"title":"Remote Table Columns Area","url":"10098.htm#o10103","text":"Remote Table Columns area lists the columns in the remote table that can be used for defining system and user-defined facts.  "},{"id":51,"title":"Remote Facts Tab Attributes","url":"11419.htm","text":"Attributes are divided on the Remote Facts tab by group.  "},{"id":52,"title":"Remote Table Columns Group","url":"11419.htm#o10106","text":"The Remote Table Columns group displays a list of column names from the remote table and any assigned facts.    Because it is possible to map a single remote column to multiple facts, the first assigned fact is displayed in the Assigned Fact column; to view the other facts assigned to a column, refer to the Facts group.  "},{"id":53,"title":"Facts Group","url":"11419.htm#o10107","text":"The Facts group displays the facts in the class and their attributes, as they relate to the remote columns.  The following table lists fact attributes that can be updated.  Fact Group Attributes That Can Be Updated  Attribute  Description  Fact Name column  Fact name.  Fact Type column  Local fact type, which maps the Process Engine fact type to the remote data type.  Depending on the data type being mapped to, a fact type can be changed when:  A fact is created to map by clicking the Create Fact to Assign button.   By default, the new fact is the same fact type as the column data type.  The Fact Type field can be used to override the default fact type.  For example, a reference fact needs to be mapped to an integer column.  By default, an integer fact is created for the integer column.  The fact type can be changed to reference before saving.  The data type in the remote column changes after a Process Engine fact is mapped to the column.  The fact type can be updated to match the data type of the remote column to which it is mapped.  Length column  Length of the field.  It is applicable only to text facts.  RefClass column  Reference class.  It is applicable only to reference facts.  Column Name column  Read-only.  Name of the column in the remote table.  DataType column  Read-only.  Data type of the remote table column.  The Process Engine fact type is mapped to a valid remote data type (see the Configuration Guide for Singleview Process Engine).  PrimaryKey column  Specifies if the fact is part of the primary key.   It is applicable to keyless classes (see the Configuration Guide for Singleview Process Engine).  The following table lists valid fact types that map to remote data types.  Mapping of Fact Type to Remote Data Type  Fact Type  Data Type  Boolean, Currency, Date Time, Decimal, Duration, Integer, Memo, Percent, Reference, Text  String  Date Time  Date  Boolean, Decimal, Integer, Reference   Integer  Currency, Date Time, Decimal, Duration, Integer, Percent.  Decimal  It is only possible to change the local fact type from this tab.  "},{"id":54,"title":"Data Tab","url":"55299.htm","text":"The Data tab is displayed only for static and admin static classes, and is used to create and maintain the data in those classes.  There is a column for each fact in the class.  A user's profile allows access to the Data tab to be controlled independently of their access to the Class and Data Tool, subject to specific rules.  Data tab access can be:  Read-write or read-only, if the user has read-only access to the Class and Data Tool.  Read-write, if the user has read-write access to the Class and Data Tool.  The same as the Class and Data Tool access, if access level is not defined for the tab.  It is not necessary to lock before editing data in the Data tab in the Class and Data Tool.  The Association 1 and Association 2 facts specified for a class can be updated using the Data tab when creating an object; however, they cannot be updated after the object is saved.  To move a fact (column), use drag-and-drop to move the column to the required position.  To sort the displayed data, click on the column heading.   Sorting the data or moving a column does not affect the data stored in the database.  Some static classes are not displayed in the Class and Data Tool because they have a dedicated configuration tool; for example, the objects in the Status class are created and maintained in the Status Tool.  The following cannot be edited in the Data tab:  Remote facts in a shared class  Binary (that is, Image and Memo) facts  Facts with an Initial State of Read Only.  "},{"id":55,"title":"Fact Tool","url":"41867.htm","text":"[[TableXref:41867-1]] lists Fact Tool attributes.  How the attributes are displayed depends on the fact type, derivation, and if the fact is a core fact.  [[Table:41867-1]]  Fact Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Fact Name field  Equivalent to the Name field in other tools.  Display Name field  Specifies the fact name used in Complex searches and default caption for the fact in the Process Engine client.  If the fact caption is updated (in the Caption field in the Interface Design Tool), the display name must be updated to match the caption. Otherwise, the fact name in the Complex search does not match the caption in the Process Engine client and the fact cannot be effectively used in Complex searches.   This field is mandatory and must be unique within the class.  Edit Mask field  Determines which characters are allowed for a specific fact.  If the user attempts to enter an invalid character, the edit control does not accept the character.  Edit masks only apply to data entered in the Process Engine client.  This attribute is only available for the following fact types: Currency, Date Time, Decimal, Duration, Integer, Percent, and Text.  A mask consists of the following three parts, with semicolons separating the fields:  The first part of the mask is the mask itself.   The second part is the character that determines whether the literal characters of a mask are saved as part of the data.   A '0' indicates that the literal is not saved as part of the data.  A '1' indicates that the literal is saved as part of the data.  The third part the character used to represent non-entered characters in the mask (using a space for this character indicates that nothing is displayed for empty spaces).  Security Group drop-down list  Specifies the security group.  The security group is defaulted to the security group defined for the fact's class.  Object Type drop-down list  Specifies the type of object the facts are applicable to.  If an object type is specified, the fact can only be used with that object type.  The drop-down list contains a list of objects referenced by the Type fact of that class.  For example, for facts in a Contact class, the object types include Residential, Business, and so on.  Only enabled if the fact's class has a Type fact specified.  It is always disabled for core and system-generated facts.  Derivation drop-down list  The derivation attribute controls how a fact's value is populated.  It is recommended that the majority of facts have at least a default value to reduce data entry time.  Possible values are: Alias, Default, Derived, Indicator, Initial, Lookup, None, and Reference Subset.  Create Storage check box  Specifies that the fact value be stored in the database (only applicable for a derivation of None, Initial, Default, Derived, and Reference Subset).  The Create Storage and Use in the Structure check boxes overlap each other on the screen. Create Storage is displayed for all facts other than text facts in structured classes.  The value of the fact can never be modified for a derivation of Reference Subset using the Fact Tool. Modifications must be made using the Class and Data Tool.  Use in the Structure check box  Specifies if text facts in structured classes are part of the structure (that is, are to be displayed in the cascading drop-down list in the Process Engine client).  The Create Storage and Use in the Structure check boxes overlap each other on the screen.  Create Storage is displayed for all facts other than text facts in structured classes.    Text facts in structured classes are always stored in the database.  Create Ref Subset Fact check box  Only enabled for reference facts for which the Reference Class is the class in which the fact is created.  If selected, Process Engine automatically generates a reference subset fact with a derivation of Reference Subset and no derivation or association filter expression.  The default name of the reference subset fact is All_<class name>_<fact name>.  The created reference subset fact allows the Process Engine client to display moved nodes in a hierarchy tree before the data is committed to the database.  The Create Ref Subset Fact check box can be updated after the fact is created.  Initial State group  Describes how facts are initially managed (or the state of a fact when an object is first created).  A dynamic or admin static class can also have their fact states controlled using a Status fact.  For example, when a case has a status of Closed, several facts become read-only.  Some system variables may override the initial state.  For example, the security may dictate that a user sees an editable fact as read-only.  Force Expire check box  Only enabled if the:  Derivation is Derived, and the Create Storage check box is not selected.  If the Create Storage check box is selected, the fact is forced to expire (see the Configuration Guide for Singleview Process Engine).  Class is not cached, derivation is Lookup, and the Lookup reference fact refers to a static class.  Unique check box  Specifies that the fact's data value must be unique within the class.  This is not applicable to facts stored in a remote table.  For Name facts, the default setting is:  Selected (true) for static and admin static classes  Deselected (false) for dynamic classes.  Enforcing uniqueness for fact values may incur a substantial performance overhead.  Facts for which this constraint is enforced should be stored in an indexed column, especially if they belong to a dynamic class.  Upper Case check box  Specifies that the fact data be automatically converted to upper case in the Process Engine client.  It applies only to text facts.  Password check box  Specifies that all displayed characters in the text be replaced with an asterisk in the Process Engine client.  The data stored in this fact in the database is encrypted.  It applies only to text facts.  Include Security check box  Enabled only if derivation is Indicator.  Specifies that the fact returns a count of the number of objects accessible to the user executing the search. If not selected, specifies that the fact returns a count of the total number of objects available for the linked search.  When the Include Security check box is selected, the Expiry Duration field is disabled and defaults to 0d.  Denormalised check box  Enabled only for Reference facts stored in a remote string column.   Specifies that a stored Reference fact be denormalised.   In Process Engine, a Reference fact stores the integer key of the referenced object. The integer key can be stored in a string column or a number column.  This check box must only be selected if the fact value is stored in a string column and the value does not represent the integer key, but is a string representation that is looked up to find the integer key. The string is usually  the name of the object.  To determine whether to select this check box, refer to the data stored in the remote string column, and if it is:  An integer key, do not select this check box.   A string representing the value of a Text fact in the referenced object (usually the name and the Text fact is the Reference Identity fact), select this check box.  Fact Usage group  Specifies how facts are used within Process Engine. A fact can have one or more usage indicators selected.  The Keywording, Soundex, WildCard, and Case Insensitive attributes have significant performance overheads and should only be selected if essential.  Summary check box  Specifies whether the fact can be displayed in the List section of the applicable view on the Process Engine client.  Facts without the check box selected can still be included in the tabular list (or grid) in the Tab or Detail sections of a view.  The check box is only relevant for facts in dynamic or admin static classes with a defined view.  Only select this check box if the fact must be available in the List section of the view.  There are performance implications in the client if unnecessary facts have the Summary check box selected.  If selected for derived facts, unnecessary derivations may occur.  Summary usage cannot be specified for reference subset facts created manually or automatically.  Detail check box  Specifies whether the fact can be displayed in the Detail or Tab sections of a view on the Process Engine client.  It is only relevant for facts in dynamic or admin static classes that have a defined view.  Searching check box  Specifies whether the fact can be used in In Place and Complex searches.  It is disabled for image, memo, and derived reference subset facts.  If selected for text facts, the Soundex, Wildcard, and Case Insensitive check boxes are also enabled (see the Configuration Guide for Singleview Process Engine).  This check box can be selected for derived facts that do not have Create Storage selected. However, for derived text facts the Soundex, Wildcard, Case Insensitive, and Keywording check boxes are disabled.  Derived fact expressions must only contain reserved words that can be converted into SQL (see the Configuration Guide for Singleview Process Engine).  Date Only check box  Applies only to Date Time facts and specifies whether the Date Time fact is date-only.  If a date-only fact is used as an end date fact in a date-ranged class, the time portion is set to 23:59:59. All other date-only facts in the Process Engine server have the time portion set to 00:00:00.  Date-only facts improve the handling of dates where the time portion is not relevant (see the Configuration Guide for Singleview Process Engine).  Keywording check box  Specifies whether a specified word can be searched for in the fact value when a complex search is performed (see the Configuration Guide for Singleview Process Engine).  It applies only to text and memo facts.  The fact cannot be stored in a remote table.  Soundex check box  Specifies that the fact's value be automatically converted to an alphanumeric code that is stored as the value of an associated and automatically-created Soundex reference fact (see the Configuration Guide for Singleview Process Engine).  This allows the user to perform a 'sounds like' search, finding words phonetically similar to the word on which the search is based.  WildCard check box  Allows a wildcard search to be performed on a fact in In Place searches.  Wildcard searches are not supported in Complex searches (see the Configuration Guide for Singleview Process Engine).  Case Insensitive check box  Specifies that the fact is case-insensitive in an In Place search; otherwise, the fact is case-sensitive (see the Configuration Guide for Singleview Process Engine).  Selecting this check box makes the fact case-insensitive in Complex searches only if the 'matches', 'matches like', or 'matches start with' search operators are used.  Stored Foreign Key check box  Enabled only for reference facts associated with shared keyless classes (see the Configuration Guide for Singleview Process Engine).  If selected, stores the foreign key of the remote object, so that the Process Engine server retains the temporary keys when refreshing the keyless class in the client. This avoids keyless objects being identified as new objects and re-derived.  Since the reference fact itself is not stored, the values of the facts that make up the primary keys on the associated keyless class are stored (see the Configuration Guide for Singleview Process Engine). When the Stored Foreign Key check box is selected, Process Engine creates a hidden foreign key value fact for each primary key in the associated keyless class.  The hidden foreign key value facts have the following naming convention:  <reference_fact_name>_FKV_<primary_key_fact_name>  These facts are visible in the Local Storage tab in the Class and Data Tool.  Process Engine automatically obsoletes or restores the foreign key value fact when the:  Reference fact is obsolete or restored.  Stored Foreign Key check box is deselected or selected.  Multiple reference facts with an enabled Stored Foreign Key check box can be created for a class and associated with a single keyless class.  The keyless class must contain at least one primary key fact.  External Access drop-down list  An external access fact is a fact whose data is maintained in another system, and imported into Process Engine.  The drop-down list displays only external services with a service category of ACCESS.  External services are deprecated.  CSG International recommends that external services be replaced by a user-defined EPM function (for example, ExternalAccessFunction$()).  Account information is an example of data that is maintained in another system, but is available in Process Engine.  The class and its facts must still be defined, but the data can be accessed from another system.  This cannot be modified if there is an association filter expression because an external fact can only derive values from a single source.  External Update drop-down list  An external update fact is a fact whose data is maintained in Process Engine, but another system can access it.  The drop-down list displays external services with a service category of UPDATE; for example, if adjustment values are defined as 'external update'.  External services are deprecated. CSG International recommends that external services be replaced by a trigger such as After Fact Update which executes a user-defined EPM function.  Process Engine is used to enter and create the adjustment and the data is sent to a downstream system for further processing.  Evaluation Timing drop-down list  An evaluation timing fact obtains its values from an external system, or whose derivation is Initial, Default, or Derived.  It controls how some types of data retrieval and calculations are performed. Options are:  Asynchronous  The user can continue working while the operation is being performed.  Synchronous  The user must wait for completion of the operation before normal operation can be resumed.  Default  Process Engine determines the method used (synchronous or asynchronous) as a function of the type of operation to be performed.  Expiry Duration field  Maximum time for which the value of this fact is to be considered valid (see the Configuration Guide for Singleview Process Engine).  This field is not related to the Expiry Duration field in the Remote Table tab of the Class and Data Tool.  On commit, the Expiry Duration field is set to 0d if the Include Security check box is selected or all of the following are true:  Class is not cached and the derivation type is Lookup  Lookup reference fact refers to either of the following:  Dynamic class  Static class when the Force Expire check box is selected.  Display Format field  Specifies how the values of some facts are displayed.  Affected fact types are Currency, Decimal, Percent, and Date Time.  The display format only controls display of the fact's value. It does not control the size of the fact's field in which the value is displayed.  The Fact Group/Layout within the Interface Design Tool controls the display size.  Length field  Specifies (in number of characters) the maximum length of the fact's values.   It applies only to text facts.  The Length and Threshold fields overlap in the Fact Tool and the field displayed depends on the fact type and derivation.  Length is displayed by default.  Threshold field  Applies only to integer facts whose derivation is Indicator.  It specifies the number of objects that must be found by the specified search before displaying them.  The threshold number is inclusive. For example, if a threshold of '3' is specified and three or more objects are found by the search, the number found is displayed.  The Length and Threshold fields overlap in the Fact Tool and the field displayed depends on the fact type and derivation.  Length is displayed by default.  Icon drop-down list  Applies only to boolean and integer facts whose derivation is Indicator.  For boolean facts, it specifies the icon to be displayed in grids to represent the True state of a boolean fact.  If the value is False, the icon is not displayed. If no icon is specified, the state of a boolean fact is indicated by the word True or False in grids.  For integer facts whose derivation is Indicator, it specifies the icon to be displayed on the Indicator fact button.  If the number of objects returned by the search is less than the Threshold, the icon is greyed-out. If no icon is specified, the number of objects found is displayed on the button.  Reference Class drop-down list  Specifies the name of a fact-based class to be referenced and applies only to facts whose type is Reference.  If the fact is a Type fact for a class, it displays only static classes.  The Reference Class and Association Class drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation. The Reference Class list is displayed by default.  Association Class drop-down list  Specifies the name of the class for which the fact is to maintain a list of objects.  It applies only to reference subset facts.  It is editable only for reference subsets facts with a derivation of Derived.  The Reference Class and Association Class drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation. The Reference Class list is displayed by default.  Reference Fact drop-down list  Displayed by default and is used as a placeholder for the Lookup Reference Fact, Text Fact, and Stored Foreign Key Fact drop-down lists.  The Reference Fact, Lookup Reference Fact, Text Fact, and Stored Foreign Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Lookup Reference Fact drop-down list  Specifies the fact referencing the class containing the fact to be retrieved.   It applies only to a fact whose derivation is Lookup.  The Reference Fact, Lookup Reference Fact, Text Fact, and Stored Foreign Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Text Fact drop-down list  Specifies the name of the fact that provides the alphanumeric part of an alias.   It applies only to integer facts whose derivation is Alias.  With derivation of Derived and a derivation expression that concatenates the values of the integer fact being defined and the specified fact, it must be separately defined for the resultant alias.  The Reference Fact, Lookup Reference Fact, Text Fact, and Stored Foreign Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Stored Foreign Key Fact drop-down list  Displays a local fact defined as a Stored Foreign Key fact in a current class that references a remote keyless class.  The foreign key value fact is a hidden fact and is displayed by pressing Ctrl+Alt+Double-click in the Details tab.  The Reference Fact, Lookup Reference Fact, Text Fact, and Stored Foreign Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Deferred check box  Enabled only for non-stored derived or lookup facts.  If checked, the value of the fact is not re-derived when a related update is made in the Process Engine server. The value of the deferred fact will only be derived when an explicit request is made by a client, a trigger, another fact's derivation expression or explicit retrieval from EPM functions.  Ceiling field  Indicates the maximum number of objects to display in a drop-down list for a reference fact with the filter expression specified, or the maximum number of objects to return for a non-stored reference subset fact.  The following applies to the field:  Disabled when 'None' or 'Search' is selected in the Filter Search group.  A value can be specified only for facts with a filter expression.  Ceiling cannot be greater than the hard row limit specified in the Interface Design Tool.  If left blank for reference facts with a filter expression, or reference subset facts, the server defaults to 0, and the hard row limit is used during runtime.  In the Process Engine client, if the ceiling is reached for a reference fact, a message indicating that the ceiling is reached, fact name (if it can be determined), and number of objects retrieved is displayed.  In the Process Engine client, if the ceiling is reached for a reference subset fact, no message is displayed.  Reference Identity Fact drop-down list  Specifies the name of the fact in the class whose values are to be retrieved and displayed in the drop-down list.  If a search is selected, the result fact from the search definition is used.  Reference Identity Fact applies only to reference facts whose derivation is not Lookup, and either None or Filter Expression is chosen in the Filter Search group.  An option from the Reference Identity Fact drop-down must be specified for a reference fact that is not a lookup derivation, or is not using a filter search. After an option from the Reference Class drop-down list is specified, the reference identity fact defaults to Display_Name if it exists, but to the Name fact if not. Any other fact can be specified from the Reference Identity Fact drop-down list.  It is recommended that the fact used as the reference identity fact be configured as a unique fact. If not configured as unique, duplicate entries can be displayed in the drop-down list. If a duplicate entry is displayed, the object key is added in brackets to the label, after the display name.  The Reference Identity Fact, Lookup Foreign Fact, Parent Fact, and Foreign Primary Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Reference Identity Fact is displayed by default.  Lookup Foreign Fact drop-down list  Applies only to facts whose derivation is Lookup, and is the name of the fact in the referenced class whose value is to be retrieved.   The Foreign fact type must match the current fact type. The current fact inherits the encryption/masking attribute type of the selected Foreign fact.  The Reference Identity Fact, Lookup Foreign Fact, Parent Fact, and Foreign Primary Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Reference Identity Fact is displayed by default.  Parent Fact drop-down list  Specifies the name of the reference fact in the current class that is this fact's parent.  It is used by fact groups whose type is Hierarchy Tree, to display hierarchies in Process Engine.  It is valid for reference subset facts whose derivation is Derived and that has its own class as its association class.  The Reference Identity Fact, Lookup Foreign Fact, Parent Fact, and Foreign Primary Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Reference Identity Fact is displayed by default.  Foreign Primary Key Fact drop-down list  Specifies the primary key fact in a keyless class referenced by the fact in the Stored Foreign Key Fact drop-down list.  It is displayed only for foreign key value facts.  The foreign key value fact is a hidden fact and is displayed by pressing Ctrl+Alt+Double-click in the Details tab.  The Reference Identity Fact, Lookup Foreign Fact, Parent Fact, and Foreign Primary Key Fact drop-down lists overlap each other on the screen, and visibility depends on the fact type and derivation.  Reference Identity Fact is displayed by default.  Filter Search group  Filter searches and expressions determine the set of objects from the reference class which are available to be selected in the Process Engine client from the drop-down list.  Filter searches and expressions are used to display only valid objects for the reference fact.  The following conditions apply to filter searches and expressions:  A filter search or expression is optional for a reference fact.  A filter search or expression should be specified for facts with no derivation referencing non cached classes.  If not specified, an error is displayed in the Process Engine client when the reference fact drop-down list is selected.  A filter search or expression is optional if the reference class is cached. If a filter search or expression is used, the drop-down list is populated by executing the filter search or expression, not from the Process Engine client cache.  For reference facts, the value entered in the Search field is the name of the search used to retrieve objects from the non-cached class. The search also identifies the fact in the class whose values are to be retrieved.  A filter search or expression must be specified for reference facts, if the reference class is non-cached and the facts are to be edited by the user.  A filter search must be used for facts whose type is Integer and whose derivation is Indicator. The value entered in the Search field is the name of the search that is invoked automatically when its Indicator fact is viewed.  Specify a display order for the filter search by selecting the appropriate sort option:  Alphabetical (default)  Results sorted alphabetically in the Process Engine client.  Expression  Results sorted in the order in which they were returned from the server, preserving any sort expressions applied in the filter search expression.  Encryption/Masking Attribute Type  Controls whether or not a fact is encrypted and masked.  It contains Convergent Billing attribute types configured for encryption or masking (see the Configuration Fundamentals Guide for Singleview Convergent Billing). The values in the Attribute Type Display Mask Function and Encryption Algorithm fields determine the level of encryption and masking applied to a field (see the Security and Auditing Configuration Guide for Singleview).  If a fact is mapped to a remote column, the drop-down list displays attribute types appropriate for the class's underlying table and selected column.  The field is enabled only for stored Text facts in Admin Static and Dynamic classes (local or shared), with a derivation type of:  None  Initial  Default  Derived.  Only select an option if encryption and masking is required; otherwise, the field must remain blank.  If a shared class supporting encrypted or masked facts is mapped to a Convergent Billing table using a customised view (see the Configuration Fundamentals Guide for Singleview Convergent Billing), the view must be added to the ViewEVMap derived attribute table (see the Configurer's Reference Guide for Singleview Convergent Billing (Vol. 1)).  Derivation Expression field  A fact may require an expression to derive the value.  An expression is mandatory for fact derivations such as Initial, Derived, or Default and optional for a fact derivation of None. Any expression that is valid for the type of fact involved can be defined. Expressions are checked for errors when saved.  The Derivation Expression and Association Filter Expression fields overlap in the Fact Tool and the field displayed depends on the fact type and derivation.  Derivation Expression is displayed by default.  A GET All expression cannot contain an association reference fact with a GET ALL expression.  Association Filter Expression field  Specifies the expression for reference subset facts whose derivation is Reference Subset or Derived.  If the derivation is Reference Subset, the expression is a boolean expression that filters objects from the master reference subset fact.  If the derivation is Derived, the expression selects objects from the associated class for which this fact is to maintain a list of objects.  The Derivation Expression and Association Filter Expression fields overlap in the Fact Tool and the field displayed depends on the fact type and derivation.  Derivation Expression is displayed by default.  If an external access service is selected for the current reference subset fact, a derivation expression cannot be entered into the Association Filter Expression field because the value of the current fact is derived from the external access service.  Table Column field  Applicable only for shared classes and editable only when a new fact is being created in a shared class.  If the fact does not have storage (that is, is derived or a lookup), <<No Storage>> is displayed.  If the fact is:   Stored locally in Process Engine, <<Local Storage>> is displayed.  Mapped to a column in a remote table or view, the column name is displayed.  Inc Config Class check box  Selecting the Inc Config Class check box displays additional classes available only for debugging purposes.  The list of classes is refreshed to include all classes.  "},{"id":56,"title":"Business Rule Tool","url":"41868.htm","text":"[[TableXref:41868-1]] lists the Business Rule Tool attributes.  [[Table:41868-1]]  Business Rule Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  It is recommended that business rule names have a prefix indicating the type of object to which the rule relates.  For example, the business rule to ensure a contact number is entered is called ContactNumMissing.  For information about Customer Management naming conventions, refer to the Configuration Principles for Singleview Customer Management.  Class field  Read-only.  Class to which the rule applies.  It defaults to the class for which the business rule is created.  Business rules can be defined for any dynamic class.  If a business rule is added to a static class (including configuration and admin static), all objects of that class must pass the rule before the rule can be saved.  For example, if a rule is created for the User class, the rule must be valid for all existing users.  Object Type drop-down list  Specifies the type of object that the business rule applies to.  It contains a list of objects referenced by the Type fact of that class.  Message Name and Message ID fields  Read-only.  Name and ID of the message displayed when the conditions defined in the rule are met.  These fields are edited in the Message Tool.  Click the arrow to open the Message Tool (see the Configuration Guide for Singleview Process Engine).  Error, Warning, and Information options  One of the following message types must be selected as the type of message to be displayed, as follows:  Error, when any invalid entry must be corrected before processing can continue.  Warning, when an invalid entry is made, but the user has the option to continue.  A window is displayed asking if they want to continue.  Information, when information is required for the user.  Message field and arrow button  Read-only.  Message displayed when the conditions defined in the rule are met.  The message has a maximum of 3996 characters.   Messages are created and modified in the Message Tool.  Click the arrow to open the Message Tool (see the Configuration Guide for Singleview Process Engine).  Param field  Read-only.  Parameter number specified in the message.  It is populated after the fact is selected.  Fact field  Parameter to be used in the message.  Parameters are specified in the message as {1}, {2}, and so on, where the number corresponds to the number in the Param field.  The parameter is replaced by the corresponding fact value when the message is displayed.   The drop-down list includes facts with:  A global object type (that is, no object type).  An object type matching the trigger's object type.  If the object type is changed in the Object Type drop-down list, incompatible facts in the parameters table must be manually removed.  Trigger on Commit Only check box  Specifies when the business rule is evaluated.  If selected, the business rule is evaluated only when the object in the specified class is saved; that is, when the user clicks the Save button.  If not selected, the business rule is evaluated when the cursor leaves the facts specified in the expression; that is, when the user tabs out of the facts listed in the expression.  Rule Expression field  Expression defining the rule.  The expression must be a boolean expression. Only facts from the class for the rule can be included in an expression.  If the expression evaluates to False, the rule fails and a message is displayed.  If the expression evaluates to True, processing continues.   Recommendations for writing the expression are:  Write the expression for when the message is to be displayed.  Enclose the complete expression in round brackets.  Put the reserved word 'not' at the beginning of the expression.  "},{"id":57,"title":"Validation Tool","url":"41869.htm","text":"[[TableXref:41869-1]] lists Validation Tool attributes.  [[Table:41869-1]]  Validation Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Class  Read-only.  Class to which the validation applies.  Validations can be defined for any dynamic class.  Object Type drop-down list  Specifies the type of object that the validation applies to.  The drop-down list contains a list of objects referenced by the Type fact of that class.  Message Type  Type of message to be displayed when the validation is broken.  The following message types are available:  Error  Warning  Information.  Message field  Message displayed to the user when the data entered does not match the validation data.  A maximum of 3996 characters is allowed.  Fact List  List of available facts from the specified class is displayed.  If an item from the Object Type drop-down list is:  Selected, only facts of that object type are displayed.  Not selected, only global facts are displayed.  If the object type is changed in the Object Type drop-down list, the facts in the Fact List are updated when the user tabs out of the drop-down list. Invalid entries in the Validation File and Search Criteria fields must be removed manually.  Only text facts are used in data validations.  Validation File field  If the data originates in an external file, it is the name and path of the file that contains the data to be loaded.  Search Criteria field  Data definition area where the facts used in the validation are defined.  Facts to be included in the data definition are dragged from the available facts in the Fact List to the Search Criteria group.  Facts are removed from the data definition by dragging the fact (clicking on the name, not the field) from the Search Criteria group to the Fact List.  When the fact is removed, all data entered for the fact is lost.  The data definition grid below the Search Criteria group is where the valid fact values are manually entered.  The Search button can be used to refine the data definition rows in the data definition area.    "},{"id":58,"title":"Trigger Tool","url":"41870.htm","text":"[[TableXref:41870-1]] lists Trigger Tool attributes.  [[Table:41870-1]]  Trigger Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  Trigger name may include spaces; however, spaces are not recommended.  Trigger names use a naming convention.  Triggers used to pop scripts have scrpt at the beginning, and triggers used in conjunction with actions start with action.  Other triggers have names that indicate their function.   Trigger Type drop-down list  Specifies the activity that causes the trigger to execute.  Predefined trigger types are:  After Fact Update  After Group Update  After Object Create  Before Object Obsolete  Before Object Update  Logoff  Logon  Object Post Commit  Object Pre Commit  Object Pre Validation  On Client Request  Timeout.  Trigger Time and Period columns  Apply only to Timeout triggers.   Trigger Time specifies the date-time the trigger first executes.   Period defines the period between executions of a Timeout trigger.  The value is entered in weeks (w), days (d), hours (h), minutes (m), and seconds (s).  A period of zero (for example, 0d), is used to define a trigger that fires only once at a specified date-time.  The Escalation trigger is an example of a timeout trigger; it causes actions to escalate on a regular time period.  User drop-down list  Applies only to Timeout triggers and specifies which user ID is used for trigger operations; for example, the user for actions created by the trigger.  Object Class drop-down list  Specifies the class to which the trigger type applies.  If the trigger is an After Fact Update or After Group Update trigger, only facts from the class specified in this field can be included in the group facts.  If the trigger is not an After Fact Update or After Group Update trigger, the names of the facts included in the Trigger expression are assumed to be of the class specified in this field, unless otherwise explicitly specified.   For On Client Request and Timeout triggers, this attribute is not specified.  Object Type drop-down list  Specifies the type of objects to which the trigger type applies.   For On Client Request and Timeout triggers, this attribute is not specified.  The available object types depend on the object class.  Eval Timing drop-down list  Specifies if the trigger is to be run synchronously or asynchronously.  Care must be taken when running triggers asynchronously.  Asynchronous execution of long-running operations is a good solution; however, configurers must ensure it does not cause timing problems.  For example, a transaction should not be committed while an asynchronous trigger is running.  If a long-running operation must execute at commit time, use a post-commit trigger.  Expression field  Boolean expression evaluated when the trigger event occurs and it evaluates to True, the trigger is invoked.  If the trigger must fire in any condition, leave it blank.  For On Client Request and Timeout triggers, this attribute is not specified.  Group Facts field  Applies only to After Fact Update and After Group Update triggers and specifies the facts to be included in the fact group.   This field lists the fact(s) forming the fact or fact group for the trigger.  This field must include exactly one fact for After Fact Update triggers, or one or more facts for After Group Update triggers.  Only facts from the Object Class field can be included.   The drop-down list includes facts with:  A global object type (that is, no object type).  An object type matching the trigger's object type.  If the object type is changed in the Object Type drop-down list, incompatible facts in this field must be manually removed.  EPM Script field  Specifies the operations to be performed by the trigger.  Any valid EPM expression can be entered.   For a definition of EPM syntax, grammar, and standard functions, refer to the Configuration Fundamentals Guide for Singleview Convergent Billing.   Find button  Opens the Find window to search for text in the EPM script.  The Ctrl+F shortcut key can also be used.  "},{"id":59,"title":"EPM Function Tool","url":"58783.htm","text":"The following table lists Detail section attributes.  Detail Section Attributes  Attributes  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  Function name must be unique across all Process Engine and Convergent Billing EPM functions.   The Result Type is set based on the name suffix and the name suffix defaults to # (that is, double).  Security Group drop-down list  Security group for the function.  Built-in functions have a security group of DEVELOPMENT and cannot be updated by configurers.  The security group is also used by the Convergent Billing archiver.   The security group does not stop users from calling the function.   If not specified, defaults to the configuration security group set in the user's profile.  Result Type drop-down list  Type of data returned by the function.   Result Type Mapping lists the mapping of Process Engine result types to Convergent Billing result types.   It defaults based on the function name suffix.  If the result type is changed, the function name suffix is updated automatically.   Remote Call Type drop-down list  Specifies how remote functions are executed, either synchronously or asynchronously.  If a remote call type is not selected, the function is local. Values for Remote Call Type are:  Built-In  Specified for built-in functions; cannot be selected by configurers.  Synchronous  Asynchronous.  For more information about remote functions, refer to the Configuration Guide for Singleview Process Engine.   Application Environment drop-down list  Read-only.  Specifies the environment in which the function is used.  All Process Engine EPM functions have an application environment of PE (see the Configuration Guide for Singleview Process Engine).  Convergent Billing functions with an application environment of Any are displayed in the CB tab.  Remote Service field  Specifies the Tuxedo service used for the function call.  For Process Engine functions, cmFnEvaluate is the default remote service for synchronous functions, and ABPcmFnEvaluate is the default remote service for asynchronous functions.  A custom Tuxedo service name can be used; no validation is performed on the existence of the service.  Deterministic check box  Specifies if the function is deterministic (that is, whether it always returns the same value with the same set of parameters).   Deterministic functions are evaluated once for a set of parameters.  The result is reused as required instead of re-evaluating the function each time (possibly improving performance).  Separate Transaction check box  Specifies if the function should be executed in a separate transaction.   If not selected, the function is executed in the current transaction.   If selected, the function outcome has no effect on the current transaction.  If selected and the function is running as a separate transaction, no new transaction is started, but the function is run in the context of the current separate transaction.  For local functions, it is read-only and not selected; that is, when there is no remote call type specified.   For synchronous functions, it should generally not be selected.   For asynchronous functions, it is read-only and selected.  The function is always run in a separate transaction.  This check box must be selected for Process Engine functions called from Convergent Billing.  Effective Start Date field  Specifies the start date of the function.  The start date cannot be a date in the future.  Defaults to 01/01/1900.   Effective End Date field  Read-only.  Displays the end date of the function.  The end date is 30/12/9999.   Function Definition field  Text field in which the function is defined using standard EPM syntax.  The editor options for the field can be customised.  "},{"id":60,"title":"Result Type Mapping","url":"58783.htm#o10611","text":"[[TableXref:10611-1]] lists the mapping of Process Engine result types to Convergent Billing result types.   [[Table:10611-1]]  Result Type Mapping  Process Engine Type  Convergent Billing Type  Long  Integer  LongArray  Integer Array  LongHash  Integer Hash  Double  Real  DoubleArray  Real Array  DoubleHash  Real Hash  String  String  StringArray  String Array  StringHash  String Hash  Date  DateTime  DateTimeArray  DateTime Array  DateTimeHash  DateTime Hash  Blob  Blob  BlobArray  Blob Array  BlobHash  Blob Hash  Unknown  Unknown  UnknownArray  Unknown Array  UnknownHash  Unknown Hash  "},{"id":61,"title":"Message Tool","url":"41871.htm","text":"[[TableXref:41871-1]] lists the Message Tool search attributes.  [[Table:41871-1]]  Search Attributes  Attribute  Description  Message ID field  Specifies the message ID for which to search.  This attribute is case-insensitive and wildcard searching using the % character is supported.  Group drop-down list  Specifies the message group in which to search.  Message Text field  Specifies the message text to search for.  Wildcard searching is implicitly performed; that is, it is not necessary to use the % character at the beginning or end of the search text.  The % character can be used within the search text.  Clear Search button  Clears the search attributes and displays all messages.  Apply Search button  Runs the search.  The attributes displayed in the Detail section depend on whether a message group or message is selected in the Object List Box.  [[TableXref:41871-2]] lists the Message Tool attributes for message groups.  [[Table:41871-2]]  Message Group Attributes  Attribute  Description  Message Group Name field  Name for the group.  A default value is provided (for example, Group_5006) and should be updated to reflect the purpose of the group.  Description field  Description for the group.  ID Prefix field  Specifies the message group prefix applied to messages in the group.  If a prefix is not specified, it defaults (when the group is committed) to the first two characters of the group name followed by a hyphen.  For example, the prefix for the Default group is 'De-'.  [[TableXref:41871-3]] lists the Message Tool attributes for messages.  [[Table:41871-3]]  Message Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Message ID field  Generated when the message is committed.  The ID prefix for the message group prefixes the ID number.  For example, a Message ID in the Default group is De-45007.  It can be specified but must be unique.  It is displayed in the Information, Warning, or Error window in the Process Engine client, Message Help window, Commit Process Messages window in the Configuration Workbench, and log.out.  It is also used to search for messages.  Group drop-down list  Group to which the message belongs.  Defaults to the group in which the message was created but can be changed by selecting another group from the drop-down list.  If the group is changed, the message is moved to that group when it is committed.  The Group is also used to search for messages.  Name field  Identifies the message in the Object List Box and is not displayed in the Process Engine client.  Message Text field  Text displayed in the Information, Warning, or Error window in the Process Engine client, the Message Help window, and the Commit Process Messages window in the Configuration Workbench.  The message text is also used to search for messages.  Cause field  Text specifying the cause or possible cause for the error.  The cause is displayed in the Message Help window.  Action field  Text specifying the action required to fix the error.  The action is displayed in the Message Help window.  Core Parameters field  Read-only.  Displays parameters used in core messages.  It does not display parameters defined in the Business Rule Tool.  Compiled in Client DLL? check box  Read-only.  Selected for messages compiled in the client DLL.  Messages compiled in the client DLL can be displayed when the Process Engine client is not connected to the server (for example, messages displayed for login errors).  Translatable check box  Selected and read-only for all user-defined (that is, non-core) messages.  For core messages, it is selected for messages displayed in the Process Engine client.  To reduce translation costs, it is not selected for messages displayed only in the Configuration Workbench.  New Group button  Creates a message group.  New Message button  Creates a message.  Alternatively, click the New button on the Configuration Workbench toolbar, or right-click and select the New option.  "},{"id":62,"title":"Interface Design Tool","url":"11425.htm","text":"The Interface Design Tool is used to define:  Screens displayed in the Process Engine client  Global configuration settings.  "},{"id":63,"title":"Configuration Tab Attributes","url":"58949.htm","text":"The Configuration tab is used to specify the values of Process Engine configuration items.  The tab is displayed in the Views section in the Interface Design Tool of the Configuration Workbench.  The following table lists attributes of the configuration items listed on the Configuration tab.  Process Engine Configuration Item Attributes on the Configuration Tab  Attribute Name  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table (see the Configuration Workbench Tools Guide for Singleview Process Engine).  Value  Value of the item.  Need Server Restart  Specifies whether a server restart is required after changing the configuration item.  Need Cache Update  Specifies whether a client cache refresh is required after changing the configuration item.  Description  Description of the item.  The following table provides information about Process Engine configuration items defined on the Configuration tab.  Process Engine Configuration Items on the Configuration Tab  ItemName  Data<br>Type  Description  Default Value  Min. Value  Max. Value  Formula  601<br>Compatibility  Integer  Version 6.0.1 compatibility setting.  0  0  2  The table below lists valid values.  AssocTreeBin<br>RefNodeIcon  Integer  Icon displayed for reference subset nodes in associated tree views in Process Engine web client.  If changed, requires a Process Engine web client cache update to take effect.  Struct-<br>ure List  Auto_Derive_<br>Expire  Boolean  Whether facts that expire are automatically derived after data update.  Provided for backward compatibility.  0 (FALSE)  0 (FALSE)  AutoMapFunc<br>RoleName  Char  Function role to map to when creating remote EPM functions.  Null  ClassKeys  Integer  Minimum keys that can be assigned for a new class.   200  200  3000  CSVExport<br>Timeout  Integer  Maximum number of seconds the CSVExport operation waits for asynchronous derived facts to return before exporting.  20  1  600  Default_Saved_<br>Rows  Integer  Maximum number of rows a saved search can retrieve.  600  1  <= HardRowLimit  DynamicCache<br>Size  Integer  Size of the Dynamic Object Cache in MB.  8  8  65536  Enable_User_<br>Supplied_<br>Trace_Info  Boolean  This operation is deprecated for Process Engine web client. It is maintained for backward compatibility with Process Engine Windows client.  0 (FALSE)  FactKeys  Integer  Minimum keys that can be assigned for a new fact.  2000  2000  40000  FactStaticKeys  Integer  Minimum keys that can be assigned for a new static, local, fact-based class that is not a message.  0  0  1000000000  Frame  Char  Name of the toolbar used as the Main Frame toolbar.  Frame  GlobalStartup<br>TransTimeout  Integer  Configurable global Tuxedo transaction timeout used during server startup.  900  300  36000  GlobalTrans<br>Timeout  Integer  Configurable global Tuxedo transaction timeout; number of seconds allowed before a transaction times out.  900  300  36000  GNA_Cache_<br>Expiry_Period  Integer  Number of seconds after a GNA cache refresh that the cache contents remain valid.  0 specifies the cache contents are always considered valid.  0  0  GNA_Cache_<br>Refresh_Period  Integer  Number of seconds between GNA cache refreshes.  0 disables cache refresh.  60  0  GNA_Cache_Size  Integer  Size of the Get Next Action (GNA) cache, expressed as a number of actions.  If necessary, GNA_Cache_Size is dynamically reduced so it takes up no more than half the size of the dynamic shared memory segment (ShmDynSize).  40000  1000  1000000  Number of Concurrent users * 100  GNA_Candidate_<br>Size  Integer  Maximum number of candidate actions to extract from the GNA cache.  Increase GNA_Candidate_Size to reduce the chance of all candidate actions being locked by other users.  1  Number of Concurrent users / 10  HardRowLimit  Integer  Maximum number of rows that can be returned in a search.  When the Use Unlimited Server Resources check box is selected for a search, both the HardRowLimit and SoftRowLimit configuration items still apply.  600  50  2000  Based on configuration  IndexCacheSize  Integer  Size of the index key cache in MB.  8  8  4096  KeyAdjustCompatibility  Boolean  Wether customised configuration provides already adjusted keys for key adjusted classes before calls are made to ObjectUpdate&() and ObjectInsert@() EPM functions.  0 (FALSE)  0 (FALSE)  1 (TRUE)  KeylessCache<br>Size  Integer  Size of the keyless class object cache in MB.  8  8  4096  LastRebuild<br>Stamp  Time<br>Stamp  Date-time of the last database rebuild.  Cannot be set by configurers.  10000000.0  LMSIntegrated  Boolean  Whether Process Engine is integrated with a configuration management tool.  0 (FALSE)  0 (FALSE)  1 (TRUE)  LockUnbreakable<br>Period  Integer  Maximum number of minutes a user can lock an object before another user can break the lock.  30  1  1440  Average case time in minutes * 5  LongRunningOp<br>Warning  Integer  Maximum number of seconds after which the Long Running Operation Warning should be raised.   Any RPC exceeding this time is logged.   30  5  7200  Max_Complex_<br>Rows  Integer  Maximum number of rows a custom search can retrieve.  600  1  <= HardRowLimit  Max_In_Place_<br>Rows  Integer  Maximum number of rows an advanced search can retrieve.  600  1  <= HardRowLimit  Max_Operation_<br>Objects  Integer  Maximum number of objects that can be created or updated in a single EPM trigger or function before an error is returned.  200  100  10000  Based on configuration  MessageKeys  Integer  Minimum keys that can be assigned for a new message.  45000  45000  1000000000  NonFactStatic<br>Keys  Integer  Minimum keys that can be assigned for a new non-fact-based class.  0  0  100000  Objkey_Offset  Integer  Value added to object keys in shared static and shared admin static classes with the Key Adjusted check box selected.  This ensures object key values (including Convergent Billing reference codes values, which can be zero or negative) are positive when passed to the Process Engine server.  10  1  999999  It is strongly recommended that the value of ObjKey_Offset be set during configuration and not changed.  However, if ObjKey_Offset is changed, the Process Engine server must be restarted immediately; otherwise, the server has inconsistent object keys.  After restarting the Process Engine and Tomcat servers, the caches are reloaded with the new values when a user logs into Process Engine web client. For information about restarting the Process Engine server, refer to the sv_stop and sv_start server utilities in the System Reference Guide for Singleview.  OnlineDebug<br>Level  Char  Level of EPM debug trace collected by the Process Engine server.  Light Trace  Prevent<br>Additional<br>Session  Integer  Whether a user is prevented from logging in or prompted to disconnect if an instance of the Configuration Workbench, Administration Tool, or Process Engine web client is open.  Only applies if multiple logins is not set in the user's profile.  0  0  1  0 = User prompted to disconnect from session.  1 = User prevented from logging in to an additional session.  PrivateCache<br>Size  Integer  Size of the private object cache in MB.  8  8  4096  ShmDynSize  Integer  Size of the dynamic shared memory segment, in MB.  1  1  1024  Large enough to start Process Engine  ShmLockSize  Integer  Size of the lock shared memory segment, in MB.  1MB allows for approximately 2000 locks.   Systems with many concurrent users might need to increase the value.  3  3  64  Number of Concurrent users / 20  ShmStatSize  Integer  Size of the static shared memory segment, in MB.  12  12  1024  Large enough to start Process Engine. Depends on the amount of configuration  SoftRowLimit  Integer  Number of rows returned in a search after which a warning is displayed and the user must confirm that the search results should be displayed.  It value must be less than or equal to HardRowLimit.  50  50  2000  <= HardRowLimit  StaticCache<br>Size  Integer  Size of the static object cache in MB.  8  8  4096  StructValIcon  Integer  Deprecated, retained for backward compatibility.  Struct<br>-ure List  ThesGoodwords<br>Only  Boolean  Whether the keyword list contains only specified words (called good words).  0 (FALSE)  0 (FALSE)  1 (TRUE)  ThesInword<br>Remove  Char  Characters inside a word removed when generating a keyword list.  Do not use spaces or commas to separate characters in the list.  ~!@#$%^&*()[]{}\\+/  ThesInword<br>Split  Char  Characters in a word that cause a word to be split into two words when generating a keyword list.  Do not use spaces or commas to separate characters.  -  ThesKeyword<br>Numerics  Boolean  Whether numbers are treated as words in the generation of a keyword list.  0 (FALSE)  0 (FALSE)  1 (TRUE)  ThesMinWord<br>Length  Integer  Minimum length for words included in a keyword list.  3  3  3  ThesOutword<br>Remove  Char  Characters at the beginning and end of a word removed when generating a keyword list.  Do not use spaces or commas to separate characters in the list.  ~!@#$%^&*()[]{}\\+/  The following table lists valid values of the 601Compatibility configuration item and the action taken when stored facts are retrieved.  601Compatibility Valid Values  Value  Action  0  No default or derivation of stored facts is performed.  1  Only facts belonging to shared classes, regardless of whether they are local or remote, are defaulted or derived.  2  All stored facts in all classes are derived or defaulted.   "},{"id":64,"title":"Toolbar Tab Columns","url":"12109.htm","text":"The following table lists attributes displayed in the Detail Section Toolbar tab, Toolbar tab, (Web) Search Results Toolbar tab, Menu Operation Configuration window, and Tab section when a tab panel or layout is selected.  Toolbar Tab Columns  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name  Unique name for the operation.  Display Name  For an operation on the tab, the name is not displayed in Process Engine web client.  For a menu, it is the name of the menu option.  If using a language other than English, enter the foreign language translation in this field.  Operation Type  Specifies the type of operation to be performed.  For more information about Operation types, refer to the Configuration Guide for Singleview Process Engine.  The operation type specified in this drop-down list determines whether entries are required in all other fields.  Some operation types are only valid for the Custom search drop-down list; this is indicated in the description of the operation.  Object Class   Class of the object to be created.  If an object is being created in an association class, and in another class (as in some NewAssocCreate operations), the association class name is selected in the ObjectType field.  If the operation type is DeleteObj or SetFactVal, the options in the ObjectType drop-down are restricted to the:  View's class for a Detail Section toolbar   Tab's class and associated class for a Tab Section toolbar.  If the operation type is NewObj, ComplexSearchView, InplaceSearchView, SavedSearch, or Zoom, the options in the ObjectType drop-down are restricted to the classes with a corresponding view.  If the operation type is NewCampaign, the only option in the ObjectType drop-down is the Action class.  If the operation type is NewAssocCreate, NewAssocSearch, or NewAssocLink, the options in the ObjectType drop-down are restricted to the tab's class.  If only a single object is specified for NewAssocCreate, the class of that object must be the same as the class specified for the tab.  Object Type  Type of object to be created in the class specified in the Object Class field.  If an object type is not specified, the user is prompted for the object type when the operation is invoked.  The Object Type field is enabled only for the NewObj, NewCampaign, NewAssocCreate, NewAssocSearch and NewAssocLink operation types.  Associated Class  Name of the class that is the target of the operation.  An object can also be created in this class.  The target class is the class in which the object is to be created or the class to be searched.  For example, if creating a complex association, the NewAssocCreate operation creates two new objects: one for the class specified in the New Object's Class field, and one for the Associated Class field.  For more information about creating simple and complex associations, refer to the Configuration Guide for Singleview Process Engine.  Associated Type  Type of object that is the target of the operation.  If an object is being created in the class specified in the Associated Class column, it is of this type.  Either select the appropriate type, or leave this field blank to allow the user to choose (when the operation is invoked) the type of object to be created.  If only one type is available, it is selected automatically.  Create Only One  Used only with NewAssocCreate, NewAssocSearch, and NewAssocLink and specifies that only one object of each of the types specified for that operation is to be created.  If the objects to be created exist when the NewAssocCreate, NewAssocSearch, or NewAssocLink operation is invoked, the target object is displayed.  If only one of each object is to be created by the NewAssocCreate, NewAssocSearch, or NewAssocLink operation being defined, select the check box.  The new object's class must be the same class selected for the tab.  Fact Name  Used with the SetFactVal operation and specifies the boolean fact (in the class specified in the New Object's Class column) whose value is to be set to True when the operation is invoked.  If used with Zoom, and zooming on a reference fact, specify the name of the reference fact.  Icon  Deprecated, and maintained only for backward compatibility.  Export Map  Exports data from the specified object class.  It is mandatory for exporting data containing a hierarchy tree (for example, Customer View class).  It contains all export maps created in the Import/Export Map Tool that are in XML format.  Enabled only in the (Web) Search Results Toolbar tab, if the operation type is ExportData.   Macro Name or Filename Pattern  By default, the Filename Pattern field is disabled and displayed in the Detail Section Toolbar tab, Main Frame toolbar, and the (Web) Search Results Toolbar tab.  The name of the field and what it does depends on the tab and the operation selected:  Macro Name is only enabled and displayed in the Detail Section Toolbar tab, and Main Frame toolbar, if the ExcelExport operation type is selected.  It specifies the name of an Excel macro to be invoked, and the file containing the macro.  It must contain the full path and file name, entered in the following order:   Name of the Excel file (including any path)  Name of the Excel file  !   Name of the macro   An example of a Macro Name is:  <path_and_file_name>@<file name>!<macro_name>).  Filename Pattern is only enabled and displayed in the (Web) Search Results Toolbar tab, if the ExportData operation type is selected.  It specifies a name of the export output file that is exported using the ExportData operation.  The file must have the following naming convention:  <output_file_name>.<file_extension>  If enabled, the Filename Pattern field is mandatory.  Transform  Specifies a style sheet for transforming or formatting an XML file to the required output format.  The drop-down list contains transform names defined in the Data tab of the Transform_Names class.  It is enabled only in the (Web) Search Results Toolbar tab, if the operation type is ExportData.  If enabled, the field is mandatory.  Content Type  Specifies the MIME type (Multipurpose Internet Mail Extensions) used for opening the transformed output file.  The drop-down list contains MIME types defined in the Data tab of the Content_Type class.  The field is enabled only in the (Web) Search Results Toolbar tab, if the operation type is ExportData.  The MIME type specified must match the format of the output file.   Trigger  Specifies a trigger executed after the operation execution.    Mandatory for Trigger Only operations.  A drop-down list displays all available triggers that can be assigned to an operation.  Only On Client Request triggers can be assigned to an operation.  The trigger is not executed if the operation fails.  Trigger Run Once  If a trigger is assigned to an operation, it specifies whether the trigger should run every time the operation is executed or only once per view.  If selected, the trigger runs only once per view.  If the view is closed and a new view opened, the trigger can fire again.  Context Class  Specifies a class for which the trigger is run.  A drop-down list displays all classes that can be selected for TriggerOnly operations.  TriggerOnly operations on the Detail or Tab sections that have a context class are enabled when there is a layout group containing an object of the context class selected.  In the trigger, use the ClientParamGet$() or ClientFullParamGet&() function (see the Configuration Guide for Singleview Process Engine) to determine the class.  For example, refer to the NewSalesOrder operation on the Order View toolbar, which runs the o_CreateSalesOrder trigger.  State Object  References objects containing boolean facts that determine the operation's state in Process Engine web client.  This field contains all reference facts from the classes defined for the layout groups on the tab layout and the User class.  For operations on the Main Menu, only reference facts from the User class are available.  For example, if the operation is a button on the Case Details view, all reference facts from the User and Case classes are available.   Enabled only for TriggerOnly and TriggerValue operation types.  State Fact  Determines if the operation is enabled or disabled in Process Engine web client.    When a fact is selected in the State Object field, all boolean facts from the class referenced by that fact are listed in the State Fact drop-down list.  The boolean fact displayed in Process Engine web client can be modified and committed by transactions without affecting the user's current transaction.  This feature updates the state of a button or a menu on the current user view using a background process.  When an operation is disabled by the value of the fact in the State Fact drop-down list, the Always Enabled check box is overridden.   Always Enabled  Applies only to TriggerOnly and TriggerValue operations if a trigger is selected.  When set to:  True, the toolbar button or the menu item is always enabled.  True on a tab, the trigger operation is executed on the tab, regardless of the objects displayed for the tab.  TriggerOnly operations are disabled if there is no current object in either of the following:  Context Class if one is specified  Class of the Detail or Tab section.  A trigger without a current object usually cannot function and is therefore disabled; for example, an order trigger cannot function if a product is not selected.  If the trigger does not directly look up objects on the view or tab, set Always Enabled to True because the trigger does not require a current object to run and should always be enabled.  The security group overrides the Always Enabled field.  For example, if a user does not have access to a button, menu item, or tab, it is not displayed in Process Engine web client.    TriggerOnly operations on the Global bar must have the Always Enabled check box set to True.  Run Once Only   Boolean operation that applies to triggers.  If a trigger is assigned to an operation, it specifies whether the trigger should run every time the operation is executed or only once per view.  If selected, the trigger runs only once per view.  If the view is closed and a new view opened, the trigger can fire again.  Enabled if a trigger is specified in the Trigger Name field.  List Section Objects  Boolean operation that applies to triggers.  If True, the list of parameters supplied to the trigger includes all objects in the list section (whether visible or not) for the current view.  Enabled if a trigger is specified in the Trigger Name field.  Suppress Single Result  Deprecated, and maintained only for backward compatibility.  Selection Menu  Displays values from the specified reference fact as a drop-down list for a button, or menu options for a menu item in Process Engine web client.  Enabled only for the TriggerValue operation type if a trigger is selected.  The Selection Menu field contains all reference facts from the operation's class and the User class. For operations in the Main Menu, the reference facts only from the User class are available. When a reference fact is selected, the objects belonging to the reference fact are displayed as values in Process Engine web client.  The selected value is passed to the On Client Request trigger in the operation as a parameter using the selected item's object key, class key, and the following keywords:  PARAM:MENUVALUE and PARAM:END.  For example, a Person_ID reference fact referencing the User class is selected in the Selection Menu field for an operation on the case menu.  This fact contains a filter expression to derive all logged-in users.  A trigger is associated with the operation to transfer the current case to the selected user.   In Process Engine web client, all logged-in users are displayed in the menu options.  When a user is selected, the trigger associated with the operation is executed.  In this instance, the trigger transfers the current case to the selected user.  The reference fact selected in the Selection Menu field must contain a filter expression.  If the Selection Menu contains a value, the Trigger Value Prompt field must be blank.  If a value is specified in both the places, the value in the Trigger Value Prompt field is ignored.  Trigger Value Prompt  Specifies a name for the field in the pop-up window, which is displayed to insert a value, if the Selection Menu does not pass a value to the On Client Request trigger.  Enabled only for the TriggerValue operation type, if a trigger is selected.  If the Selection Menu contains a value, the Trigger Value Prompt field must be blank.  If a value is specified in both the places, the value in the Trigger Value Prompt field is ignored.  In the Menu Operation Configuration window, this field is displayed as Trigger Value Prompt / Macro Name.  Add To Master  If set to True, specifies the created object be added to the master object list of the current view.  This attribute is used only with the NewObj and Trigger Only operations.   For example, a NewObj operation on the Case view toolbar creates a case.  If Add to Master is True, the Case view remains open and the new case is added to the List section.  If Add to Master is False, a new Case view is displayed and displays only the new case object.  Reuse View is always True if Add to Master is True.  Auto Zoom Class  Zooms to the class specified for a newly defined object.   It only applies to the following operations if the Add To Master check box is selected:  NewAssocCreate  NewAssocLink  NewAssocSearch  NewObj  Trigger Only.  For example, an operation can be defined on the Order tab of the Contact view to create an order and automatically zoom to the Sales Order view.  Auto Commit  Only available for operation type NewObj or when a trigger is used on the following operations:  DeleteObj  NewAssocCreate  NewAssocSearch  NewAssocLink  SetFactVal  TriggerOnly  TriggerValue  Zoom.  If set to True, a commit is automatically performed after the new object is created or the trigger executes successfully.  For example, when entering an order there are several points where the user must click Save before continuing.  The saving can be automated using Auto Commit.   Search to Run  Applies only to the SavedSearch operation type.  If a search is specified in the Search To Run field, the SavedSearch operation runs the search specified directly from the toolbar button or menu item.  If a search is not specified, the SavedSearch operation lists all searches available from the specified class in a drop-down menu.  Clicking on a search in the list runs the individual search.   View Reference  Only used with the SummaryView operation.  Specify the name of the summary view to zoom to.  Reuse View  Specifies if an open view of the same class is to be reused.  If the view is in edit mode, the user is prompted to commit their changes.  This attribute can be used with the following operation types:  ComplexSearchView  GetNextAction  InplaceSearchView  NewObj  SavedSearch.  If Reuse View or Add to Master is not set to True, the operation always opens a new view window, which can result in many open windows.  Reuse View is always True if Add to Master is True.  New Root  Specifies if the trigger assigned to the operation runs in a new transaction.  It applies to all operations with a trigger assigned, except the InplaceSearch operation.  When selected, if Auto Zoom Class is also selected, the zoomed view is not linked to the original view and the Save and Cancel buttons work independently on each view.  If not selected, the trigger runs as part of the existing transaction.  If selected, one of Auto Commit, Add To Master, or Auto Zoom Class must also be selected.  Security Group  Specifies which users have access to the operation.  If a user does not have access, the:  Operation is not executed when the tab is selected.  Menu item is not displayed.  Button is not displayed on the toolbar.  Hide Operation Details button  Hides details of the selected operation.  By default, the details are displayed for the first operation in the list of operations.  Show Operation Details button  Shows details of the selected operation.  It is displayed only if the details are hidden.  "},{"id":65,"title":"View Tab Columns and Attributes","url":"12110.htm","text":"The following table lists the View tab columns when Views or Summary Views is selected.  View Tab Columns When Views or Summary Views Selected  Column Name  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Views Class  Class for which the view is defined.  Title Fact  Name of the fact whose value is displayed in the title.  Security Group  Security group assigned to the view.  The following table lists the View tab attributes when a view, toolbar, or summary view is selected.  View Tab Attributes When a View, Toolbar or Summary View Selected  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Caption field  Included as part of the Context bar title and the <ClassName> Overview tab name for the view.  The Context bar title for a view also includes the view mode, active object's title fact value, and an indication if the view is part of a shared transaction.  Class field  Read-only.  Name of the class for the view.  Security Group drop-down list  Security group for the view.  The security group determines which users have access to the view.  Title Fact drop-down list  Name of the fact whose value is to be part of the title displayed in the Context bar when the view is active.  Only text facts from Class are available for selection.  Effective Date/Time Fact drop-down list  If the selected fact has a value, it is the default effective date for the view.  Date time facts from Class are available for selection.  List Section Colour drop-down list  Deprecated, and maintained only for backward compatibility.  Detail Section Colour drop-down list  Deprecated, and maintained only for backward compatibility.  Show Results As group  If the List Section option is selected, the search results are displayed as a Search Results page summary grid in Process Engine web client.  The List Section object in the object list box is displayed to configure the List Section.  If Tree Section is selected, the search results are displayed as a hierarchy tree in the Tree section.  The Tree Section object in the object list box is displayed to configure the Tree section.  Inplace Search Validation Function drop-down list  Function called to set default values and the state of search criteria fields (for example, mandatory and read-only), and perform validation when the:  View is initially displayed in the Find <ClassName> pop-up or on a tab on the Details page.  Process Engine web client user tabs out of a modified field on a tab on a Details page while in Advanced search.  Advanced search is invoked, but before the search is executed on the Process Engine server.  Help Location field  Deprecated, and maintained only for backward compatibility.  "},{"id":66,"title":"List Tab Attributes","url":"12112.htm","text":"The following table lists the attributes in the top half of the List tab.  List Tab Attributes  Attribute  Description  Width field  Width of the column.  Default width for each column is set according to the data type of the fact.   Caption field  Name of the column displayed in the Process Engine web client.  If not specified, the fact display name is displayed in the Process Engine web client. If a caption is specified for a fact, it may be updated but cannot be deleted.  Description field  Description of the fact selected for display.  It is not implemented.   "},{"id":67,"title":"Detail Tab Attributes","url":"12112.htm#o12113","text":"The following table lists Detail tab attributes.  Detail Tab Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Class field  Class of the selected Detail Section's view.  Layout Fact field  Fact that references the Detail Section layout to display for the selected list or tree item.  A Detail Section can have multiple layouts for different object types or search criteria; for example, the Order view has different layouts for the Product Inquiry and New Service Detail sections.  The drop-down list contains reference facts that are:  In the view's class  Have a Reference Class of:  Layout  Layout_New (deprecated, maintained for backwards compatibility).  Ensure the selected fact references the Layout class.  Default Layout drop-down list  Deprecated and provided for backwards compatibility.  Default XML Layout drop-down list  XML layout used when the:  Find <ClassName> pop-up or a tab on a Details page is displayed  Layout Fact is null or references an invalid layout.  Only XML layouts associated with the class specified in the Class field are displayed in the drop-down list.  This attribute cannot be specified if Default Layout is specified.  "},{"id":68,"title":"Layout Tab Attributes","url":"12112.htm#o12114","text":"The following table lists Layout tab attributes.   Layout Tab Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  Using naming conventions simplifies working with layouts.  For example, use:  The word 'search' in layouts for advanced searches.  '_D' as a suffix for layouts used in the Detail section.  '_T' as a suffix for layouts used in tabs.  Roll Up Layout Groups check box  Deprecated, and maintained only for backward compatibility.  Edit Layout button  Displays the Layout Builder where the screen layout is defined.  "},{"id":69,"title":"Assigned Layout Groups Columns","url":"12115.htm","text":"The following table lists columns in the Assigned Layout Groups grid.  Assigned Layout Groups Columns  Column  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Caption  Caption used for the layout group.  Class  Class selected for the layout group.  The facts in this class and any association classes, specified in the Association 1 and Association 2 fields in the Class and Data Tool, are available in the layout group.  For example, if the class is Case_Action, facts from the Case and Action classes are also available for display in the layout group.   Type  Type of layout group defined.  Fixed Font  Deprecated, and maintained only for backward compatibility.  Tab Fact  Fact used for the tab layout group definition.  The following table lists the Layout Builder fields corresponding to the columns in the Assigned Layout Groups grid.  Layout Builder Fields for Assigned Layout Group Columns  Assigned Layout Groups Columns  Layout Builder Fields  Name  Details tab Name field  Caption  Details tab Caption field  Class  Details tab Class field  Type  Details tab Type drop-down list  Fixed Font  Deprecated, and maintained only for backward compatibility.  Tab Fact  Details tab Fact field  Description  Details tab Description field  Categories  Extra Details tab Categories field  Last Modified  Extra Details tab Last Modified field  Last Modified User  Extra Details tab Last Modified User field  Version  Extra Details tab Version field  "},{"id":70,"title":"Tree Tab Attributes","url":"12116.htm","text":"The following table lists attributes in the Tree tab.  Tree Tab Attributes  Attribute  Description  Reference Subset drop-down list  Mandatory.  Reference subset fact in the class that defines the children for each node in the hierarchy tree.  If a reference subset fact is not selected, the search results are displayed in flat hierarchy tree; that is, all objects are displayed as root nodes.  It is recommended that reference subset facts with a derivation of 'Derived' not be used as reference subset facts on tree views because derived reference subset facts may display data that is not up to date; derived reference subset facts do not refresh the data until the fact has expired.  Node Icon drop-down list  Fact in the class that specifies the icon to use to represent the object node in the tree.  Node Text drop-down list  Mandatory.  Fact in the class that specifies the text to use to represent the name of the object node in the tree.   Sibling Expand Text Format field  Text to use for the node indicating that there are sibling nodes not displayed for the current hierarchy level.  The '%d' placeholder can be used to display the number of nodes not being displayed.  The default format is '… (%d more)'.  Allow Drag option  Deprecated, and maintained only for backward compatibility.  Allow Multiple Selection option  Deprecated, and maintained only for backward compatibility.  Allow Drop option  Deprecated, and maintained only for backward compatibility.  Auto-commit on Drop option  Deprecated, and maintained only for backward compatibility.  OnDrop Trigger drop-down list  Deprecated, and maintained only for backward compatibility.  "},{"id":71,"title":"Tabs Tab Columns When Tab Section Selected","url":"12117.htm","text":"The following table lists the Tabs tab columns when the Tab section is selected.  Tabs Tab When Tab Section Selected  Column  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Caption  Caption for the tab.  Class  Class for which the tab is defined.  BinRef  Reference subset fact defined for the tab.  "},{"id":72,"title":"Tabs Tab Attributes When Tab Panel or Layout Selected","url":"12117.htm#o12118","text":"The following table lists Tabs tab attributes when a tab panel or layout in a Tab Section is selected.  Tabs Tab Attributes When Tab Panel or Layout Selected  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Caption field  Name of the tab displayed in Process Engine web client.  Class field  Name of the association class for this tab; that is, the class used for associations between the Detail Section's class and this tab's class.  The indicated class is determined by the reference subset fact selected when either of the following occurs:  The tab panel is created.  A different reference subset fact is selected for the tab panel by clicking the ... button to the right of the Reference Subset Fact field.  Reference Subset<br>Fact field  Name of the reference subset fact for this tab; that is, the fact used to associate the Detail Section object with objects in the class of the tab.  The reference subset fact is specified when either of the following occurs:  The tab is created.  A different reference subset fact is selected for the tab by clicking the ... button on the right of the Reference Subset Fact field.  If layout groups or layouts are associated with the tab, only reference subset facts that refer to the same class as the current reference subset fact can be selected.  Default Layout drop-down list  Deprecated and provided for backwards compatibility.  Default XML Layout drop-down list  XML layout used when the:  Find <ClassName> pop-up or a tab on a Details page is displayed  Layout Fact is null or references an invalid layout.  Only XML layouts associated with the class specified in the Class field are displayed in the drop-down list.  This attribute cannot be specified if Default Layout is specified.  Layout Fact drop-down list  Fact that references the layout to display for the tab.  A tab may have multiple layouts for different object types or search criteria; for example, the Order tab on the Case view has different layouts for product inquiries and sales orders.  The drop-down list contains reference facts that are:  In the view's class  Have a Reference Class of:  Layout  Layout_New (deprecated, maintained for backwards compatibility).  Ensure the selected fact references the Layout class.  Display After drop-down list  Specifies the left to right order of the tabs.  The tab order can be changed by dragging and dropping the tab in the:  Object List Box  Tabs tab when Tab Section is selected in the Object List Box.   Tab Colour drop-down list  Background colour for the tab.  Visibility Fact drop-down list  Boolean fact determining if the tab is visible.  Tabs can be hidden from specified users based on the value of the visibility fact.  If the fact value is '1' (True), the tab is displayed.  If the fact value is '0' (False), the tab is hidden.  A security group is not specified for each tab, but the derivation expression on the visibility fact can be used to check the security group of the user, or any other condition, to determine if the tab should be visible.  Inplace Search Validation Function drop-down list  Function called to set default values and the state of search criteria fields (for example, mandatory and read-only), and perform validation when:  View is initially displayed in the Find <ClassName> pop-up or on a tab on the Details page.  Process Engine web client user tabs out of a modified field on a tab on a Details page while in Advanced search.  Advanced search is invoked, but before the search is executed on the Process Engine server.  Help Location field  Deprecated, and maintained only for backward compatibility.  Attributes in the Operation group that are the same as those in the toolbar tabs are not included in this table.  Assign Operation check box  Operation linked to the tab being defined.  If an operation is specified, it is executed when the tab is selected.  The other attributes in the Operation group are enabled and used to define the operation.  Operations can be made inactive (that is, it is not executed when the tab is selected) by clearing the check box.  To make an inactive operation active again, select the check box.  Single Operation check box  Used only with NewAssocCreate and NewAssocSearch operations, and specifies only one object of each of the types specified for that operation be created.  If the objects to be created exist when the NewAssocCreate or NewAssocSearch operations are invoked, the target object is displayed.  If the NewAssocSearch operation is defined for a tab, the Single Operation check box is selected by default (and disabled).  If only one of each object is to be created by the NewAssocCreate or NewAssocSearch operations being defined, select the check box.  "},{"id":73,"title":"Layout Builder","url":"12119.htm","text":""},{"id":74,"title":"Layout Builder Areas","url":"12119.htm#o10376","text":"The Layout Builder consists of the Layout, Group, and Fact areas.   The Layout area is the unlabelled area at the top of the window used to preview and modify layout groups when defining layouts. The Layout area previews display of advanced searches (displayed in the Find <ClassName> pop-up), and on tabs on details pages.  The Group area is at bottom left of the window. It is used to:  Create or select a layout group for the layout  Specify the general characteristics of the group.  The Group area lists layout groups that can be used on the layout being defined. The names of groups included in the selected layout are greyed-out.  The Fact area displays facts available for display in the current layout group. These can be facts displayed in:  Panels  Tabs  Grids  Hierarchy trees  Association Hierarchy trees.  "},{"id":75,"title":"Fact Area Tab Attributes","url":"10232.htm","text":"The following table lists attributes in the Details tab in the Fact area. Details tab fields change depending on the type of layout group being defined.   Details Tab Attributes  Attribute  Description  Name field  Read-only.  Name for the fact.  Caption field  Label for the fact.  Defaults to the display name for the fact (specified in the Display Name field in the Fact Tool).  The display name for the fact is used in Custom searches.  If the caption is updated, the fact display name must updated to match the caption.  Otherwise, the fact name in the Custom search does not match the caption in Process Engine web client, and the fact cannot be effectively used in Custom searches.    If using a language other than English, enter the foreign language translation in this field.  Hint Text field  Deprecated, and maintained only for backward compatibility.  Height field  Applies only to the fields of Image or Memo facts and is the height of the field, expressed as a number of characters.  Width field  Width of the field for the fact, expressed as a number of characters.  Display After Fact drop-down list  Fact to be displayed immediately before the fact being defined.  If the fact being defined is to be the first in the layout group, leave this field blank; a blank item is included in the list for this purpose.  If a fact is inserted or removed from a layout group, all other facts are automatically reordered.  Present Boolean as group  Enabled only for boolean facts.  This group specifies how a boolean fact is displayed in Process Engine web client.  Options include the following:  CheckBox (default)  If this option is selected, the boolean is displayed as a check box.  Button  If this option is selected, the boolean fact is displayed as a button. The fact's display name is used as the button name.  By default, the boolean fact's value is False.  Clicking the button in Process Engine web client sets the boolean fact's value to True and executes the trigger associated with the button.  After the trigger has executed and the operation complete, the trigger must set the boolean fact's value to False.  The boolean fact must have a default derivation that sets the fact's initial value to False.  Min Chars Before Filter field  Specifies the number of characters that must be typed into the drop-down list field before a filtered search is executed and relevant drop-down list items are displayed.  Enabled only for reference facts that reference non-cached and non-structured classes.  Defaults to:  0 when editable.  Null when not editable.  Display Date Only check box  Applies only to Date Time facts and specifies whether only the date portion is displayed in Process Engine web client.  If selected for a Date Time fact without the Date Only check box selected in the Fact Tool, the date is read-only in Process Engine web client.  If the Date Time fact is date-only (that is, the Date Only check box is selected in the Fact Tool), Display Date Only is selected and read-only.  For date-only facts (see the Configuration Guide for Singleview Process Engine), the Read Only check box specifies whether the date is read-only in Process Engine web client.  Read Only check box  Specifies whether the fact is read-only in Process Engine web client.  It is selected when the fact is read-only due to other factors, and cannot be cleared.  The other factors are:  Display Date Only is selected for a Date Time fact without the Date Only check box selected in the Fact Tool.  The fact is read-only; for example, facts with a lookup derivation.  New Row check box  Specifies if the fact begins a new row of facts in the layout group.  Trigger Only check box  Enabled only for boolean facts that are selected to be displayed as buttons.  It runs the trigger in the client when the button is clicked without starting a transaction or updating a fact; for example, when configuring a button to:  Open a new window  Open a URL in a new window.  The trigger can start transactions and update facts but clicking the button does not do this independently.  Type field  Read-only.  Type of the selected fact.  Usage field  Read-only.  Uses of the selected fact.  For a fact to be available for selection in a layout group, it must have a usage of Detail.  Length field  Read-only.  Applies only to Text facts.  It displays the length of the selected fact, expressed as a number of characters.  The displayed value can be used as a guide when defining the width of a text fact field.  The Triggers tab contains the Field Triggers group and allows previously-defined On Client Request triggers to be fired:  On entry and exit to various facts  If an Image fact is clicked.  Triggers are defined using the Trigger Tool.  The following table lists Triggers tab attributes in the Fact area.  Triggers Tab Attributes  Attribute  Description  Field Trigger group  Entry drop-down list  Trigger is fired when this fact receives focus.  Exit drop-down list  Trigger is fired when this fact loses focus and the fact is modified.  Click drop-down list  Trigger is fired when image is clicked.  Enabled only for Image facts.  The following table lists Colour tab attributes in the Fact area. When specified for a grid fact, the selected colours apply to the column for that fact.  Colour Tab Attributes  Attribute  Description  Editable Colour drop-down list  Background colour when the fact is editable. Default is white.  Disabled Colour drop-down list  Background colour when the fact is disabled.  Default is grey.  The following table lists Navigation tab attributes in the Fact area.  Navigation Tab Attributes  Attribute  Description  Navigable check box  If selected, a navigation link is displayed next to the fact in Process Engine web client.  Only specifies a navigation link for the fact in the current layout. If a fact is configured in multiple layouts and a navigation link is required wherever the fact is displayed, a navigation link must be defined in every layout that contains the fact.   Navigate to object referenced by: drop-down list  The reference fact for the object to zoom to when the navigation link is clicked.  Only reference facts that refer to classes with a base view are displayed in the drop down list.  Read-only if Navigable is not selected.  "},{"id":76,"title":"Extra Details Tab","url":"10232.htm#o12121","text":"The following table lists Extra Details tab attributes.  Extra Details Tab Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Effective Date Fact drop-down list  Can be set for Panel, Tab, Grid, External layout groups when the class of the layout group is date ranged.  It allows a user to view date ranged objects within a layout group without zooming to the appropriate view to view the details.  Any Date Time fact defined from classes used by layout groups displayed before the selected layout group can be selected.  For example, there is a grid of purchased products on the Troubleshooting Issue layout on the Issue tab of the Case view. There is a Date Time fact called Trouble_Date on the same Troubleshooting layout.  The Purchased Product grid layout group has an Effective Date Fact of Trouble_Date.  In Process Engine web client, the user can set the value of the Trouble_Date fact and view product information effective as of that date in the product grid.  The user does not have to zoom to the Contact or Customer view to view the appropriate product information for that date.  Master Group drop-down list  Applies to the following layout groups only when they are used with an association hierarchy tree:  Tab  Panel  Grid  External  Tab overlay  Group overlay.  When these layout groups are used in conjunction with an association hierarchy tree, Master Group must be set.  Master Group specifies the association hierarchy tree that is the master.  Any association hierarchy tree layout group defined on the layout can be selected.  The master group controls the display of information in the layout groups listed above when they are used with an association hierarchy tree.  The user chooses a level in the association hierarchy tree and information is displayed in these layout groups.  "},{"id":77,"title":"Visual Details Tab","url":"10232.htm#o39977","text":"The following table lists Visual Details tab attributes.  Visual Details Tab Attributes  Attribute  Description  Caption Text Colour  Colour for the caption of the layout group.  Group Background Colour  Background colour for the layout group.  Non-proportional Font check box  Deprecated, and maintained only for backward compatibility.  Rows To Span field  Specifies the number of rows for the group to span.  Height field  Specifies the height (in pixels) of the grid, external, hierarchy tree, and association hierarchy tree layout groups.  Width field  Specifies the width of association hierarchy and hierarchy tree layout groups.  This field is ignored for all other layout group types.  Left Align Group drop-down list  Deprecated, and maintained only for backward compatibility.  Right Align Group drop-down list  Deprecated, and maintained only for backward compatibility.  Toggle Alignments button  Toggles the layout groups being displayed with or without alignment and row spanning applied.  Not having the alignment and row spanning applied allows any inappropriate alignments or row spanning to be more easily identified.  This button does not update the values specified in the Visual Details tab (for example, it does not reset the Rows To Span field to 1).  If required, the row spanning and alignment values must be manually changed by updating the appropriate field.  "},{"id":78,"title":"Triggers Tab Attributes","url":"12122.htm","text":"The following table lists Triggers tab attributes.  Triggers Tab Attributes  Attribute  Description  Group Triggers group  Entry drop-down list  Trigger to be fired when this layout group receives focus.  Exit drop-down list  Trigger to be fired when this layout group loses focus and an object in the layout group is modified.  Object Triggers group  Entry drop-down list  Trigger to be fired on entry to this object.  Exit drop-down list  Trigger to be fired when this object exits and an object in the layout group is modified.  On Display Trigger drop-down list  Trigger fired when the child of a tab group is displayed.   Once Only check box  Specifies the On Display Trigger should only be fired once per view.  If the view is closed and a new view opened, the trigger can fire again.  CheckBox Trigger drop-down list  Trigger fired when a check box in a hierarchy tree or association hierarchy tree is selected or deselected.  "},{"id":79,"title":"Tree Tab Attributes","url":"12123.htm","text":"The following table lists Tree tab attributes.    Tree Tab Attributes  Attribute  Description  Multi Root check box  Applies only to association hierarchy tree layout groups.  If selected, the hierarchy displays all root nodes.  If not selected, the hierarchy displays only a single root node at a time.  Expansion Method group  Specifies how the hierarchy or association hierarchy tree is expanded when first displayed.  The following expansion options are available:  Expand All Levels, which expands the tree so all nodes are displayed, unless Max Level Nodes is reached for any level.  Expand to Level, which expands the tree down to the specified level, unless Max Level Nodes is reached for any level.  Expand Single Root Node, which expands the tree to the first level if there is only one top-level (root) node.  If there are two or more top-level nodes, no expansion is performed.  The value of the webclient.TreeSizeWarn setting in the peweb.properties file also affects how a hierarchy or association hierarchy tree is initially displayed.  Max Level Nodes field  If set to a value greater than 0 and a specific level in the tree contains more than Max Level Nodes, the level is not displayed.  The tree effectively expands one level at a time, and each level is only expanded if that level contains no more than the limit set by Max Level Nodes.  All nodes at a specific level are counted towards the limit, even if the nodes have different parent nodes.  If a level is not displayed because it has more nodes than Max Level Nodes, no further levels are expanded.  If set to 0, no limit is applied, and all levels (if the Expand All Levels option is selected) or the specified number of levels (if the Expand to Level option is selected) are displayed.  For trees with a large number of nodes, setting Max Level Nodes to 0 may cause a delay in Process Engine web client when the tree is displayed.  This option is only enabled if either the Expand All Levels or Expand to Level option is selected.  A level is not expanded if the total number of nodes expanded is greater than the webclient.TreeSizeWarn value.  Allow Drag check box  Deprecated, and maintained only for backward compatibility.  Allow Multiple<br>Selection check box  Deprecated, and maintained only for backward compatibility.  Allow Drop check box  Deprecated, and maintained only for backward compatibility.  Auto-commit on Drop check box  Deprecated, and maintained only for backward compatibility.  OnDrop Trigger drop-down list  Deprecated, and maintained only for backward compatibility.  "},{"id":80,"title":"Grid Tab Attributes","url":"42537.htm","text":"The following table lists Grid tab attributes.  Grid Tab Attributes  Attribute  Description  Allow Grid-Based <br>Insert  Specifies if rows can be:  Added to the grid by clicking the Add Row button.  Deleted from the grid by selecting the relevant row and clicking the Delete Row button.  Default Object Type  Default object type for the object created in the grid by clicking the Add Row button.  The drop-down list contains the object types for the class of the grid.  It is enabled only when the Allow Grid Insert check box is selected and the class for the grid has a Type fact.  Default Associated Object Type  Default association object type for the association object created by clicking the Add Row button.  The drop-down list contains association types for the association class linked to the grid.  It is enabled only when the Allow Grid Insert check box is selected and there is an association class with a Type fact linked to the class for the grid.  Show Columns Fact drop-down list  Displays or hides columns in the grid layout of Process Engine web client based on the value derived by the specified text fact (see the Configuration Guide for Singleview Process Engine).  It contains only synchronously-derived text facts from the grid layout's class and associated classes.  For example, if the grid layout is in the Case.Action class, text facts from Case.Action, Case, and Action classes are displayed.  "},{"id":81,"title":"Hierarchy Fact Tree Area Attributes","url":"42537.htm#o12127","text":"The following table lists Hierarchy Fact Tree area attributes.  Hierarchy Fact Tree Area Attributes  Attribute  Description  Node Icon drop-down list  Reference fact to an icon used to identify items in the displayed hierarchy.  Node Text drop-down list  Text fact whose value (normally derived) is to be displayed as text to identify each item in the displayed hierarchy.   Node Checkbox drop-down list  Displays boolean facts for the selected class.  If a value is selected, the boolean fact is displayed as a check box in the hierarchy tree for the client.  "},{"id":82,"title":"Association Hierarchy Tree Fact Area Attributes","url":"12174.htm","text":"The following table lists the Association Hierarchy Tree Fact area attributes.  Association Hierarchy Tree Fact Area Attributes  Attribute  Description  Reference Subset Fact list  List of reference subset facts for the level selected in the hierarchy.  For example, if the association hierarchy tree is being defined over purchased products, the layout group class is PurchasedProduct. The top-level lists reference subset facts from the PurchasedProduct class. If the second level is for services, the second level lists reference subset facts from the PurchasedService class.  Facts being used at that level of the hierarchy are greyed-out.  Text Fact drop-down list  Text fact whose value is displayed as the text at this level in the hierarchy.  Icon Fact drop-down list  Fact that references the icon class, whose value is displayed as the icon at this level in the hierarchy.  Checkbox Fact drop-down list  Displays boolean facts, depending on the selected node.  If a value is selected, the boolean fact is displayed as a check box in the hierarchy tree for the client.  Checkbox Hidden Fact drop-down list  Enabled when a check box fact is selected from Checkbox Fact drop-down list.   If selected, and the fact evaluates to true, the check box control is not displayed in the tree.  Node Not Selectable Fact drop-down list  Enabled when any node is selected.   If selected, and the fact evaluates to true, the node cannot be selected in the tree.  Reference Subset field  Read only.  It does not apply to the root level.  Reference subset fact used for this level of the hierarchy.  Node Caption field  Caption to display as a heading at each level of the tree.  It does not apply to the root level.  It applies only if Visible is True.   Node Icon drop-down list  Icon to display at each level of the tree.  It does not apply to the root level.  It applies only if Visible is True.  Visible  Specifies if the Node Caption and Node Icon are visible in the client.  Allow Drag  Deprecated, and maintained only for backward compatibility.  Allow Drop  Deprecated, and maintained only for backward compatibility.  Delete Node button  Deletes the selected node and any child nodes.  The nodes cannot be restored; they must be redefined.  It does not delete the root-level node. To remove the root level node, the association hierarchy tree layout group must be removed from the layout.  "},{"id":83,"title":"Menu Tool","url":"12500.htm","text":"This section describes the Menu Tool attributes.  "},{"id":84,"title":"Object List Box Buttons","url":"12500.htm#o12503","text":"The following table lists Object List Box buttons.  Object List Box Buttons  Button  Description  New Menu  Creates a new menu item as a sibling to the selected menu item.  New Submenu  Creates a new item as a child to the selected menu item.  Delete Menu  Deletes the selected menu item.  It also deletes any submenu items associated to the selected menu item.  The operation assigned to the menu option can also be made obsolete, by clicking the Yes button in the Confirm window.  Up arrow  Swaps the selected menu item with the one immediately above it in the same branch.  Down arrow  Swaps the selected menu item with the menu item immediately below it in the same branch.  "},{"id":85,"title":"Object Details Box Attributes for Top-level Menu Items","url":"12501.htm","text":"The following table lists attributes for the Object Details Box for top-level menu items.  Object Details Box for Top-level Menu Items  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Caption field  Name for the menu item.  If using a language other than English, enter the translation in this field.  Security Group drop-down list  Specifies the security group for the menu item.  Group Index field  Specifies the order of top-level menu items.  It is a numeric value and each top-level menu item has a value. For example, the Search menu item displayed in the Search List gadget has a Group Index value of 15.  To display a top-level menu item above the Search menu item, specify the value of this field for the new item as less than 15.  Visible check box  Specifies whether the menu item is visible in Process Engine web client.  The following table lists additional attributes displayed when a sub-menu item is selected.  Object Details Box Additional Attributes  Attribute  Description  Display Icon check box and drop-down list  It is deprecated, and provided only for backwards compatibility.  Operation drop-down list  Operation associated with a menu item.  Clicking the:   Edit button displays the Menu Operation Configuration window with details of the selected operation.   New button allows a new operation to be configured.  View button displays the Menu Operation Configuration window when the menu item is read-only.  All sub-menu items must be assigned an operation.  Top-level menu items do not require an operation because they are placeholders for the sub-menu items.   Operations can be configured for items in the Global bar, gadgets, Main Menu, or Tab Menu.  The drop-down list of operations in the Menu Tool includes all operations linked to the Global bar, gadgets, Main Menu, or Tab Menu.  If an operation is changed, the operation definition is changed wherever it is used.  It is recommended that operation details be checked before the operation is assigned to a menu item, or any attributes changed.  ShortCut Key field   It is deprecated, and provided only for backward compatibility.  "},{"id":86,"title":"Icon Tool","url":"41873.htm","text":"[[TableXref:41873-1]] lists Icon Tool attributes.  [[Table:41873-1]]  Icon Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Security Group  Specifies the security group to which the icon belongs.  Source Filename  Path and name of the imported bitmap file.  The field is blank for icons provided in Process Engine.  Browse  Allows a bitmap file to be imported as an icon.  Bitmap images larger than 2MB cannot be loaded.  Icon Preview  Displays a magnified view of the icon.  If the icon dimensions are not square, the image appears to be out of proportion and is not cropped if it is larger than the supported size.  Button Preview  Displays the icon as it will be displayed when used as a button.  Only the top left 20 x 20 pixels are used, with the remaining pixels cropped.  Icon Size  Read-only.  Displays the height and width (respectively) of the icon source file in pixels.  "},{"id":87,"title":"Image Tool","url":"41874.htm","text":"[[TableXref:41874-1]] lists Image Tool attributes  [[Table:41874-1]]  Image Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Security Group drop-down list  Security group to which the image belongs.  Dimensions field  Read-only.  Displays the dimensions of the image in pixels. It is automatically generated.  Size field  Read-only.  Displays the size of the picture in bytes. It is automatically generated.  Image Preview field  Displays a magnified view of the image.  Load Image File button  Displays the Open window used to select an image.  Images larger than 2MB cannot be loaded.  Zoom Image button  Displays the Viewing image: window, which displays the image at its actual size.  "},{"id":88,"title":"User Prompt Tool","url":"41875.htm","text":"[[TableXref:41875-1]] lists User Prompt Tool attributes.  [[Table:41875-1]]  User Prompt Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Entry Text field  Text displayed as guidance for the user (for example, 'Enter your Credit Verification System Password').  Maximum length is 128 characters.  Default Value field  Default value displayed when the prompt is displayed.  The user can overwrite the default value.  An example is a common password that is used to access an external system.  Policy group  The following policy options are available:  On Log on  User prompt is displayed when the user logs in to Process Engine.  On First Call  User prompt is displayed the first time the external system is called.  On Each Call  User prompt is displayed each time the external system is called.  Data Type drop-down list  Data type of the user prompt field where the user enters their response.  Valid data types are:  Integer  Double (Floating Point Decimal)  String  Date/Time  Binary  Password (each character entered by the user is displayed as an asterisk).  Width drop-down list  Width of the user prompt field where the user enters their response.  Mandatory check-box  Value that must be entered in the user prompt.  If not selected, the user does not have to enter a value in the user prompt.  Decimal Places field  Number of decimal places the user can enter.  Only applies for a data type of decimal (Double).  "},{"id":89,"title":"Import/Export Map Tool","url":"12505.htm","text":"The import and export functionality allows data to be imported into Process Engine and to export Process Engine data to a file.  "},{"id":90,"title":"Import/Export Map Tool Attributes","url":"12505.htm#o11379","text":"The following table lists top section attributes.  Top Section Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  Class being mapped for import or export.  It is set when the import/export map is created.  Format field  Mandatory.  File format for the import/export map.  Valid formats are:  CSV (Comma Separated Values)  TSV (Tab Separated Values)  SDF (System Data Format)  XML (Extensible Markup Language).  XML format is used only in Process Engine web client.  Header check box  Indicates there is a header record in the import or export file.  Import Rule group  Specifies whether objects are created or updated during an import.  It is ignored for exports.  It is disabled if XML is selected in the Format field, as this format is only used for exports.  For imports, the order of the map fields must match the order of the fields in the import file.  For exports, the order of the map fields is the order in which the fields are exported.  The following table lists map field attributes.  Map Field Attributes  Attribute  Description  Key column  Indicates that the fact will be used to identify the object.  It is not applicable if:  Import Rule is set to Create.  XML is selected in the Format field.  It is mandatory if Import Rule is set to Update.  When data is being updated during an import, Process Engine must be able to identify the Process Engine object to update.  The key is used to identify the object.  Only one fact in the import/export map can be set as the key.  If a class does not contain a key fact (for example, the Name fact in the Case class), a dummy key fact must be defined to be used only for imports and exports.  Fact column  Identifies the facts to be included as map fields in the map.  At least one fact must be selected.  Not all facts can be selected for use in an import or export.  The special NULL fact can be specified.  Header Text column  Text displayed for the map field in the first record of the export file (the header record), if Header is selected.  It defaults to the fact name.   Mandatory for each fact if the Header check box is selected.  If the fact is NULL, it is ignored on import and export.  Reference column  Specifies the name of the foreign fact to be referenced when the selected fact is of type Reference.  Default is the Name fact.  Mandatory when the fact is a reference fact.  Skip or Width column  Label and effect of this column depends on the Format and Fact attributes, based on the following:  If Format is set to SDF, the label is Width and defines the width of the map field in characters, and is mandatory.  For NULL facts, Width specifies the number of characters to ignore during import, or to pad with spaces during export.  If Format is set to CSV or TSV, the label is Skip and defines number of comma or tab delimited fields to be ignored on import and specifies the number of empty (blank) comma or tab delimited fields to be written out on export.  Skip is only used for NULL facts, and is mandatory.  If Format is set to XML, the label is Width, Width is set to 0, and is disabled.  "},{"id":91,"title":"Workflow Tool","url":"12506.htm","text":"The following table lists Workflow Tool attributes when the Action Type tab is selected.  Workflow Tool Attributes for Action Types  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Security Group drop-down list  Security group for the action type.  The security group determines which users have access to the action type.  Icon drop-down list  Specifies an icon to identify actions of this type.  Classification drop-down list  Specifies a classification for the action type.  It is ignored by Process Engine web client.  Duration field  Specifies the time actions of this type are expected to take.  Mandatory only if the action has a trigger assigned.  If this field is not specified, the user must enter either a duration or a due date when the action is created in Process Engine web client.  If a calendar is specified in the Calendar drop-down list, duration must be specified as a number of hours. If no calendar is specified, duration is specified using the following conventions:  w for weeks  d for days  h for hours  m for minutes.  Combinations can be used; for example, 6h30m is six and a half hours. This field cannot be negative.  A duration of zero means the action is completed when it is created.  Calendar drop-down list  Specifies the calendar used to calculate when actions of this type are due for completion.  Process Engine is defined with a default of 24 *7, which means a duration of 1d = 24 hours.   If no calendar is assigned to an action, the default (that is, 24*7) is used.  For example, an action in Process Engine web client displays:  Duration = 1d  Start Date = 1/5/00 11:45  Finish Date = 2/5/00 11:45.  If a calendar is specified with a work day as 9:00 am to 5:00 pm (an eight-hour work day), an action in Process Engine web client displays:  Duration = 1d  Start Date = 1/5/00 11:45  Finish Date = 4/5/00 11:45.  Calendars are assigned only to actions, not users. Working hours for individual users cannot be defined.  Escalation Policy drop-down list  Specifies an escalation policy to be used with this action type.  Action View Layout drop-down list  Specifies the layout used on the Detail section of the Action view.  If not specified, the primary layout is used.  Different layouts are not usually specified for individual action types.  Case-Action Tab<br>Layout drop-down list  Specifies the layout used on the Action tab on the Case view.  If not specified, the primary layout is used.  Different layouts are not usually specified for individual action types.  Contact-Action Tab Layout drop-down list  Specifies the layout used on the Action tab on the Contact view.  If not specified, the primary layout is used.  Different layouts are not usually specified for individual action types.  Notification on Assign drop-down list  Specifies the notification sent to the assigned user or primary contact when the action is assigned or reassigned.  Whether the notification is sent to the assigned user or primary contact is specified in the Notification Tool.  If an assigned user is not specified but an assigned work group is, the notification is sent to the work group manager.  A notification is not sent if the:  Assigned user is the same user as the user assigning or reassigning the action.  Work group does not have a manager defined.  Notification on Unblock drop-down list  Specifies the notification sent to the assigned user or primary contact when the action is unblocked.  Whether the notification is sent to the assigned user or primary contact is specified in the Notification Tool.  If an action has a precedent that is not complete, the action is blocked. When the action is no longer blocked (that is, its precedent is complete), the specified notification is sent to either the assigned user or primary contact.  If an assigned user is not specified but an assigned work group is, the notification is sent to the work group manager.  A notification is not sent if the:  Assigned user is the same user as for the precedent action.  Work group does not have a manager defined.  Notification on Completion drop-down list  Specifies that the selected notification be sent to the assigned-by user or primary contact when the action is completed.  Whether the notification is sent to the assigned by user or primary contact is specified in the Notification Tool.  The notification is not sent if the user generating the notification is also the recipient of the notification.  Buttons (3)  Click the arrow on the right of the Notification On Assign, Notification On Unblock, and Notification On Completion fields to view the selected notification, or select <new> to create a notification, in the Notification Tool.  The notification specifies whether a notification is to be sent to a user or contact.  Default User drop-down list  Specifies the user expected to perform actions of this type.  When the action is created in Process Engine web client, it is assigned to this attribute (if populated); however, the user creating the action can override it.  If Duration is zero, it is read-only.  Default Work Group drop-down list  Specifies the work group to which actions of this type are assigned.  When the action is created in Process Engine web client, it is assigned to the Default Work Group (if populated); however, the user creating the action can override it.   If the Duration field is zero, this it is read-only.  Default User and this attribute are optional; however, only one of Default User and Default Work Group can be specified. If neither is specified, when the action is created, the Assigned To user defaults to the Assigned By user, which is the user creating the action. The Assigned Work Group defaults to the default work group of the user creating the action.  Merge Definition drop-down list  It is deprecated, and provided only for backward compatibility.  Document Template drop-down list  Specifies the Convergent Billing document template associated with this action type.  Document templates are maintained in Convergent Billing using the Maintenance @ Printing @ Templates menu option.  Campaign Only check box  Specifies if this action type is a campaign action type.  When selected, the action can be used in a campaign and is the controlling action for the campaign.  If selected, the following rules apply:  Retrievable check box is selected and read-only.  Action Group Only check box is selected and read-only.  Action type cannot be used in an action group.  Default Work Group must be specified to ensure Default User defaults to NULL and is read-only.  It cannot be selected if a trigger is assigned.  The Campaign attributes group is displayed when this check box is selected.  Action Group Only check box  If the Campaign Only check box is selected, this check box is selected and read-only, because campaign actions are not created by the user, other than the campaign activation.  If selected, the Classification field is read-only and cleared.  It is ignored by Process Engine web client.  Retrievable check box  Specifies whether this action type represents actions that are retrievable.   Retrievable actions are actions over which an organisation has control at all times (for example, the Follow Up Call action type).  If selected, the action type is included in the Get Next Action functionality.  A non-retrievable action is one over which an organisation does not have control at all times; for example, an action that involves waiting for a response from a third party. Non-retrievable actions are not included in the Get Next Action functionality. Unassigned non-retrievable actions must be manually assigned.  If the Campaign Only check box is selected, this check box is selected and read-only.  Triggers field and arrow button  Lists triggers for the action type.  It is displayed only if the Campaign Only check box is not selected.  To define a trigger, select <New> and click the arrow to zoom to the Trigger Tool. The EPM for the new trigger defaults to the appropriate EPM code to create the selected action type.  Campaign attributes group  Displayed only when the Campaign Only check box is selected.  The group has the following drop-down lists:  Action Type  Specifies the action type for the action to be created in Process Engine web client, and associated with each case and contact when the campaign is run.  This attribute may be an independent action type, or an action group.  If it is an independent action type, the following rules apply:  The Retrievable check box must be selected; that is, the action type is retrievable using the Get Next Action function.  The Duration field must have a non-zero value.  Case Type  Type of case to be created when the campaign is run.  Case-Action Type  Type of association between the case and the action created during the campaign.  Case-Contact Type  Type of association between the case and the contact created during the campaign.  Contact-Action Type  Type of association between the contact and action created during the campaign.  The following table lists Workflow Tool attributes when an action group is selected.  Workflow Tool Attributes for Action Groups  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Security Group drop-down list  Security group for the action group.  The security group determines which users have access to the action group.  Icon drop-down list  Specifies an icon identifying action groups of this type.  Classification drop-down list  Specifies a classification for the action group.  If the Action Group Only check box is selected, it is read-only and cleared.  It is ignored by Process Engine web client.  Triggers field and Arrow button  Lists triggers for the action type.  To define a trigger, select <New> and click the arrow to zoom to the Trigger Tool.  The EPM for the new trigger defaults to the appropriate EPM code to create the selected action type.   Action Group Only check box  If selected, the Classification field is read-only and cleared.  It is ignored by Process Engine web client.  The following table lists Workflow Tool attributes for action group children columns.  Action Group Children Columns  Column  Description  Action Type  Specifies an action type to be included in the group.  It can be an independent action type or another action group.  At least one action type must be selected.  An action type can be associated with multiple action groups.  Actions with the Campaign Only check box selected cannot be added to an action group.   All actions within an action group should have the same security group.    When a user completes an action in an action group, Process Engine updates the start and due dates of the other actions in the group.  For this reason, a user must have access to all actions, not only those assigned to them.  Precedent  Specifies dependencies for the selected action type.  An action cannot start until its precedent is completed.  An action type cannot have itself or its action group as a precedent.  Process Engine does not allow loops to be created when defining precedents within the group.  The rows in the grid are displayed in the order of the precedents.  If no precedents exist, the rows are displayed in the order in which they were entered.  Def Duration  Read-only.  It displays the default duration specified for the action type.  Duration  Overrides the default duration for the action type when the action type is part of a action group.  The duration of the independent action type is not affected.  If the action type is another action group, it cannot be specified.  If a calendar is specified in the Calendar attribute, the duration must be specified as a number of hours.  If no calendar is specified, the duration is specified using the following conventions:  w for weeks  d for days  h for hours  m for minutes.  Combinations can be used; for example, 6h30m is six and a half hours.  Duration cannot be negative.  A duration of zero means the action is completed when it is created.  Def Assigned User  Read-only.  It displays the default user assigned to the action type.   Assigned User  Overrides the default user for the action type when the action type is part of the action group.  The Assigned User for the independent action type is not affected.  If the action type is another action group, it cannot be specified.  Def Assigned Group  Read-only.  It displays the default work group assigned to the action type.   Assigned Group  Overrides the default work group for the action type when the action type is part of the action group.  The default work group of the independent action type is not affected.  If the action type is another action group, it cannot be specified.  Def Calendar  Read-only.  It displays the default calendar assigned to the action type.  Calendar  Overrides the default calendar for the action type when the action type is part of the action group.  The default calendar of the independent action type is not affected.  If the action type is another action group, it cannot be specified.  "},{"id":92,"title":"Escalation Tool","url":"41876.htm","text":"[[TableXref:41876-1]] lists the Escalation Tool attributes.   [[Table:41876-1]]  Escalation Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Escalation Policy Members grid  Escalation rules for the escalation policy.  At least one escalation rule must exist for each escalation policy.  The timing and period values indicate when the rule should be applied.  The remainder of the attributes specify what occurs when the rule is applied.  Timing column  Specifies when the escalation rule occurs. Mandatory for each rule.  Timing options are:  Before Due, for the escalation to take place before an action's due date.  After Due, for the escalation to take place after an action's due date.  Repeat, for an escalation rule to take place repeatedly until an action is completed (a finish date is entered on the action). The following apply to 'Repeat' timing:  Repeat is calculated from when the last escalation occurs and does not start until all other escalation rules are complete.  Repeat must be the last rule defined (that is, it must be the last row) and must be preceded by at least one Before Due or After Due rule.   Only one Repeat rule can be defined per policy.  For Repeat rules, the time interval cannot be less than three minutes.  Period column  Specifies when the escalation rule is applied.  Mandatory for each escalation rule.  It is a positive value using the following format:  m for minutes  h for hours  d for days  w for weeks  s for seconds.  The timing and period values work together and are dependent on the due date for the action. For example, if an action's due date is January 15, 2005 14:20 and the escalation policy contains the following rules:  Rule 1: Timing = After Due, Period = 1m  Applied to the action on Jan 15, 2005 14:21.  Rule 2: Timing = Repeat, Period = 1h  Applied to the action every hour (Jan. 15, 2000 15:21, Jan. 15, 2000 16:21, and so on) until the action is completed.  Priority column  Specifies a value for the Priority fact on the action.  If the Priority fact on the action has a value, it is overwritten with the specified value when the escalation rule is applied.  The priority determines the order of importance for the action.  For example, the user may have many open or overdue actions to complete and the priority displayed for the action allows the user to determine which actions to complete first.  The Get Next Action operation also checks the action's priority when searching for open/overdue actions to assign.  The action with the higher priority value is retrieved first when the Get Next Action operation is selected.  Reassignment column  Specifies the assigned work group when the rule is applied.  If the action is not assigned to a user, the assigned work group is changed.  If the action is assigned to a user, the assigned user is cleared and the assigned work group is changed.  Reassignment cannot be specified if Assigned To Notification or Manager Notification are specified.  Assigned To Notification column  Specifies that a notification be sent to the assigned user when the rule is applied.  If there is no assigned user but there is an assigned work group, the notification is sent to the work group manager. If the assigned work group does not have a manager defined, the notification is not sent.  This operates the same as the Notification On Assign field on the action type.  Assigned By Notification column  Specifies that a notification be sent to the assigned by user when the rule is applied.  The notification is not sent if the assigned user is also the recipient of the notification. If a user does not actively trigger the escalation (for example, a timeout), the user receives a notification.  Manager Notification column  Specifies that a notification be sent to the assigned user's manager when the rule is applied.  If the action does not have an assigned user, the notification is not sent. If the assigned user does not have a manager defined, the notification is not sent. Only notifications being sent to a user can be selected.  Escalation policies can negatively impact performance because every time an escalation is evaluated, Process Engine must search for all actions ready to be escalated.  If there are numerous actions to escalate, all those actions have to be processed before the search can run again.  "},{"id":93,"title":"Merge Definition Tool","url":"41877.htm","text":"[[TableXref:41877-1]] lists the Merge Definition Tool attributes.  [[Table:41877-1]]  Merge Definition Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Merge Main Document field  Specifies the path and file name of the word processing main document.  The main document is the word processing file containing the common text (for example, the body of a letter), and Process Engine fact names.  If the path is not specified, the default path is the config/docs directory.  Use Windows conventions for specifying the path and file.  The document generation function creates only Microsoft Word documents.  Browse button  Used to search for the main document.  Open button  Used to create or edit a main document.  It invokes Microsoft Word and opens the main document for editing.  Each time the Open button is clicked, a new Microsoft Word session is started.  Merge facts grid  Specifies the facts to be used in the merge.  Specify as many facts as required.  Class column  Specifies the class whose facts are required in documents generated using the merge definition.  Only the following classes are available:  Case  Contact  Action  Issue  User.  Fact column  Specifies the fact, from the specified class, whose values are required.  Only facts with a usage of Summary or Detail can be selected; that is, only facts available to be displayed on a layout can be selected.  When a merge is performed, no fact type formatting is included.  For example:  Currency facts are not displayed with a dollar sign.  Date Time facts are displayed with the /.  Boolean facts are displayed as 1 (true), and 0 (false).  "},{"id":94,"title":"Notification Tool","url":"41878.htm","text":"[[TableXref:41878-1]] lists Notification Tool attributes.  [[Table:41878-1]]  Notification Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Notification Method drop-down list  Method for sending the notification to a contact or specified user.   Notification methods are defined in the Notification_Method class.  The core notification method is pop-up message.  If other notification methods are required (for example, email, paging, and SMS), define these in the Notification_Method class.  Send To group  Recipient of the notification (either a user or a contact).   If the:  Contact option is selected, the contact must be associated directly to the action involved.  User option is selected, the notification can be sent to the following:  Assigned user  Work group manager  Assigned by user  Assigned user's manager.   Where a notification is sent is defined in the Workflow Tool and Escalation Tool.   If a notification is to be sent to the assigned user and there is no assigned user but there is an assigned work group, the notification is sent to the work group manager.  If the work group does not have a manager defined, the notification is not sent.  Show Pop-up Message group  Specifies if a pop-up message is displayed to a logged in user.  The Show Pop-up Message group is visible only when:  Pop-Up Message option is not selected in the Notification Method field.  User is selected in the Send To group.  The options are:  Instead of notification  A pop-up message is displayed only if the user is logged in.  This is the default setting.  As well as notification  A pop-up message is displayed, and a notification is sent.  Never  No pop-up message is displayed, even if the user is logged in.  The user receives notification from the method selected in the Notification Method field.  Subject Text field  Text displayed in the title bar of the pop-up window, or subject of the email.  Maximum length of the subject text is 100 characters.  This attribute can contain facts from the Action class, which are represented as placeholders within the text.  The placeholder is the fact name enclosed in square brackets.   For example, to specify the type of action assigned, enter 'The action [Type] has been assigned to you.' in the Subject Text field.  If the Send Info action type has the notification assigned to it, the subject text displayed is 'The action Send Info has been assigned to you'.  Body Text field  Text displayed in the body of the message.  Maximum length of the body text is 2000 characters.  Like the Subject Text field, this attribute can contain facts from the Action class.  "},{"id":95,"title":"Status Tool","url":"41879.htm","text":"[[TableXref:41879-1]] lists the Status Tool attributes.  [[Table:41879-1]]  Status Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  The name must be unique across all classes.  To ensure uniqueness, append each status name with the class name (for example, Case_Open).  For information about Customer Management naming conventions, refer to the Configuration Principles for Singleview Customer Management.  Action Type drop-down list  Type of action to be created for the status.  It is available only for statuses for the Case and Issue classes; otherwise, it is read-only.   Fact column  Specifies a fact from the selected class whose status is to be changed.  Facts with a derivation of Derived Non-Stored, Lookup, Reference Subset, or Indicator cannot be included in the status definition.  Value State column  Specifies how the value of the specified fact is to be changed.  Options are:  Not Allowed (must be null)  Optional  Mandatory  No Change (state to remain as it was before the status was invoked).  Edit State column  Specifies how the fact's edit state is to be changed.  Options are:  Read-only  Edit (that is, the value can be updated)  No Change (state to remain as it was before the status was invoked).  "},{"id":96,"title":"Calendar Tool","url":"41880.htm","text":"[[TableXref:41880-1]] lists Calendar Tool attributes.  [[Table:41880-1]]  Calendar Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Standard working hours grid  The middle section defines the standard working hours for each day of the week.  Each day of the week consists of one or more sets of the following attributes:  Start, which specifies the time at which a working period starts.  End, which specifies the time at which a working period ends.  Duration, which displays the calculated duration of the period, based on its specified Start and End times.  Duration is read-only, and calculated automatically.  Totals row  Read-only.  Displays the total work period for each day of the week.  It is calculated automatically.  Non Working Time check box  If selected, non-working period exceptions are displayed.  OverTime check box  If selected, overtime period exceptions are displayed.  Exception hours grid  The bottom section defines the exception working hours.  Type column  Type of exception period to be defined, and either of the following:  OT, for overtime  Non, for non-working hours.  Description column  Description of the exception period.  From Date column  Date on which the exception period begins.  From Time column  Time at which the exception period begins.  To Date column  Date on which the exception period ends.  To Time column  Time at which the exception period ends.  "},{"id":97,"title":"Scripting Tool","url":"38619.htm","text":"The Scripting Tool is deprecated, and provided only for backward compatibility.  "},{"id":98,"title":"Search Tool","url":"12508.htm","text":"The Search Tool is used to create searches that can be used by Process Engine users or groups of users.  It can also be used to make searches created by individual users in the Process Engine client available to all Process Engine users.  "},{"id":99,"title":"Attributes Tab","url":"12508.htm#o57884","text":"The following table lists Attributes tab attributes.  The type of search determines the editing options for these attributes.  Attributes Tab  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Display Name field  Name displayed in the client.  It must be unique for all search definitions belonging to the same class.  Security Group drop-down list  Mandatory.  Specifies the security group for the search.  Only users whose profile includes the security group specified can run the search. Assigning a security group of Default ensures that all users can run the search.  Available for selection from the client pull down lists? check box  Allows the search to be included in (or excluded from) the list of available public searches displayed when any search is requested by a Process Engine user.   The search is available in the client drop-down list. If not selected, the search is not available.  If selected, specifying a result fact is invalid and can cause incorrect search results when executing the search from Process Engine web client.  Include Obsolete Objects in Search? check box  Includes objects made obsolete in the search.  If not selected, obsolete objects are not included.  If selected, the following options are available:  The Obsolete Date fact can be dragged into a search clause and a date specified. The search retrieves all obsolete objects based on the date and clause.  If the Obsolete Date fact is not included in a clause, all objects made obsolete before the current date are retrieved, and non-obsolete objects that match the search criteria.  Display Search Count check box  If selected, Process Engine web client displays a search count.  Counts cannot be configured for searches with input parameters; that is, input parameters that require a user to enter a value for executing a search (for example, the service number in the Quick Search for Customer's Service gadget).  Result Fact drop-down list  Applies only to searches used in conjunction with reference facts that reference a non-cached object class.  It allows specification of the fact whose values are to be retrieved from the referenced class.  The Name fact is the default result fact.  When a reference fact is created that references a non-cached class, a search or filter expression must be specified. When using a search for the reference fact, a result fact must be specified.  For example, there is a requirement indicating that for each new contact, the sales person who brought the contact to the company needs to be recorded on the contact view. To display only the users who are of type 'sales', a search is defined instead of using a filter expression.  The search is associated to a reference fact, which means the result fact returned needs to be specified. The search is defined over the user class and therefore could return facts such as the user name, surname, and first name. In this example, the display name is the required result fact. The reference fact displays data from the display name fact for every user of type 'sales'.  If Available for selection from the client pull down lists? check box is selected, specifying a result fact is invalid and can cause incorrect search results when executing the search from Process Engine web client.  Classification drop-down list  Allows searches to be categorised using classifications defined in the Search_Classification class.  For example, campaign action searches and standard action searches can be grouped into individual search categories.  Search Operator drop-down list  Specifies the operator to be used between all clause groups in the search definition.  Clause groups are identified by bevelled boxes when custom searches are being defined.  If AND is selected, the operator between all individual clauses is OR, and between clause groups the operator is AND.  If OR is selected, the operator between all individual clauses is AND, and the operator between clause groups is OR.  The NOT boolean operator can be applied to a clause group; however, this is done on the Search Definition tab.  Max Rows field  Sets a limit for the maximum number of rows retrieved by the search.  It does not affect the hard row limit that restricts the number of rows returned in the Process Engine web client. However, if the Use Unlimited Server Resources check box is selected, the value in the Max Rows field is deleted, and the field disabled.  Max Rows, with other configuration items (see the Configuration Guide for Singleview Process Engine), is used to determine the maximum number of rows that can be retrieved.   Use Unlimited Server Resources check box  Used to turn off the database resource limit for the search being defined.  Selecting the check box enables resource-intensive searches to be defined in Configuration Workbench while allowing system administrators to set the resource limit very low to restrict searching from the Process Engine web client.  Any legitimate long-running search may have the resource limit disabled, if it was tested by the configurer.  If selected, the:  Value in the Max Rows field is deleted, and the field disabled.  Maximum number of results a Process Engine web client can retrieve is limited by the HardRowLimit configuration item.  For information about how to set up database resource restrictions, refer to the Performance Guide for Singleview.  Effective Date Source group  Sets the source of the effective date condition in a search.  If the search is for a date ranged class, or the search definition includes a date ranged class, the effective date source is required. If a value is selected for a non-date ranged class, it is ignored.   Only one source can be selected:  Prompt, which prompts the user to enter the effective date when the search is run in the Process Engine web client.  Current Date, which uses the current date as the effective date and is the default for a new search.  Absolute Date, which allows configurers to specify an effective date to be used when the search is run. Users cannot enter a date.  "},{"id":100,"title":"SQL Query Tab","url":"12509.htm","text":"The SQL Query tab displays a read-only SQL (Structured Query Language) statement generated from the selected search.  Behind each search is an SQL statement that runs when the search is executed.  The Search Tool does not require users to know SQL to create a search; however, for users familiar with SQL this can provide useful information concerning a search definition, and how it is processed.  [[FigureXref:12509-1]] displays the SQL Query tab.  [[Figure:12509-1]]  Search Tool Window (SQL Query Tab)  "},{"id":101,"title":"Search Definition Tab","url":"10733.htm","text":"The Search Definition tab is divided into two sections.  The list of available facts, based on the class, is displayed on the left-hand side.  The search definition area is displayed on the right-hand side.  Facts are dragged and dropped from the list to the definition and vice versa.  Searches can be defined, but not run, from the Search Tool.  Searches can only be run in Process Engine web client.  "},{"id":102,"title":"Sort Order Tab","url":"10733.htm#o57659","text":"The Sort Order tab contains the sort order definition for a search definition. The Sort Order Definition group can contain multiple Sort Order Fact groups, each containing a fact with an assigned ascending or descending order. Facts are rearranged to describe a required order.  When a search is executed, the search results are sorted by each fact in turn, in the order that the facts are displayed in the tab. Subsequent sorts only affect the ordering of results ranked equally by previous sort. The selected ascending or descending order determines how the values for each fact are displayed in the search result.   After a search definition is published as a public search, its sort order cannot be changed.  The following diagram displays the Sort Order tab.  Sort Order Tab  If a sort order is not defined for a search definition, the Sort Order tab is blank. The tab displays an Add button when the Search Tool is locked. This allows a user to define a sort order definition (see the User Guide for Customer Management).  The following table lists Sort Order tab attributes.  Sort Order Tab Attributes  Attribute  Description  Sort Order Definition group  Default sort order for a predefined search.  A sort order definition can contain multiple sort conditions, each displayed as a row (Sort Order Fact group).  Sort Order Fact group  Condition defining whether the selected fact is sorted in an ascending or descending order.  Each condition is made up of a fact (Sort By drop-down list) with the ascending or descending order (Sort Order drop-down list) applied to it.  A sort order definition can include multiple Sort Order Fact groups each representing a specific sort condition.  Sort By drop-down list  Fact selected for sorting retrieved search results.  The Sort By drop-down list displays names of facts, any one of which can be selected and used for sorting retrieved search results.  The drop-down list only displays searchable and stored facts available for the search class if they are of the following types:  Boolean  Integer  Text  Decimal  Percent  Currency  Timestamp  Period  Reference.  Sort Order drop-down list  Order in which the search results are sorted for the selected fact.  The order can either be ascending or descending.  Up Button  Moves a Sort Order Fact group up by one.  Enabled only for multi-fact sort definitions.  Down Button  Moves a Sort Order Fact group down by one.  Enabled only for multi-fact sort definitions.  Add Button  Adds a new Sort Order Fact group.  Delete Button  Deletes a Sort Order Fact group.  "},{"id":103,"title":"Parameter Tool","url":"41881.htm","text":"[[TableXref:41881-1]] lists the Parameter Tool attributes.  [[Table:41881-1]]  Parameter Tool Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Name field  The name cannot contain any spaces or special characters except the underscore (_).   For information about Customer Management naming conventions, refer to the Configuration Principles for Singleview Customer Management.  Entry Text field  Description of the parameter.   For input parameters (used to input Complex search criteria), the entry text is the user prompt on the input screen.  For this reason, make the Entry Text as clear and relevant as possible.  Entry text is the only attribute of an internal parameter than can be changed by the configurer.  Parameter Type drop-down list  Specifies the parameter type.  Valid values are:  Internal  Input  Expression.  Internal parameters are built-in core parameters.  New internal parameters cannot be defined.  Internal parameters can be used in Complex searches and expressions.  User-defined parameters are either input or expression parameters.  Input parameters can only be used in user-requested Complex searches.  When the Complex search is run, a window is displayed and the appropriate search criteria entered.  Expression parameters return a value and can be used in expressions and in Complex searches.  Fact Type drop-down list  Specifies the type of value calculated by the parameter or entered by the user.  Image is the only fact type that cannot be selected.  Reference Class drop-down list  Class the parameter references for its data.  Mandatory when a fact type of Reference is chosen.  Possible values are non-fact-based classes, Search class, or Class class.  Default Value/<br>Expression field  For input parameters, the attribute is labelled Default Value.  It specifies the expression that calculates a default value displayed in the Complex search window.  The default value can be overridden.  The expression must return a value consistent with the chosen fact type.  For expression parameters, the attribute is labelled Expression.  This attribute specifies an expression that calculates the value of the parameter.  The expression must return a value consistent with the chosen fact type.  "},{"id":104,"title":"Auditing Tool","url":"41882.htm","text":"The following tables list attributes used to define an audit profile and audited group in the Auditing Tool (see the Security and Auditing Configuration Guide for Singleview).  The Profile tab defines details of audit profiles.  The following table lists Profile tab attributes.  Profile Tab Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not described in this table.  Security Group drop-down list  Specifies the security group for the audit profile.  An existing security group is selected from the list.  Use the arrow next to the Security Group drop-down list to view the definition of the security group or to define a security group.  Audited Groups grid  Read-only.  Displays a grid containing all audited groups associated with the selected audit profile or audited class in the Auditing Tool Object List Box.  The Group tab defines details of a group.  The following table lists Group tab attributes.  Group Tab Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not described in this table.  Profile drop-down list  Specifies the audit profile associated with the audit group.  The field is editable when creating an audit profile.  After an audit group is saved, the field is disabled.  Parent Fact drop-down list  Specifies an optional parent fact, that must be a reference fact from the audited object&#8217;s class.  The audit log records identify the referenced parent object.  For most classes this is usually a contact or a customer reference.  When creating an audit log record, the Process Engine server records the value of the selected reference fact.  Eligibility Fact drop-down list  Specifies an optional eligibility fact reference, that restricts auditing to objects having a non-null value.  Context field  Describes the audited data in business terms.  Business managers using business-level auditing functionality of Process Engine are not likely to be familiar with Process Engine class names.  The field allows appropriate names to be defined and displayed in the audit log record for the audited Process Engine class.  A maximum of 4096 characters are permitted.  Process Engine truncates values larger than this limit.  Class field  Specifies the name of the audited class.  The class is selected when the audit group is created and cannot be changed after the audit group is saved.   Audit Security Group drop-down list  Specifies the security group for the audit log records and determines who can view the audit log records.  Security Group drop-down list  Specifies the security group for the audit group.  Audit Operations group  Specifies one or more of the following operations to be audited:  Create  Retrieve  Update  Obsolete.  An audit log record is created when:  Any of the selected operations are performed on an object in the audit profile's class.  The operation is performed by a user associated with a user type, to which the audit profile is associated.   The audit log record is created regardless of the facts configured in the Audited Facts grid.  Audited Facts grid  Displays a grid to configure facts for auditing and for displaying all audited facts configured for the active audit group.  Specifying facts for auditing is optional.  Users associated with an audit profile with configured facts and operations only create audit log records when any of the configured facts and operations are committed by them.  Fact field  Specifies the fact on which the audit should occur.  Context field  Describes audited facts in business terms.  The fact's display name is used when the field is left blank.  Retrieve field  Defines whether or not an audit log record is created when the fact is retrieved.  When True, an audit log record is created.  Update field  Defines whether or not an audit log record is created when the fact is updated.  When True, an audit log record is created.  Detail field  Defines whether or not changes made to the fact are recorded in the audit log record.  When True, the changes are recorded.  Security Group field  Specifies the security group for the audited fact.  Last Mod User field  Read-only.  Displays the ID of the user who last modified the audited fact.  Last Update field  Read-only.  Displays the date-time when the audited fact was last updated.  Last Modified field  Read-only.  Displays the date-time when the audited fact was last modified.  "},{"id":105,"title":"User Tool","url":"56304.htm","text":"This section describes the User Tool attributes used to configure Process Engine users.  "},{"id":106,"title":"Detail Tab","url":"56304.htm#o55302","text":"The Detail tab defines user information, such as user name and user type.   The mandatory attributes are Logon Id, Surname or First Name, Email Address, Profile, and password (specified using the Set Password button).  The following table lists Detail tab attributes for users.  Detail Tab Attributes for Users  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not described in this table.  Logon Id field  Name for the user.  The user name is alphanumeric with a minimum of three and maximum of 20 characters.   Surname field  User's family name.  First name field  User's personal details.  Sex field  Title field  Display Name field  Date of Birth field  Contact Number field  Extension field  Work Number field  Home Number field  Fax Number field  Job Title field  Security Group drop-down list  User's security group.  If not specified, defaults to the primary security group set in the user's profile.  Contact ID field  Read-only.  ID of the associated contact.  A contact can be assigned to a user to record additional personal information.  Official Name field  Read-only.  Official name of the associated contact.  Change Contact button  Used to search for the associated contact.   Email Address field  Email address for email notifications.  Agent Id field  CTI user's ID defined by the PBX switch and CTI provider.  Maximum length is 30 characters.  Team field  Team to which the user belongs.   Team Description field  Read-only.  Description of the team.  It is populated when a team is selected.   Manager drop-down list  User name of the user's manager.  A manager is any other user.  Default Work Group field  Default work group for assigning actions.  Users can be assigned multiple work groups using their profile.  This field defaults to the first work group associated with the user.  If an action type has a default user specified, actions of that type are assigned to the specified user and the work group set to that user's default work group.   Work Group Description field  Read-only.  Description of the default work group.  It is populated when a default work group is selected.  Calendar drop-down list  Calendar specifying the working hours for the user.   The calendar is for reference purposes only; it is not used for any other purpose.   Start Date field  Start date for the user.   Departure Date field  Departure date for the user.  User Type drop-down list  Type of user.  The Invalid User Type user type contains users with no user type defined.  These users must have a type defined before they can be used.  Profile drop-down list  User's profile.  Audit Profile field  Audit profile associated with the user.  Audit profiles are defined in the Auditing Tool and associated with the user type in the Class and Data Tool.  Interface Directory field  Not used.  Set Password/Change Password buttons  Displays the Change Password window to set the user's password.  A password must be set before a new user can be saved or an obsolete user restored.  The Set Password button is displayed if user details are not yet saved.  The Change Password button is displayed after user details are saved.  Super User check box  Specifies whether the user is allowed to perform TRE operations as another user (see the Security and Auditing Configuration Guide for Singleview).  PE User check box  Read-only.  Specifies whether the user can log in to Process Engine.  The user's profile determines their system access.   CB User check box  Read-only.  Specifies whether the user can log in to Convergent Billing  The user's profile determines their system access.  Users without Convergent Billing access can make Convergent Billing updates using Process Engine when a shared class is configured; for example, contacts are stored in Convergent Billing, but can be updated in Process Engine web client.   Internal Authentication check box  Read-only.  Specifies that the user is authenticated by Singleview.  External Authentication check box  Read-only.  Specifies that the user is authenticated by a system external to Singleview.  "},{"id":107,"title":"General Fields Tab","url":"56304.htm#o10268","text":"The General Fields tab displays the fields mapped to the Convergent Billing General fields.  General fields can be used for additional user requirements (see the Configuration Guide for Singleview Process Engine).  "},{"id":108,"title":"Account Tab","url":"56304.htm#o55303","text":"The Account tab displays settings relating to the status of the user's account, updates to the account, and the account usage.  The following table lists Account tab attributes.  Account Tab Attributes  Attribute  Description  Unless there is additional information specific to this tool, attributes displayed on all tools are not included in this table.  Enabled check box  Specifies if internal authentication is activated.  If selected, the user can log in with the appropriate password and has an underlying Oracle account.  It is read-only in Process Engine and is selected for current users, but not for obsolete users.  Locked check box  Specifies if the user account is locked (that is, the user is unable to log in).  The account is locked either by manually selecting this check box or excessive consecutive failed attempts at logging in.  Expired check box  Specifies if the user password has expired.  The password expires either by manually selecting this check box or expiration of the assigned grace period.  Status field  Read-only.  Specifies the account status.  The status is Disabled for obsolete users.  Last Login field  Date-time the user last logged in to Convergent Billing or Process Engine.  Last Logout field  Date-time the user last logged out of Convergent Billing or Process Engine.  "},{"id":109,"title":"Reference Information","url":"11011.htm","text":""},{"id":110,"title":"Built-in Process Engine EPM Functions","url":"57331.htm","text":"To simplify the access of Process Engine objects using EPM, a number of EPM functions are provided with Process Engine. These built-in functions can be used to retrieve and update Process Engine data. The EPM functions are non-deterministic unless specified.  Deterministic functions are evaluated at compile time (if constant parameters are supplied) and cached on the server to improve performance.  The following sections list built-in Process Engine functions in logical groups and include a brief description of each function.  "},{"id":111,"title":"ActionEscalate&amp;()","url":"9399.htm","text":"Syntax  ActionEscalate&(      action@)  Description  Escalates an action based on the escalation policy for the action.   Parameter  Parameter  Description  action@  Action to escalate.  Returns  Null if successful; otherwise, an exception is raised.  Remarks  This function can be called by a trigger or a remote Process Engine EPM function.  Example  Using a timeout trigger, run the Actions_due_to_escalate search, and escalate each action object returned.  {<br>    var i&;<br>    var result@[] := ObjectSearch@[](<br>      Search:Action.Actions_due_to_escalate@,[], []);<br>    for (i& := 0; i& < length(result@[]); ++i&) {<br>        ActionEscalate&(result@[i&]);<br>    }<br>}  "},{"id":112,"title":"AsyncDialog&amp;()","url":"58681.htm","text":"Syntax  AsyncDialog&(      Caption$,      Message$,      Icon@,      ButtonCount&,      ButtonCaption$[],      ButtonTrigger@[],      ButtonOp@[],      ZoomCount&[],      ZoomView@[],      ZoomObj@[],      AdditionalParams$[],      User@)  Description  Sends an asynchronous message to the client, displaying a message window.  The contents of the window are defined by the function parameters.  Parameters  Parameter  Description  Caption$  Caption to be displayed on the message window.  Message$  Message to be displayed in the window.  New lines are specified by \\r\\n (carriage return and line feed escape characters).  Icon@  OID of the icon to display. This is ignored by Process Engine web client.  ButtonCount&  Number of buttons to display on the message window.  ButtonCaption$[]  Array of strings to display on the buttons.  Each button has its own string array.  ButtonTrigger@[]  Array of On Client Request triggers to execute when buttons are clicked.  Each button has its own trigger.  ButtonOp@[]  Array of operations to execute when buttons are clicked.  Each button has its own operation array.  ZoomCount&[]  Array of counts of zoom objects for buttons.  Each button has its own counts of zoom objects.  ZoomView@[]  List of views to open for the zoom objects.  If Null, the default view for the zoom object is opened.  ZoomObj@[]  List of objects to be displayed on the zoom view.  If there is more than one object per class, the objects for that class are displayed in the List section of the view.  If the objects belong to more than one class, a new view is opened for each class.  AdditionalParams$[]  Array of strings to pass as parameters to the client.  It can include configurer-defined parameters, to be used in the trigger through ClientParamGet$() calls, or message-related parameters used to determine the message properties.  The table below lists message-related parameters.  User@  User to whom the message should be sent.  If Null, the facts are sent to the current Process Engine session.  The following table lists additional parameters that can be passed to the function using the AdditionalParams$[] parameter.  AdditionalParams$[] Parameters  Parameter  Description  PARAM:AUTO_CLICK  Suppresses the window from being displayed in Process Engine web client.  The first button on the window is automatically clicked, the same behaviour as if the window was displayed and the user clicked the first button.  PARAM:BASEVIEW_OBJ  ClassKey  ObjectKey  PARAM:END  Specifies the class key and object key of the object open in the associated view.  The associated view of an asynchronous message is the view that the message primarily interacts with.  The associated view determines:  Where the message is displayed and where it can be moved to.  How the operations of the message execute.  What view is blocked by modal messages.  PARAM:DISPLAY_OPTS  Specifies additional display options.  The following options modify the message text:  LEFT_ALIGN left aligns the message text.  RIGHT_ALIGN right aligns the message text.  WORD_WRAP_OFF disables automatic wrapping of message text.  For example, the following code left aligns the message text in the window:  AdditionalParams$[0] := 'PARAM:DISPLAY_OPTS';<br>AdditionalParams$[1] := 'LEFT_ALIGN';<br>AdditionalParams$[2] := 'PARAM:END';  It is not used in Process Engine web client and is ignored if included in the AsyncDialog&() function.  PARAM:MODAL  Displays the window as modal; that is, it cannot be minimised and the fields on the associated view cannot be edited.  Only one modal window can be displayed on a view at a time.  If an attempt is made to display another modal window when another is displayed, the second modal window is not displayed until the first is closed.  If the associated view of the window is closed, the window is also closed.  PARAM:ON_VIEW  Displays the window and locks it to its associated view.  If the view is closed in the period between initiating the window and the window being displayed, the window is displayed without being locked to any view.  When locked to a view, the window can be minimised or moved; however, the window cannot be dragged outside of the bounds of its associated view.  It is possible to edit fields on the associated view when a window is locked to a view.  Multiple windows can be displayed and locked to the same view at the same time.  If the associated view is closed, all windows locked to the view are closed.  If both the PARAM:ON_VIEW and PARAM:MODAL parameters are included, PARAM:MODAL takes precedence.  Returns  Null if successful; otherwise, an exception is raised.  Remarks  The function passes the effective date to Process Engine web client internally; the effective date is not accessible to configurers.  Zooms and triggers executed from the asynchronous message window use the effective date passed to the client.  Example  The following example is intended to be called by an On Client Request trigger to guarantee a client in which to display the message.  If a trigger context exists, the function adds the current object and additional parameters (if any) to the message sent to the client.  {<br>    var dialogCaption$;<br>    var dialogMessage$;<br>    var dialogIcon@;<br>    var buttonCount&;<br>    var buttonCaption$[];<br>    var buttonTrigger@[];<br>    var buttonOp@[];<br>    var zoomCount&[];<br>    var zoomView@[];<br>    var zoomObj@[];<br>    var additionalParams$[];<br>    var dialogUser@;      # set up test values<br>    dialogCaption$ := 'Test Caption';<br>    dialogMessage$ := 'Test for Popup Message';<br>    dialogIcon@ := StaticObj@('Icon', 'Accept');<br>    buttonCount& := 2;      buttonCaption$[0] := 'OK Button';<br>    buttonTrigger@[0] := StaticObj@('Triggers', 'EM_InitiateSearch');<br>    buttonOp@[0] := null@;<br>    zoomCount&[0] := 0;      buttonCaption$[1] := 'Cancel Button';<br>    buttonTrigger@[1] := null@;<br>    buttonOp@[1] := StaticObj@('Operation', 'EM_InitiateOperation');<br>    zoomCount&[1] := 0;      # Add message-related additional params<br>    additionalParams$[0] := 'PARAM:MODAL';       # Add configurer-defined additional params<br>    additionalParams$[1] := 'PARAM:SELECTION_METHOD';<br>    additionalParams$[2] := 'A'; <br>    additionalParams$[3] := 'PARAM:END';      try {<br>        AsyncDialog&( dialogCaption$,<br>        dialogMessage$,<br>        dialogIcon@,<br>        buttonCount&,<br>        buttonCaption$[], <br>        buttonTrigger@[],<br>        buttonOp@[],<br>        zoomCount&[],<br>        zoomView@[],<br>        zoomObj@[],<br>        additionalParams$[],<br>        dialogUser@);<br>        print('AsyncDialog successful');<br>    }<br>    except {<br>        print('AsyncDialog failed');<br>    }<br>}  "},{"id":113,"title":"AuditInsert&amp;()","url":"40842.htm","text":"Syntax  AuditInsert&(      hFields?{})  Description  Creates a Process Engine audit log record.  Parameter  Parameter  Description  hFields?{}  Unknown hash containing the audit log fields.  Valid hash keys are listed in the table below.  Returns  1 (TRUE) if successful; otherwise, an exception is raised.   Remarks  The following table lists hash keys for hFields?{}.  hFields?{} Hash Keys  Parameter  Description  Object  Mandatory.  ID for the audited object.  Operation  Mandatory.  ID for an Audit_Operation object (for example, Audit_Operation:Retrieve@).  Root_Object  Optional.  ID for the root object for the current transaction.  This can be evaluated using a call to TransactionGet@[]().  Security_Group  Optional.  ID of the security group used for the generated Audit_Log object.  Parent_Fact  Optional.  ID for a fact in the object's class that references a parent object of the object being audited.  Obsolete  Optional.  Date representing the obsolete date for the Audit_Log object.  If specified, this must be a future date.  Description  Optional.  String describing the audit operation.  Details  Optional.  String providing detailed information about the audit operation.  Example  {<br>&nbsp;&nbsp;  var hAudit?{};<br>&nbsp;&nbsp;  var nAcct&;<br>&nbsp;&nbsp;  var oAcct@;<br>&nbsp;&nbsp;  . . . <br>&nbsp;&nbsp;  ### Call CB to create the account and return the identifier<br>&nbsp;&nbsp;  try {<br>&nbsp;&nbsp;&nbsp;&nbsp;    nAcct& := CBAcctCreate&(...);<br>&nbsp;&nbsp;&nbsp;&nbsp;    oAcct@ := to_objid@(ObjectKeyGet&(Class:Cust_Acct@), nAcct&);<br>&nbsp;&nbsp;&nbsp;&nbsp;    . . .<br>&nbsp;&nbsp;  ### Generate an audit log record<br>&nbsp;&nbsp;  try {<br>&nbsp;&nbsp;&nbsp;&nbsp;    hAudit@{'Object'} := oAcct@;<br>&nbsp;&nbsp;&nbsp;&nbsp;    hAudit@{'Operation'} := Audit_Operation:Create@;<br>&nbsp;&nbsp;&nbsp;&nbsp;    hAudit${'Description'} := 'New Customer';<br>&nbsp;&nbsp;&nbsp;&nbsp;    hAudit${'Root_Object'} := RootObjectGet@();<br>&nbsp;&nbsp;&nbsp;&nbsp;    AuditInsert&(hAudit?{});<br>&nbsp;&nbsp;&nbsp;&nbsp;    . . .<br>}  "},{"id":114,"title":"BusRuleExecute&amp;()","url":"9401.htm","text":"Syntax  BusRuleExecute&(      busRule@,      Object@)  Description  Executes a specific business rule (defined in the Business Rule Tool).  Parameters  Parameter  Description  busRule@  OID of the business rule to run.  Object@  OID of the object for which the business rule should be executed.  Returns  1 if successful; otherwise, an exception is raised.  Remarks  This function is similar to ObjectValidate&() except that a specific business rule can be executed, rather than all business rules for an object.  Example  With a trigger on the Issue class, execute the ReasonMandatory business rule for the current issue:  {<br>    myIssue@ := CurrentObjectGet@();<br>    BusRuleExecute&(Business_Rule:Issue.ReasonMandatory@, myIssue@);<br>}  "},{"id":115,"title":"CalendarFetchDetails?{}()","url":"38213.htm","text":"Syntax  CalendarFetchDetails?{}(      CalendarOid@)  Description  Retrieves calendar attribute information for a specified calendar.  Parameter  Parameter  Description  CalendarOid@  In:  Object ID of the calendar for which to retrieve attribute information.  Returns  Hash containing details of the calendar if successful; otherwise, an exception is raised.  Remarks  The hash only contains a defined value for a key if the calendar object has a value set for the attribute; otherwise, the value is Null.  Where applicable, object IDs are returned in the hash.  All other information is either text or integers.  The category key contains an array of unknown hashes.  The following table lists keys representing the calendar attributes and valid values, if applicable.  CalendarFetchDetails?{} Return Hash  Key  Valid Values  Name  Display Name  Categories[]  Key  Valid Values  Category  CalCat:Sunday&  CalCat:Monday&  CalCat:Tuesday&  CalCat:Wednesday&  CalCat:Thursday&  CalCat:Friday&  CalCat:Saturday&  CalCat:NonWork&  CalCat:Work&  StartPeriod  EndPeriod  Example  The following code displays the attributes for a calendar:  {<br>    var lCalendarAttribs?{};<br>    var lCalendarOid@ := to_objid@(9, 100);      try {<br>        lCalendarAttribs?{} := CalendarFetchDetails?{}(lCalendarOid@);<br>        print('CalendarDef HASH contents:');<br>        print(lCalendarAttribs?{});<br>    } except {<br>        print('CalendarFetchDetails failed');<br>    }<br>}  The following is output from the above code example:  { Categories => [ { Category => 9, EndPeriod => 99999, StartPeriod => 2 } ], DisplayName => DisplayName1, Name => Elapsed }  "},{"id":116,"title":"ClassFetchDetails?{}()","url":"38210.htm","text":"Syntax  ClassFetchDetails?{}(      ClassOid@)  Description  Retrieves class attribute information for a specified class.  For example, the function can be used to detect if a class is date-ranged.  Parameter  Parameter  Description  ClassOid@  In:  Object ID of the class for which to retrieve attribute information.  Returns  Hash containing details of the class if successful; otherwise, an exception is raised.  Remarks  The hash only contains a defined value for a key if the class has a value set for the attribute; otherwise, the value is Null.  For example, the ObjStartDate_Fact and ObjEndDate_Fact key values are Null for classes not date-ranged.  Where applicable, object IDs are returned in the hash.  All other information is either text or integers.  The hash contains the following keys (representing the class attributes):  Name  DisplayName  ClassKey  ThisParam  Static  DateRanged  DateTimeRanged  DefaultSearch  TableName  RemoteTable  EntityName  ExpiryDuration  ObjStartDate_Fact  ObjEndDate_Fact  Type_Fact  AssocRefA_Fact  AssocRefB_Fact  Name_Fact  DisplayName_Fact  Status_Fact  LastUpdate_Fact  SecGrp_Fact  Obsolete_Fact  Class_Facts.  Example  The following code displays the attributes for the Case class:  {<br>    var lClassAttribs?{};<br>    try {<br>        lClassAttribs?{} := ClassFetchDetails?{}(Class:Case@);<br>        print('ClassDef HASH contents:');<br>        print(lClassAttribs?{});<br>    } except {<br>        print('ClassFetchDetails failed');<br>    }<br>}  The following is output from the above code example:  ClassDef HASH contents:{ AssocRefA_Fact => , AssocRefB_Fact => , ClassKey => 100, Class_Facts => [ 0x0002000000000000000000000000004D, 0x0002000000000000000000000000004E, 0x0002000000000000000000000000004F, 0x00020000000000000000000000000050, 0x00020000000000000000000000000052, 0x00020000000000000000000000000053, 0x00020000000000000000000000000054, 0x00020000000000000000000000000057, 0x00020000000000000000000000000058, 0x00020000000000000000000000000059, 0x0002000000000000000000000000005A, 0x00020000000000000000000000000880, 0x00020000000000000000000000000883, 0x00020000000000000000000000000885, 0x00020000000000000000000000000887, 0x00020000000000000000000000000888, 0x0002000000000000000000000000088B, 0x0002000000000000000000000000088C, 0x0002000000000000000000000000088D, 0x0002000000000000000000000000088F, 0x00020000000000000000000000000891, 0x00020000000000000000000000000892, 0x00020000000000000000000000000894, 0x00020000000000000000000000000895, 0x00020000000000000000000000000CA8, 0x00020000000000000000000000000D10, 0x00020000000000000000000000000EFA, 0x000200000000000000000000000011DA, 0x000200000000000000000000000011EF, 0x000200000000000000000000000011FE, 0x000200000000000000000000000013F5, 0x00020000000000000000000000001435, 0x00020000000000000000000000001436, 0x00020000000000000000000000001437, 0x00020000000000000000000000001438, 0x00020000000000000000000000001439, 0x00020000000000000000000000001488, 0x00020000000000000000000000001707, 0x00020000000000000000000000001894, 0x00020000000000000000000000001AE5, 0x00020000000000000000000000001B85, 0x00020000000000000000000000001B86, 0x00020000000000000000000000001B8E, 0x00020000000000000000000000001C07, 0x00020000000000000000000000001D0D, 0x00020000000000000000000000001D1E, 0x00020000000000000000000000001EC5, 0x00020000000000000000000000001F44, 0x00020000000000000000000000001F4B, 0x00020000000000000000000000001F4C, 0x00020000000000000000000000001F56, 0x00020000000000000000000000002326, 0x00020000000000000000000000002333, 0x0002000000000000000000000000233E, 0x0002000000000000000000000000233F, 0x00020000000000000000000000002343, 0x00020000000000000000000000002344, 0x00020000000000000000000000002346, 0x00020000000000000000000000002350, 0x00020000000000000000000000002353, 0x00020000000000000000000000002354, 0x0002000000000000000000000000237B, 0x0002000000000000000000000000237C, 0x000200000000000000000000000023A9, 0x000200000000000000000000000023AA, 0x00020000000000000000000000002CBF, 0x00020000000000000000000000002CE9, 0x00020000000000000000000000002D4D, 0x00020000000000000000000000003115, 0x00020000000000000000000000003116, 0x00020000000000000000000000003156, 0x0002000000000000000000000000330E, 0x0002000000000000000000000000330F, 0x00020000000000000000000000003310, 0x00020000000000000000000000003377, 0x00020000000000000000000000003383, 0x00020000000000000000000000003385, 0x00020000000000000000000000003386, 0x000200000000000000000000000033DC, 0x000200000000000000000000000033DD, 0x000200000000000000000000000033DE, 0x000200000000000000000000000033E3, 0x000200000000000000000000000033E4 ], DateRanged => 0, DateTimeRanged => 0, DisplayName => Case, DisplayName_Fact => 0x00020000000000000000000000000054, EntityName => , ExpiryDuration => 0, LastUpdate_Fact => 0x00020000000000000000000000000053, Name => Case, Name_Fact => 0x00020000000000000000000000000054, ObjEndDate_Fact => , ObjStartDate_Fact => , Obsolete_Fact => 0x00020000000000000000000000000057, RemoteTable => , SecGrp_Fact => 0x00020000000000000000000000000058, Status_Fact => 0x00020000000000000000000000000059, TableName => CASE_VAL, ThisParam => 100, Type_Fact => 0x0002000000000000000000000000005A }  "},{"id":117,"title":"ClassGet@()","url":"9413.htm","text":"Syntax  ClassGet@(      Object@)  Description  Returns the class for an object, given the OID of the object.  The function is deterministic.  Parameter  Parameter  Description  Object@  OID of the object.  Returns  OID for the object's class if successful; otherwise, an exception is raised.  Example  With a trigger on the Issue class, only perform the EPM logic if the current object is from the Issue class:  {<br>    var myIssue@ := CurrentObjectGet@();<br>    var class@ := ClassGet@(myIssue@);<br>    if (class@ = Class:Issue@) {<br>        # Do processing in the knowledge that the object is an Issue object<br>        ...<br>    }<br>    else {<br>        # Perform processing for invalid issue<br>        ...<br>    }<br>}  "},{"id":118,"title":"ClientFullParamGet&amp;()","url":"39892.htm","text":"Syntax  ClientFullParamGet&(      ClientParams?{})  Description  Returns all client parameters as an unknown hash, and allows parameters to be retrieved by specifying their names.  Parameter  Parameter  Description  ClientParams?{}  Hash of client parameters  Returns  1 if successful; otherwise, 0.  When there are no parameters in the current trigger context, no error is raised and 0 is returned.  Remarks  This function is similar to ClientParamGet$ and only valid for On Client Request triggers.  Operation trigger parameters (listed in [[TableXref:39892-1]]) and On Drop trigger parameters (listed in [[TableXref:39892-2]]) can be retrieved.  Additional parameters can also be returned as an array of strings with a hash key of ADDITIONAL_PARAM.  For example, ClientParams?{'ADDITIONAL_PARAM'} where the first element is accessed as ClientParams?{ADDITIONAL_PARAM'}[0].  The additional parameters are either message-related (AsyncDialog&()) or configurer-defined.  If the hash contains only a blob, it can be retrieved by specifying the hash key.  For example, specifying ClientParams?{'PARAM:CURRENT_OBJ'} returns a blob.  If the hash contains an array of hashes, to retrieve the lower level elements, specify the parent hash key followed by an array index and the child hash key.  For example, specify:   ClientParams?{'PARAM:ALL_ACTIVE_TREE_OBJ'}[0]{'TREE_OBJ'}.  Nested hashes can be retrieved by specifying the parent hash key followed by the child hash key (for example, ClientParams?{'PARAM:MOVE_COPY'}{DESCLASS'}).  [[Table:39892-1]]  Client Parameters Array for Operation Trigger Parameters  Key  Description  PARAM:CONTEXT_OBJ  Hardcoded text string.  The PARAM:CONTEXT_OBJ parameters are only included if there is a context class configured on the operation, and a layout group matches the context class that displays an object.  <Class Key>  Class key of the context object.  <Object Key>  Object key of the context object.  PARAM:END  Hardcoded text string.  PARAM:BASEVIEW_ID  Hardcoded text string.  The PARAM:BASEVIEW_ID parameters are only included if there is a base view.  The base view is the view from which the On Client Request trigger was invoked.  <Base View ID>  Number that identifies a base view instance.  PARAM:END  Hardcoded text string.  PARAM:CURRENT_OBJ  Hardcoded text string.  The PARAM:CURRENT_OBJ parameters are the view's main object if the operation is configured on the view's toolbar, or the focused tab's main object if the operation is configured on the tab's toolbar.  <Class Key>  Class key of the current object.  <Object Key>  Object key of the current object.  PARAM:END  Hardcoded text string.  PARAM:LIST_SECTION  Hardcoded text string.  The PARAM:LIST_SECTION parameters are only included if the List Section Objects attribute is set in the toolbar tabs in the Interface Design Tool, or on the Menu Operation Configuration window in the Menu Tool.  <Class Key>  Class key of the view.  <Object Key>  Object key of an object in the List section.  It is repeated for each object in the List section.  PARAM:END  Hardcoded text string.  PARAM:ALL_ACTIVE_OBJ  Hardcoded text string.  <Class Key>  Class key of the selected object.  <Object Key>  Object key of the selected object.  Class Key and Object Key are repeated for each selected object.  PARAM:END  Hardcoded text string.  PARAM:ALL_ACTIVE_TREE_OBJ  Hardcoded text string.  <Class Key>  Class key of the selected tree object.  <Object Key>  Object key of the selected tree object.  <Layout Group Key>  Key for the layout group template of the tree where the object is selected.  Class Key, Object Key, and Layout Group Key are repeated for each selected tree object.  PARAM:END  Hardcoded text string.  PARAM:OPERATION_NAME  Hardcoded text string.  <Operation Name>  Name of the operation that initiated the On Client Request trigger.  PARAM:END  Hardcoded text string.  [[Table:39892-2]]  Client Parameters Array for On Drop Trigger Parameters  Value  Description  PARAM:MOVE_COPY  Hardcoded text string.  Start of the move or copy operation parameters initiated by a drag and drop on a hierarchy tree (see the Configuration Workbench Tools Guide for Singleview Process Engine).  <Operation>  Type of operation requested, either MOVE or COPY.  The COPY operation is reserved for future use.  <Destination Class Key>  Class key of destination object, or 0 for the root node.  <Destination Object Key>  Object key of destination object, or 0 for the root node.  <Source Reference Subset Fact>  Reference subset fact for the source tree, or NULL for an association hierarchy tree.  <Destination Reference Subset Fact>  Reference subset fact for the destination tree, or NULL for an association hierarchy tree.  <Source Parent>  Parent fact for the source tree, or NULL for an association hierarchy tree.  <Destination Parent>  Parent fact for the destination tree.  For association hierarchy trees, the destination parent fact is the parent fact of the affected reference subset fact definition.  <Source Tree Parent Class>  Class key of the parent object of the source tree, or 0 if no parent object exists.  <Source Tree Parent Object>  Object key of the parent object of the source tree, or 0 if no parent object exists.  <Destination Tree Parent Class>  Class key of the parent object of the destination tree, or 0 if no parent object exists.  <Destination Tree Parent Object>  Object key of the parent object of the destination tree, or 0 if no parent object exists.  <Start Timestamp>  Start date-time for the change if the object is date ranged, in the format ddmmyyyyhhnnss.  It only contains a value if the destination object is date ranged, and one or more of the source objects are date ranged; otherwise is set to 0).  <End Timestamp>  End date-time for the change if the object is date ranged, in the format ddmmyyyyhhnnss.  It only contains a value if the destination object is date ranged, and one or more of the source objects are date ranged; otherwise is set to 0.  START:SRC_OBJ  Hardcoded text string.  Start of the source object list.  The list is terminated by the END:SRC_OBJ client parameter.  The group of <Source Class Key>, <Source Object Key>, <Source Parent Class Key>, <Source Parent Object Key>, and <Source Reference Subset Fact Key> elements are repeated for each selected object in the hierarchy tree.  <Source Class Key>  Class key for selected object.  <Source Object Key>  Object key for the selected object.  <Source Parent Class Key>  Class key for the selected object's parent node (used for association hierarchy trees), or 0 if not an association hierarchy tree.  <Source Parent Object Key>  Object key for the selected object's parent node (used for association hierarchy trees), or 0 if not an association hierarchy tree.  <Source Reference Subset Fact Key>  Reference subset fact key used to create the source node (used for association hierarchy trees), or 0 if not an association hierarchy tree.  END:SRC_OBJ  Hardcoded text string.  End of the source object list.  PARAM:END  Hardcoded text string.  PARAM:OPERATION_NAME  Hardcoded text string.  <Operation Name>  Name of the operation that initiated the On Client Request trigger.  PARAM:END  Hardcoded text string.  Example  The following is an On Client Request trigger for the TestParam case operation:  {<br>    var ClientParams?{};<br>    var Result&;<br>    try{<br>        # Get the parameter in hash<br>        Result& := ClientFullParamGet&(ClientParams?{});<br>        # Print keys of hash<br>        print(keys(ClientParams?{}));<br>        # Print all parameters in hash<br>        print(ClientParams?{});<br>        # Get current object<br>        var thisCase@ := to_blob(ClientParams?{'PARAM:CURRENT_OBJ'});<br>        # Get an integer fact<br>        var myInteger& := to_integer(ClientParams?{'PARAM:BASEVIEW_ID'});<br>        print(to_string(myInteger&)});<br>        # Get a text fact<br>        var myText$ := ClientParams?{'PARAM:OPERATION_NAME'};<br>        print(myText$});<br>        ObjectUpdate&(thisCase@, [Fact:Case.Text_Fact@, Fact:Case.Integer_Fact@], <br>        [myText$, myInteger&]);<br>        #Get the first additional parameter<br>        var myAdditionalParam$ := ClientParams${'ADDITIONAL_PARAM'}[0];<br>        print(myAdditionalParam$);<br>    } except {<br>        print('Trigger failed');<br>    }<br>}  The following is sample output from the above example (comments in italics):  [ADDITIONAL_PARAM, PARAM:ALL_ACTIVE_OBJ, PARAM:BASEVIEW_ID, PARAM:CURRENT_OBJ, PARAM:OPERATION_NAME](Keys of hash)<br>{ADDITIONAL_PARAM => [ PARAM:MODAL, PARAM:SELECTION_METHOD, A, PARAM:END ] , PARAM:ALL_ACTIVE_OBJ => [ 0x00640000000000000000000000000063 ],<br>PARAM:BASEVIEW_ID => 1, PARAM:CURRENT_OBJ => [ 0x00640000000000000000000000000063 ], PARAM:OPERATION_NAME => TestParam }(Parameters in hash)<br>1 (myInteger&)<br>TestParam (myText$)<br>PARAM:MODAL (myAdditionalParam$)  "},{"id":119,"title":"ClientParamGet$()","url":"58683.htm","text":"Syntax  ClientParamGet$(      Index&)  Description  Returns the value of a client parameter and is only valid for On Client Request triggers.  Parameter  Parameter  Description  Index&  Integer value specifying the index of a client parameter to be retrieved from the array of client parameters.  Returns  Value of the client parameter if successful; if Index& is out of range, an exception is raised.  Remarks  The client initiating the trigger determines the values of the parameters.  Process Engine web client provides appropriate parameters when initiating configured operations.  Client parameters for triggers on Zoom and NewObj operations are populated from the view created by the operation, not the view on which the operation was invoked.  If the trigger is invoked by objects being dropped on a hierarchy tree, client parameters in [[TableXref:58683-2]] are available; otherwise, client parameters in [[TableXref:58683-1]] are available, depending on the configuration.    Client parameters are listed in the tables in the order in which they are stored in the client parameters array; however, positions of client parameters may change.  It is recommended that a client parameter be found by indexing through elements in the array, and searching the returned string for the appropriate PARAM: ID.  Details of the client parameter can then be retrieved using index values for subsequent elements.  To increase portability of the EPM, use the name of the layout group template to determine the layout group template key, rather than hardcoding the layout group template key.  The layout group template object is in the Layout_Group_Template class (see the Configuration Workbench Tools Guide for Singleview Process Engine).  [[Table:58683-1]]  Client Parameters Array for Other Than Hierarchy Tree Drop Event  Value  Description  PARAM:CONTEXT_OBJ  Hardcoded text string.  The PARAM:CONTEXT_OBJ parameters are only included if there is a context class configured on the operation, and a layout group matches the context class that displays an object.  <Class Key>  Class key of the context object.  <Object Key>  Object key of the context object.  PARAM:END  Hardcoded text string.  PARAM:BASEVIEW_ID  Hardcoded text string.  The PARAM:BASEVIEW_ID parameters are only included if there is a base view.  The base view is the view from which the On Client Request trigger was invoked.  <Base View ID>  Number that identifies a base view instance.  PARAM:END  Hardcoded text string.  PARAM:CURRENT_OBJ  Hardcoded text string.  The PARAM:CURRENT_OBJ parameters are the view's main object if the operation is configured on the view's toolbar, or the focused tab's main object (if one exists) if the operation is configured on the tab's toolbar.  <Class Key>  Class key of the current object.  <Object Key>  Object key of the current object.  PARAM:END  Hardcoded text string.  PARAM:LIST_SECTION  Hardcoded text string.  The PARAM:LIST_SECTION parameters are only included if the List Section Objects attribute is set in the toolbar tabs in the Interface Design Tool, or on the Menu Operation Configuration window in the Menu Tool.  <Class Key>  Class key of the view.  <Object Key>  Object key of an object in the List section.  It is repeated for each object in the List section.  PARAM:END  Hardcoded text string.  PARAM:ALL_ACTIVE_OBJ  Hardcoded text string.  <Class Key>  Class key of the selected object.  <Object Key>  Object key of the selected object.  Class key and Object key are repeated for each selected object.  PARAM:END   Hardcoded text string.  PARAM:ALL_ACTIVE_TREE_OBJ  Hardcoded text string.  <Class Key>  Class key of the active tree object.  <Object Key>  Object of the tree object.  <Layout Group Key>  Key for the layout group template of the tree where the object is selected.  Class key, Object key and Layout Group key are repeated for each active tree object.  PARAM:END  Hardcoded text string.  PARAM:OPERATION_NAME  Hardcoded text string.  <Operation Name>  Name of the operation which initiated the On Client Request trigger.  PARAM:END  Hardcoded text string.  [[Table:58683-2]]  Client Parameters Array for Hierarchy Tree Drop Event  Value  Description  PARAM:MOVE_COPY  Hardcoded text string.  Start of the move or copy operation parameters initiated by a drag and drop on a hierarchy tree (see the Configuration Workbench Tools Guide for Singleview Process Engine).  <Operation>  Type of operation requested.  Either MOVE or COPY.  The COPY operation is not supported and may be used in future functionality.  <Destination Class Key>  Class key of destination object, or 0 for the root node.  <Destination Object Key>  Object key of destination object, or 0 for the root node.  <Source Reference Subset Fact>  Reference subset fact for the source tree, or NULL for an association hierarchy tree.  <Destination Reference Subset Fact>  Reference subset fact for the destination tree, or NULL for an association hierarchy tree.  <Source Parent>  Parent fact for the source tree, or NULL for an association hierarchy tree.  <Destination Parent>  Parent fact for the destination tree.  For association hierarchy trees, the destination parent fact is the parent fact of the affected reference subset fact definition.  <Source Tree Parent Class>  Class key of the parent object of the source tree; 0 if no parent object exists.  <Source Tree Parent Object>  Object key of the parent object of the source tree; 0 if no parent object exists.  <Destination Tree Parent Class>  Class key of the parent object of the destination tree; 0 if no parent object exists.  <Destination Tree Parent Object>  Object key of the parent object of the destination tree; 0 if no parent object exists.  <Start Timestamp>  Start date-time for the change if the object is date ranged, in the format ddmmyyyyhhnnss.  It only contains a value if the destination object is date ranged, and one or more of the source objects are date ranged; otherwise is set to 0).  <End Timestamp>  End date-time for change if the object is date ranged, in the format ddmmyyyyhhnnss.  It only contains a value if the destination object is date ranged, and one or more of the source objects are date ranged; otherwise is set to 0.  START:SRC_OBJ  Hardcoded text string.  Start of the source object list.  The list is terminated by the END:SRC_OBJ client parameter.  The group of <Source Class Key>, <Source Object Key>, <Source Parent Class Key>, <Source Parent Object Key>, and <Source Reference Subset Fact Key> elements are repeated for each selected object in the hierarchy tree.  <Source Class Key>  Class Key for selected object.  <Source Object Key>  Object Key for the selected object.  <Source Parent Class Key>  Class Key for the selected object's parent node (used for association hierarchy trees); 0 if not an association hierarchy tree.  <Source Parent Object Key>  Object Key for the selected object's parent node, used for association hierarchy trees; 0 if not an association hierarchy tree.  <Source Reference Subset Fact Key>  Reference subset fact key used to create the source node, used for association hierarchy trees; 0 if not an association hierarchy tree.  END:SRC_OBJ  Hardcoded text string.  End of the source object list.  PARAM:END  Hardcoded text string.  PARAM:OPERATION_NAME  Hardcoded text string.  <Operation Name>  Name of the operation which initiated the On Client Request trigger.  PARAM:END  Hardcoded text string.  Example  On Client Request trigger for a sales order:  {<br>    # the current object should be the highlighted<br>    # entry in the Available Products grid<br>    # which references the ProdStruc Class      var Count& := 1;<br>    var OrderCount& := 0;      # find the context object parameter<br>    while ClientParamGet$(Count&) <> 'PARAM:CONTEXT_OBJ' do{<br>        Count&++;<br>    }      # get the context object<br>    Count&++;<br>    var SelectedProduct@ := <br>        to_objid@(to_integer(ClientParamGet$(Count&)),<br>        to_integer(ClientParamGet$(Count&+1)));<br>    Count& += 2;      # find the active object parameter<br>    while ClientParamGet$(Count&) <> 'PARAM:ALL_ACTIVE_OBJ' do{<br>        Count&++;<br>    }<br>    Count&++;      # get the number of Orders in the active objects list<br>    while ClientParamGet$(Count&) <> 'PARAM:END' do {<br>        var ObjId@ := to_objid@(to_integer(ClientParamGet$(Count&)),<br>          to_integer(ClientParamGet$(Count&+1)));<br>        var Class@ :=  ClassGet@(ObjId@);<br>        if (Class@ = Class:Order@) then {<br>            OrderCount& ++;<br>        }          # move to the next class/key pair in the active object list<br>        Count& += 2;<br>    }<br>}  "},{"id":120,"title":"CloseView&amp;()","url":"39893.htm","text":"Syntax  CloseView&(      ClientID$)  Description  Attempts to close a view for a specified client ID.  Parameter  Parameter  Description  ClientID$  ID of the client to which the notification is sent.  Pass a null string to attempt to close a view in the current client.  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the close command was successfully executed.  Remarks  If no client ID is specified, the active view in the current client is closed.  The Standard Warning commit prompt window is displayed for all open transactions before closing.  Call the function from an On Client Request trigger.  Example  Open a case and close the Case view:  {<br>    # Close the current view.<br>    CloseView&(null)<br>}  "},{"id":121,"title":"CloseViewWithObject&amp;()","url":"39897.htm","text":"Syntax  CloseViewWithObject&(      ClientID$,      Object@)  Description  Attempts to close a view with the specified object as the root object.  Parameters  Parameter  Description  ClientID$  ID of the client to which notification is sent.  Pass a null string to indicate the current client.  Object@  OID for the root object of the view to be closed  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the close command was successfully executed.  Remarks  If no object is specified, the current view is closed.  The Standard Warning commit prompt window is displayed for all open transactions before closing.  Call the function from an On Client Request trigger.  Example  Open a case, update the value in the Priority fact, and close the Case view:  {<br>    # Open a particular case, change it's priority and close that view.<br>    var caseOid@ := ObjectGetByName@(Class:Case@, Fact:Case.Name@, 'C/25', 0);<br>    if (caseOid@ != null@)<br>    {<br>    OpenViewWithObject&(null$, caseOid@);<br>    var newPriority$ := 'Urgent';<br>    PopulateField&(null$, Class:Case@, Fact:Case.Priority, newPriority$); <br>    InvokeMenu&(null$, 'File', ['Save']);<br>    CloseViewWithObject&(null$, caseOid@);<br>    }<br>}  "},{"id":122,"title":"cmUserUpdate&amp;()","url":"57937.htm","text":"Syntax  cmUserUpdate&(      hUserFacts?{},      asRoles$[],      var nUserId&,      var bUpdated&)  Description  Updates or creates a user based on the supplied Name fact.  Parameters  Parameter  Description  hUserFacts?{}  Fact names and values for the user.   For:  Update, the Name fact is mandatory.  Create, the Name, Surname, Password, and Email_Address facts are mandatory.  Profile_ID fact, which refers to a Convergent Billing profile, either the profile name or ID can be specified.  asRoles$[]  Role names for the user.  This parameter is ignored.  For more information, refer to Remarks below.  nUserId&  ID (object key) of the created or updated user.  Returned by the function.  bUpdated&  Operation performed by the function.  1 (TRUE) if a user was updated; otherwise, 0 (FALSE).  Returns  1 (TRUE) if successful; otherwise, an exception is raised.  Remarks  Process Engine roles are mapped directly to Convergent Billing profiles. A user can have only one profile, so the asRoles$[] parameter is ignored.  Example  {<br>    var hUserFacts?{};<br>    var asRoles$[]; # not initialised below because<br>                    # cmUserUpdate ignores the second parameter.<br>    var bUpdated&;<br>    var nRet& := 0;<br>    var nUserId& := 0;      ### Create a user called FREDJONES<br>    try {<br>        hUserFacts${'Name'} := 'FREDJONES';<br>        hUserFacts${'Surname'} := 'Jones';<br>        hUserFacts${'Password'} := 'FredJones1';<br>        hUserFacts${'Email_Address'} := 'fredjones@somewhere.zz';          nRet := cmUserUpdate&(hUserFacts?{}, asRoles$[],<br>                    nUserId&, bUpdated&);<br>    } except {<br>        print('User create failed\\n');<br>    }      ### Update the same user:<br>    ### Change the password, enable the user<br>    ### and assign the INSTALLER profile<br>    if (nRet&) {<br>        try {<br>            hUserFacts${'Name'} := 'FREDJONES';<br>            hUserFacts${'Password'} := 'FredJones2';<br>            hUserFacts&{'Enabled'} := 1;<br>            hUserFacts${'Profile_ID'} := 'INSTALLER';<br>        <br>            nRet := cmUserUpdate&(hUserFacts?{}, asRoles$[],<br>                        nUserId&, bUpdated&);          } except {<br>            print('User update failed\\n');<br>        }<br>    }<br>}  "},{"id":123,"title":"ComposeEmail&amp;()","url":"57794.htm","text":"Syntax  ComposeEmail&(      Details?{})  Description  Displays the Email page for a user to compose an email. Relevant fields are auto-populated.  Parameter  Parameter  Description  Details?{}  Details displayed to a user on the Email Page when composing an email.  Valid hash keys are listed in the table below.  Returns  None.  Remarks  The following table lists hash keys for Details?{}.  Details?{} Hash Keys  Parameter  Description  EMAIL_ID&  Key of the email object.  TO$[]  List of email addresses that can be selected for sending an email to.  FROM$  Email address used as the From address for the email.  REPLY_TO$  Email address used as the Reply-to address for the email.  Subject$  Subject of the email.  BODY_MIME_TYPE$  MIME type of the email body.  Supported MIME types are plain text and HTML.  Body$  Body of the email.  IN_REPLY_TO&  Key of the email object to which the current email is in reply to.  It is null if it is a new email.  AVAIL_ADDRESS$[]  List of email addresses from which a user can select one or more addresses.  CONTEXT_PARAMS  Parameters that are passed back to a specified function when an email is sent or saved.  It can be used to pass in any context parameter (for example, Case ID and Contact ID).  "},{"id":124,"title":"CurrentObjectGet@()","url":"9415.htm","text":"Syntax  CurrentObjectGet@()  Description  Returns the OID from the trigger context object.  Parameters  Parameter  Description  None.  Returns  OID if successful, or null or undefined if there is no trigger context object.  Example  With a trigger on the Issue class, retrieve the current context object, and update the status to Cancelled:  {<br>    var oid@ := CurrentObjectGet@();<br>    var status@ := StaticObj@('Status' 'Issue_Cancld');<br>    ObjectUpdate&(oid@, [Fact:Issue.Status@], [status@]);<br>}  "},{"id":125,"title":"EffectiveDateSet~()","url":"9405.htm","text":"Syntax  EffectiveDateSet~(      EffectiveDate~)  Description  Sets the effective date for the remainder of the triggered operation to the specified date.  Parameter  Parameter  Description  EffectiveDate~  New value for the effective date.  Returns  Previous value of the effective date (always a date) if successful; otherwise, an exception is raised.  Remarks  The function can be used to reset the effective date to its original value if required.  The new value is retained only until the executing trigger terminates, then it reverts back to the original value.  The new effective date is used by the Process Engine server to ensure that the correct date-range segment of an object is retrieved from, or stored to, the cache.  The new effective date also applies to remote Convergent Billing EPM functions called from the trigger.  Example  Run a search for the current date:  {<br>    var i&;<br>    var PreviousDate~;<br>    PreviousDate~ := <br>    EffectiveDateSet~(to_date(ParamValue?(Parameter:Now~)));      var result@[] := ObjectSearch@[](Search:Sex.All_Sex@, [], []);<br>    for (i& := 0; i& < length(result@[]); ++i&) {<br>        var name? := ObjectFactGet?(result@[i&], Fact:Sex.Name@);<br>        print('sex ' + to_string(i&) + ' = ' + to_string(name?));<br>    }<br>    EffectiveDateSet~(PreviousDate~);<br>}  "},{"id":126,"title":"ExpressionEvaluate?()","url":"51107.htm","text":"Syntax  ExpressionEvaluate?(      Class@,      CurrentObject@,      Expression$,      ParameterNames$[],      ParameterValues?[])  Description  Parses and executes an SXP expression.  The following table lists variations of this function that are used to determine the data type of the result.  Function Variations  Variation   Data Type of Result  ExpressionEvaluate?()  Unknown  ExpressionEvaluate&()  Long  ExpressionEvaluate$()  Text  ExpressionEvaluate#()  Double  ExpressionEvaluate~()  Date  ExpressionEvaluate@()  Blob  ExpressionEvaluate@[]()  Array of blobs  ExpressionEvaluateAsKey&[]()  Array of longs  Parameters  Parameter  Description  Class@  Class object ID representing the context class of the SXP expression.  CurrentObject@  Object ID of the current object for expression evaluation.  It must belong to the class specified in Class@.  Expression$  Valid SXP expression for the class specified in Class@.  It must not contain a call to an EPM function.  The This internal parameter cannot be overwritten inside the expression when it references the current object.  ParameterNames$[]  Array of names of parameters within the SXP expression to be substituted.  ParameterValues?[]  Array of values that will be substituted for the named parameters.  Returns  Result of the executed SXP expression converted to the required data type.  Remarks  The compiled expression is cached locally to avoid multiple parse operations.  The return type of the SXP expression must match the type specified in the function or must be converted to the correct type.  This_<ClassName> parameters cannot be used in ParameterNames$[].  Example  {<br>var myCase@ := CurrentObjectGet@();<br>var ParamNames$[];<br>var ParamVals?[];<br>var oid@;  ParamNames$[0] := 's01';<br>ParamVals?[0] := ' Param Value';  print(ExpressionEvaluate$(Class:Case@, myCase@, '[Text_Length_Twenty] + {s01}', ParamNames$[], ParamVals?[]));<br>oid@ := to_blob(ExpressionEvaluate?(Class:Case@, myCase@, '[Reference_Fact]', ParamNames$[], ParamVals?[]));<br>print(to_string(ObjectFactGet?(oid@, Fact:Title.Display_Name@)));  return 1;<br>}  "},{"id":127,"title":"FactFetchDetails?{}()","url":"38212.htm","text":"Syntax  FactFetchDetails?{}(      FactOid@)  Description  Retrieves fact attribute information for a specified fact.  It also tests the fact state before updating or inserting an object.  Parameter  Parameter  Description  FactOid@  In:  Object ID of the fact for which to retrieve attribute information.  Returns  Hash containing details of the fact if successful; otherwise, an exception is raised.  Remarks  The hash only contains a defined value for a key if the fact has a value set for the attribute; otherwise, the value is Null.  Where applicable, object IDs are returned in the hash.  The statuses are returned in an unknown hash.  All other information is either text or integers.  Statuses is an unknown hash containing the values of the fact state and returns the value of the fact state based on the status.  The following table lists the keys representing the fact attributes and valid values, if applicable.  FactFetchDetails?{} Return Hash  Key  Valid Values  Name  DisplayName  FactKey  Type  FactType:Boolean&  FactType:Integer&  FactType:Text&  FactType:Memo&  FactType:Image&  FactType:Decimal&  FactType:Percent&  FactType:Currency&  FactType:Stamp&  FactType:Period&  FactType:Reference&  FactType:Reflist&  ObjectType  Description  SecurityGroup  DerivationType  DerivType:Initial&  DerivType:Default&  DerivType:Derived&  DerivType:Lookup&  DerivType:Alias&  DerivType:Indicator&  DerivType:Soundex&  DerivType:Association&  DerivType:ForeignKey&  ExpiryDuration  EvalTiming  TableName  ColumnName  RowKey  InitialState  FactState:Optional&  FactState:OptionalReadOnly&  FactState:NotAllowed&  FactState:NotAllowedReadOnly&  FactState:Mandatory&  FactState:MandatoryReadOnly&  FactState:Null&  FactState:Encrypted&  FactState:Masked&  FactState:Deferred&  Usage  FactUsage:Summary&  FactUsage:Detail&  FactUsage:Searching&  FactUsage:Keyword&  FactUsage:Soundex&  FactUsage:Archive&  FactUsage:Wildcard&  FactUsage:CiSearch&  FactUsage:AutoTrigger&  FactUsage:Updatable&  FactUsage:DateOnly&  FactUsage:RemotePrimaryKey&  FactUsage:StoredForeignKey&  FactUsage:ForeignKeyValue&  FactUsage:ForeignKeyValue&  FactUsage:DerivDeferred&  AttributeFlags  FactAttrib:Cached&  FactAttrib:Upper&  FactAttrib:Unique&  FactAttrib:Password&  FactAttrib:ForceExpire&  FactAttrib:ExprSortOrder&  MaxLength  Ceiling  RefClass  DisplayFormat  EditMask  Icon  Local_Fact  Foreign_Fact  AssocXref_Fact  Statuses  Key  Valid Values  StatusOID  FactState:Optional&  FactState:OptionalReadOnly&  FactState:NotAllowed&  FactState:NotAllowedReadOnly&  FactState:Mandatory&  FactState:MandatoryReadOnly&  FactState:Null&  FactState:Encrypted&  FactState:Masked&  Example  The following code displays the attributes for a fact:  {<br>    var lFactAttribs?{};<br>    try {<br>        lFactAttribs?{} := FactFetchDetails?{}(Fact:Case_Action.Type@);<br>        print('FactDef HASH contents:');<br>        print(lFactAttribs?{});<br>    } except {<br>        print('FactFetchDetails failed');<br>    }<br>}  The following is sample output from the above code example:  { AssocXref_Fact => , AttributeFlags => 0, Ceiling => 100, Class => 0x00010000000000000000000000000069,<br>ColumnName => i5, DerivationType => 2, Description => , DisplayFormat => ###.##, DisplayName => Type, EditMask => ,<br>EvalTiming => 1, ExpiryDuration => , FactKey => 100, Foreign_Fact => 0x0002000000000000000000000000025D, Icon => ,<br>InitialState => 32, Local_Fact => , MaxLength => 0, Name => Type, RefClass => 0x0001000000000000000000000000007D, <br>RowKey => 1, SecurityGroup => 0x00360000000000000000000000000002, Statuses => { 0x00400000000000000000000000000003 => 33 },<br>TableName => Case_Action_Val, Type => 11, Usage => 7 }  "},{"id":128,"title":"FactStateGet&amp;()","url":"38216.htm","text":"Syntax  FactStateGet&(      ObjOid@,      FactOid@)  Description  Retrieves the state of a fact.  Parameters  Parameter  Description  ObjOid@  In:  Object ID of the object to which the fact belongs.  FactOid@  In:  Object ID of the fact for which to retrieve the state of the fact.  Returns  Integer describing the state of the fact if successful; otherwise, an exception is raised.  Remarks  The returned integers are represented as constants and the possible constants for the fact state are:  FactState:Optional&  FactState:OptionalReadOnly&  FactState:NotAllowed&  FactState:NotAllowedReadOnly&  FactState:Mandatory&  FactState:MandatoryReadOnly&  FactState:Null&  FactState:Encrypted&  FactState:Masked&.  FactState:Deferred&.  Example  The following code tests if the current user has write permission on the lFactOid@ fact on the lObjOid@ object:  {      var lFactState&;      var lObjOid@ := to_objid@(100, 101);      val lFactOid@ := to_objid@(2, 84);      try {          lFactState& := FactStateGet&(lObjOid@, lFactOid@);      if ((lFactState& & FactState:OptionalReadOnly&) =  FactState:OptionalReadOnly&) {          print(\"ERROR: You do not have write permission on the fact\");      }      } except {          print(\"FactStateGet& failed with error:\");          print(error_message());      }  }  "},{"id":129,"title":"FetchAllObjects?[]()","url":"53103.htm","text":"Syntax  FetchAllObjects?[](      const ClassId&)  Description  Retrieves non-obsolete objects from a specified static class.  Parameters  Parameter  Description  ClassId&  ID of the static class.  Returns  Array of hashes containing the ObjectKey, Name, and DisplayName of the returned object.  An exception is raised if the specified class is not static or admin static, or does not have a default search defined.  Example  {<br>    var Result?[];<br>    var i&;<br>    var ClassId& :=(ObjectKeyGet&(Class:Priority@);      # Retrieve all Priority objects<br>    try{<br>      Result?[] := FetchAllObjects?[](ClassId&);        for (i&; i&<length(Result?[]); ++i&) {<br>         print(Result?[i&]);<br>      }<br>    } except {<br>      print('Failed to retrieve static objects');<br>    }<br>}  "},{"id":130,"title":"FocusField&amp;()","url":"58756.htm","text":"Syntax  FocusField&(      ClientID$,      OID@,      Fact@)  Description  Focuses on a field in the active view.  Parameters  Parameter  Description  ClientID$  ID of the client to which notification is sent.  If null$ is passed, the client calling the function is the target client.  OID@  OID or class ID of the object on which to focus.  Fact@   OID of the fact on which to focus.  Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the focus command was successfully executed.  Remarks   Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  All sections and groups on the active view and tab are searched for the fact to focus on.   The fields are searched in the order in which the layout groups are displayed on the view from left to right and top to bottom.   The first editable field found is focused on.  If no matching editable field exists, the first matching read-only field is focused on.   Example  Create a case and focus the source drop-down list in the Detail section:  {<br>    # Open a new case view of type &#8216;C&#8217;.<br>    var myClass@ := Class:Case@;<br>    var myType@ := StaticObj@('Case_Type', 'C');      OpenViewOfType&(null$, myClass@, myType@);<br>    # Focus the Source field in the Detail Section.<br>    var myFact@ := Fact:Case.How_Recieved;<br>    FocusField&(null$, myClass@, myFact@);<br>}  "},{"id":131,"title":"FocusFieldOnDetail&amp;()","url":"39899.htm","text":"Syntax  FocusFieldOnDetail&(      ClientID$,      OID@,      Fact@)  Description  Focuses on a field in the Details section in the active view.  Parameters  Parameter  Description  ClientID$  ID of the client instance to which the notification is sent.  Pass a null string to indicate the current client.  OID@  OID or class ID of a specific object on which to focus.  Fact@  OID of the fact on which to focus.  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the focus command was successfully executed.  Remarks  Call the function from an On Client Request trigger.  Example  Create a case, and in the Details section, focus on the Status fact:  {<br>    # create a new case of type C<br>    var myClass@ := Class:Case@;<br>    var myType@ := StaticObj@('Case_Type', 'C');<br>    OpenViewOfType&(null$, myClass@, myType@);      # Focus the Status field on Case Details section.<br>    var myFact@ := Fact:Case.Status@;<br>    FocusFieldOnDetail&(null$, myClass@, myFact@);<br>}  "},{"id":132,"title":"FocusFieldOnGroup&amp;()","url":"39900.htm","text":"Syntax  FocusFieldOnGroup&(      ClientID$,      Group@,      OID@,      Fact@)  Description  Focuses on a field in specified layout group in the active view.  Parameters  Parameter  Description  ClientID$  ID of the client instance to which notification is sent.  Pass a null string to indicate the current client.  Group@  OID of the group on which to focus.  OID@  OID or class ID of a specific object on which to focus.  Fact@  OID of the fact on which to focus.  Returns  1 if successful; otherwise, an exception is raised.  Success indicates that the asynchronous TRE call succeeded, not if the focus command was successfully executed.  Remarks  Call the function from an On Client Request trigger. When the function is called to focus on a node in a tree, an object entry trigger is always fired even if the node has been selected.  Example  Create a case and in the Details section, in the case_Details layout group, focus on the Status fact:  {<br>    # Create a case of type C<br>    var myClass@ := Class:Case@;<br>    var myType@ := StaticObj@('Case_Type', 'C');<br>    OpenViewOfType&(null$, myClass@, myType@);      # Focus the Status field in the Case Details layout group <br>    var myGroup@ := StaticObj@('Layout_Group_Template', 'case_Details');<br>    var myFact@ := Fact:Case.Status@;<br>    FocusFieldOnGroup&(null$, myGroup@, myClass@, myFact@);<br>}  "},{"id":133,"title":"FocusFieldonTab&amp;()","url":"58757.htm","text":"Syntax  FocusFieldonTab&(      ClientID$,      Tab@,      OID@,      Fact@)  Description  Focuses on a field on a tab in the active view.  Parameters  Parameter  Description  ClientID$  ID of the client to which notification is sent.  If null$ is passed, the client calling the function is the target client.  Tab@  OID of the tab on which to find the fact.  If the fact does not exist on the tab, the first editable field on the tab is focused on.  If null@ is passed, only the active tab is searched for the fact.  Use StaticObj@() to get the OID of the tab.  Tabs are in the Layout_Manager class, and the tab name is displayed in the Interface Design Tool.  OID@  OID or class ID of a specific object on which to focus.  Fact@  OID of the fact on which to focus.  Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the focus command was successfully executed.   Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  The fields are searched in the order in which the layout groups are displayed on the view from left to right and top to bottom.   Only the specified or active tab (if null@ is passed for the tab parameter) is searched.  The first editable field found is focused on.  If no matching editable field exists, the first matching read-only field is focused on.   Example  Focus on a field on the Contacts tab:  {<br>    # Open a new case view of type &#8216;C&#8217;<br>    var myClass@ := Class:Case@;<br>    var myType@ := StaticObj@('Case_Type', 'C');<br>    OpenViewOfType&(null$, myClass@, myType@);      # Focus the SearchFact field on the contacts tab.<br>    var myFact_Class@ := Class:Contact@;<br>    var myFact@ := Fact:Contact.SearchFact@;<br>    var myTabFocus@ := StaticObj@('Layout_Manager', 'ContactsTab');<br>    FocusFieldOnTab&(null$, myTabFocus@, myFact_Class@, myFact@);<br>}  "},{"id":134,"title":"FocusTab&amp;()","url":"39901.htm","text":"Syntax  FocusTab&(      ClientID$,      Tab@)  Description  Focuses on the specified tab in the active view.  Parameters  Parameter  Description  ClientID$  ID of the client instance to which the notification is sent.  Pass a null string to indicate the current client.  Tab@  OID of the tab on which to focus.  When null@ is passed, the first editable tab on the active tab of the view is focused on.  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the focus command was successfully executed.  Remarks  Call the function from an On Client Request trigger.  Example  In an open case, focus on the Action tab, and invoke the menu operation to create the Fix Fault action type:  {<br>    # ensure the Action tab is the active tab before trying to invoke a button operation.<br>    var myMenus$[];<br>    var myoperation@ := StaticObj@('Operation', 'Fix Fault');<br>    var myTab@ := StaticObj@('Base_Tab', 'Case.Action');<br>    FocusTab&(null$, myTab@);<br>    InvokeButton&(null$, myOperation@, myMenus$[]);<br>}  "},{"id":135,"title":"FocusView&amp;()","url":"39902.htm","text":"Syntax  FocusView&(      ClientID$,      Class@)  Description  Focuses on the view for the specified class.  Parameters  Parameter  Description  ClientID$  ID of the client instance to which notification is sent.  Pass a null string to indicate the current client.  Class@  OID of the class of the view on which to focus.  If the class is unavailable, the active view is not changed.  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the focus command was successfully executed.  Remarks  Call the function from an On Client Request trigger.  Example  Focus on the Case view, then update the value in the Priority fact:  {<br>    # ensure the case view is the active view before trying to populate a field.<br>    var myClass@:= Class:Case@;<br>    var myFact@ := Fact:Case.Priority;<br>    var myVal$ := 'Standard';<br>    FocusView&(null$, myClass@);<br>    PopulateField&(null$, myClass@, myFact@, myVal$);<br>}  "},{"id":136,"title":"FocusViewWithObject&amp;()","url":"39904.htm","text":"Syntax  FocusViewWithObject&(      ClientID$,      Object@)  Description  Focuses on the view that matches the specified object.  Parameters  Parameter  Description  ClientID$  ID of the client instance to which notification is sent.  Pass a null string to indicate the current client.  Object@  OID of the root object on which to focus.  For example, if the OID of an action is specified, the focus is on the Action view, not the Case view where an association to the OID exists.  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the focus command was successfully executed.  Remarks  Call the function from an On Client Request trigger.  Example  Invoke the operation, focus on the Case view on object C/45, and update the Priority fact:  {<br>    # Ensure a particular case is the active view before populating a fact.<br>    var caseOid@ := ObjectGetByName@(Class:Case@, Fact:Case.Name@, 'C/45', 0);<br>    if (caseOid@ != null@)<br>    {<br>        FocusViewWithObject&(null$, caseOid@);<br>        var myFact@ := Fact:Case.Priority;<br>        var myVal$ := 'Standard';<br>        PopulateField&(null$, caseOID@, myFact@, myVal$);<br>    }<br>}  "},{"id":137,"title":"GadgetChartReady&amp;()","url":"51297.htm","text":"Syntax   GadgetChartReady&(      GraphId$,      Data?[],      Labels$[],      Colours$[],      XAxisLabels$[])  Description  Retrieves parameters and data to be displayed as a graph in Process Engine web client.  Parameters  Parameter  Description  GraphId$  ID of the Process Engine web client gadget for which data is retrieved.  Data?[]  Data retrieved for displaying in a graph.  Labels$[]  Array of strings representing the graph labels.  Colours$[]  Array of colours for the graph (optional).  XAxisLabels$[]  Labels for displaying the X-axis of the graph (mandatory only for axis graphs).  Returns  1 if successful; otherwise, an exception is raised.  Remarks  This is a wrapper function for the GraphReady& function.  Example  The following example collects data for a Graph gadget and is called by a user-defined function after the data is collected:  web_PieOpenCasePriority&(GraphId$) =<br>{<br>    var i&;<br>    var data#{};<br>    var result?[];<br>    var casePriority@;<br>    var keys$[];<br>    var priorityName$;      # Execute search to get open cases for user<br>    var cases@[] := ObjectSearch@[](Search:Case.My_Open_Cases@, [], []);<br>    # Loop through cases and get count per priority<br>    for (i& := 0; i& < length(cases@[]); ++i&) {          # get case priority<br>        casePriority@ := ObjectFactGet@(cases@[i&], Fact:Case.Priority@);<br>        priorityName$ := ObjectFactGet$(casePriority@, Fact:Priority.Display_Name@);          # Increment count for priority<br>        data#{priorityName$}++;<br>    }      keys$[] := keys(data#{});<br>    for (i& := 0; i& < length(keys$[]); ++i&) {<br>        result#[i&] := data#{keys$[i&]};<br>    }      GadgetChartReady&(GraphId$, result?[], keys$[], null$[], null$[]);  <br>}  "},{"id":138,"title":"GetObjDisplayName$()","url":"58343.htm","text":"Syntax  GetObjDisplayName$(      objOid@)  Description  Retrieves display name of fact-based and non-fact-based objects.  Parameter  Parameter  Description  objOid@  Object ID of the object whose display name is retrieved.  Returns  Object display name.  Example  The following example retrieves the display names of a Calendar object and a Case object.  {<br>    var ObjDisplayName$;<br>    var objOid@ :=to_objid@(9,11);      # Retrieve the display name of Calendar object 11<br>    ObjDisplayName$:=GetObjDisplayName$(objOid@);<br>    print(ObjDisplayName$);      # Retrieve the display name of Case object 1<br>    objOid@ :=to_objid@(100,1);<br>    ObjDisplayName$:=GetObjDisplayName$(objOid@);<br>    print(ObjDisplayName$);<br>}  "},{"id":139,"title":"GetObjName$()","url":"58342.htm","text":"Syntax  GetObjName$(      objOid@)  Description  Retrieves the name of fact-based and non-fact-based objects.  Parameter  Parameter  Description  objOid@  Object ID of the object whose name is retrieved.  Returns  Object name.  Example  The following example retrieves the names of a Calendar object and a Case object.  {<br>    var ObjName$;<br>    var objOid@ :=to_objid@(9,11);      # Retrieve the name of Calendar object 11<br>    ObjName$:=GetObjName$(objOid@);<br>    print(ObjName$);      # Retrieve the name of Case object 1<br>    objOid@ :=to_objid@(100,1);<br>    ObjName$:=GetObjName$(objOid@);<br>    print(ObjName$);<br>}  "},{"id":140,"title":"InvokeButton&amp;()","url":"58762.htm","text":"Syntax  InvokeButton&(      ClientID$,      Operation@,      SubMenus$[])  Description  Invokes a button operation in Process Engine web client.  Parameters  Parameter  Description  ClientID$  ID of the client to which notification is sent.  If null$ is passed, the client calling the function is the target client.  Operation@  OID representing the button operation to run.  SubMenus$[]  Array of strings containing any sub-menu items.  Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the invoke command was successfully executed.  Remarks   Call the function from an On Client Request trigger to guarantee Process Engine web client to display the page.  In Process Engine web client, the button to be invoked depends on the page displayed.  If the Home page is displayed, the button to be invoked can be:  Displayed in the Global bar  Available in a Home page gadget whether or not the gadget is displayed on the Home page.  If the Details page is displayed, the button to be invoked can be:  An operation in the Main Menu  An operation in the Tab Menu of the displayed tab  An operation in the Global bar  The Save and Cancel buttons on the Context bar.  The button operation is only invoked if the button is enabled at the time of execution.  The Process Engine web client Home page can be displayed by calling the OpenView&() function with the NULL or 0 class key.  Use a var myMenuItems$[]; declaration if no sub-menu items exist.   The button operation is only invoked if the button is visible on the toolbar and enabled at the time of execution.   Example  Invoke a button:  {<br>    # Create a follow up call action<br>    var myButton@ := StaticObj@('Operation', 'New Action43');<br>    var myMenuItems$[] := [&#8216;TaskAction&#8217;, &#8216;Follow Up Call&#8217;];<br>    InvokeButton&(null$, myOperation@, myMenuItems$[]);<br>}  "},{"id":141,"title":"InvokeMenu&amp;()","url":"39905.htm","text":"Syntax  InvokeMenu&(      ClientID$,      Operation$,      SubMenus$[])  Description  Invokes a menu operation if the relevant button is visible on the Context bar and enabled at the time of execution.  Parameters  Parameter  Description  ClientID$  ID of the client instance to which notification is sent.  Pass a null string to indicate the current client.  Operation$  Main menu name on Main Frame.  A main menu name must be specified if sub-menu items are specified.  SubMenus$[]  Any sub-menu items.  The last sub-menu item is the operation to invoke. Use a var myMenuItems$[] declaration if no sub-menu items exist.  Returns  1 if successful; otherwise, an exception is raised.  This result signifies whether the asynchronous TRE call succeeded, not if the invoke command was successfully executed.  Remarks  Call the function from an On Client Request trigger.  Example  Invoke the Update Cache button on the Process Engine web client Context bar:  {<br>    # Force a cache update if possible.<br>    var myMenu$ := 'Options';<br>    var mySubMenuItems$[] := ['Update Cache'];<br>    InvokeMenu&(null$, myMenu$, mySubMenuItems$[]);<br>}  "},{"id":142,"title":"Message&amp;()","url":"9391.htm","text":"Syntax  Message&(      user@,      message@,      params$[])  Description  Sends an information message to a user displayed in a message box.  Parameters  Parameter  Description  user@  User to whom the message should be sent.  message@  Message to be displayed.  params$[]  Parameters to be substituted into the message.  Returns  Null if successful; otherwise, an exception is raised.  Remarks  The server sends the message to the client and continues processing the EPM script, regardless of whether the user has acknowledged the message.  Example  Send an information message to the logged-in user who caused the trigger to execute:  {<br>    var thisUser@ := to_blob(ParamValue?(Parameter:User@));<br>    Message&(thisUser@, Message:InfoMsg@, []);<br>}  "},{"id":143,"title":"ObjectFactDerive?()","url":"58914.htm","text":"Syntax  ObjectFactDerive?(      Object@,      fact@)  Description  Forces the re-derivation of the fact and returns the value.  The following table lists variations of this function that are used to determine the data type of the result.  [[Table:58914-1]]  Function Variations  Variation  Data Type of Result  ObjectFactDerive?()  Unknown  ObjectFactDerive&()  Long  ObjectFactDerive$()  Text  ObjectFactDerive#()  Double  ObjectFactDerive~()  Date  ObjectFactDerive@()  Blob  ObjectFactDerive@[]()  Array of blobs  ObjectFactDeriveAsKey&[]()  Array of longs  Parameters  Parameter  Description  Object@  OID of the object from which the fact is retrieved.  fact@  OID of the fact to be derived.  Returns  Derived value of the fact, if successful; otherwise, an exception is raised.  Remarks  The function can only be used for facts with a derivation type of:  Derived  Reference Subset (that are not stored).  None.  It is recommended that this function only be used in post commit triggers.  For non-stored association reference subset facts, the following apply:  Primary keys for keyless shared classes are generated by Process Engine, so re-deriving the fact results in a new set of keys being generated for the associated objects.  Generating the new set of keys can impact performance and cause Process Engine web client to refresh.  Referenced objects belonging to external classes cannot be re-derived using ObjectFactDerive?().  It is not possible to re-derive facts if the referenced objects are part of a transaction.  Example  With a trigger on the Issue class, re-derive the Boolean_Fact_Text_Equivalent fact:  {<br>    var thisIssue@ := CurrentObjectGet@();<br>    var case@ := to_blob(ObjectFactGet?(thisIssue@, Fact:Issue.Case@));<br>    var val? := ObjectFactDerive?(case@,<br>        Fact:Case.Boolean_Fact_Text_Equivalent@);<br>}  "},{"id":144,"title":"ObjectFactGet?()","url":"9421.htm","text":"Syntax  ObjectFactGet?(      Object@,      fact@)  Description  Returns the value of a fact for a specific object.  The following table lists variations of this function that are used to determine the data type of the result.  Function Variations  Variation   Data type of Result  ObjectFactGet?()  Unknown  ObjectFactGet&()  Long  ObjectFactGet$()  Text  ObjectFactGet#()  Double  ObjectFactGet~()  Date  ObjectFactGet@()  Blob  ObjectFactGet@[]()  Array of blobs  ObjectFactGetAsKey&[]()  Array of longs  CSG International recommends caution in the use of the ObjectFactGet?() function for updating unprotected text facts with values retrieved from encrypted and masked facts. For security reasons, subsequent use of the retrieved data must be carefully considered, as protected data could be displayed to a user without permissions to view it.  Parameters  Parameter  Description  Object@  OID of the object from which the fact is retrieved.  fact@  OID of the fact to retrieve.  Returns  Fact's value; otherwise, an exception is raised if no object is retrieved for a local class.  For shared classes, if an object does not exist, it is assumed the object was deleted from Convergent Billing, a dummy obsolete object is created in the Process Engine, and no exception raised.  Remarks  This built-in function can return any of the valid mappings (see the Configuration Guide for Singleview Process Engine).  Data is retrieved from memory if the object is within the current transaction context.  This means that even if the changes are not yet committed, they are available to the EPM script.  If the fact value returned is for an obsolete object, the value is determined by the fact's definition.  For example, if the fact has a default or derived derivation, the value from the expression is returned and implies an object exists, and no error returned.  In this instance, a value was returned for an obsolete object, which may be misleading.  Example  With a trigger on the Issue class, get the Case Type Name value of the case associated with the current issue, and print it to stdout on the server:  {<br>    var thisIssue@ := CurrentObjectGet@();<br>    var case@ := to_blob(ObjectFactGet?(thisIssue@,<br>        Fact:Issue.Case@));<br>    var caseType@ := to_blob(ObjectFactGet?(case@,<br>        Fact:Case.Type@)); <br>    var caseTypeName$ :=<br>        to_string(ObjectFactGet?(caseType@,<br>                               Fact:Case_Type.Name@));<br>    print('Case_Type.Name = ' + caseTypeName$);<br>}  "},{"id":145,"title":"ObjectFactGetOld?()","url":"9423.htm","text":"Syntax  ObjectFactGetOld?(      Object@,      fact@)  Description  This function is similar to ObjectFactGet?(), except that it returns the value of a fact from the public cache.  This means the value returned is the fact value before uncommitted changes were made to the fact. For example, if an integer fact is changed from 1 to 2 and the change has not yet been committed, 1 is returned.  The following table lists variations of this function that are used to determine the data type of the result.  Function Variations  Variation   Data Type of Result  ObjectFactGetOld?()  Unknown  ObjectFactGetOld&()  Long  ObjectFactGetOld$()  Text  ObjectFactGetOld#()  Double  ObjectFactGetOld~()  Date  ObjectFactGetOld@()  Blob  ObjectFactGetOld@[]()  Array of blobs  ObjectFactGetOldAsKey&[]()  Array of longs  CSG International recommends that:  Caution be exercised when using the ObjectFactGet?() function for updating unprotected text facts with values retrieved from encrypted and masked facts. For security reasons, subsequent use of the retrieved data must be carefully considered, as protected data could be displayed to a user without permissions to view it.  ObjectFactGetOld?() function must not be used for non-stored facts because there is no guarantee the value returned will be accurate.  Parameters  Parameter  Description  Object@  OID of the object from which the fact is retrieved.  fact@  OID of the fact to retrieve.  Returns  Fact's previous value as an unknown data type; otherwise, an exception is raised.  Remarks  This function can only be called if the object is currently part of a transaction, that is, it is being created or updated; otherwise the ObjectFactGet?() function must be used.   If the object is new, there is no old value. In this case a Null value is returned for all facts.   Example  With a trigger on the Case class, get the old value of the Integer_Fact from the current case, and if it is less than the specified value, raise an error:  {<br>    # ensure that Integer_Fact cannot be set to # lower value<br>    var case@ := CurrentObjectGet@();<br>    var previousValue& := ObjectFactGetOld&(case@, Fact:Case.Integer_Fact@);<br>    var currentValue& := ObjectFactGet&(case@, Fact:Case.Integer_Fact@);<br>    if (currentValue& < previousValue&) {<br>        error@ := Message:CannotDecreaseCaseIntegerFact@;<br>        RaiseError&(error@, [to_string(previousValue&),<br>                             to_string(currentValue&)]);<br>    }<br>}  "},{"id":146,"title":"ObjectFactGetOldSecure?()","url":"52072.htm","text":"Syntax  ObjectFactGetOldSecure?(      Object@,      fact?,      includeObsolete&)  Description  This function is similar to ObjectFactGetOld?(), except that this is a secure function.  The following table lists variations of this function that are used to determine the data type of the result.  Function Variations  Variation   Data Type of Result  ObjectFactGetOldSecure?()  Unknown  ObjectFactGetOldSecure&()  Long  ObjectFactGetOldSecure$()  Text  ObjectFactGetOldSecure#()  Double  ObjectFactGetOldSecure~()  Date  ObjectFactGetOldSecure@()  Blob  ObjectFactGetoldSecure@[]()  Array of blobs  ObjectFactGetOldSecureAsKey&[]()  Array of longs  CSG International recommends caution in the use of the function for updating unprotected text facts with values retrieved from encrypted and masked facts. For security reasons, subsequent use of the retrieved data must be carefully considered, as protected data could be displayed to a user who does not have permission to view it.  Parameters  Parameter  Description  Object@  OID of the object from which the fact is retrieved.  fact?  OID of the fact to retrieve.  Fact OID or Fact Name may be specified.  includeObsolete&  Specifies whether the fact value of obsolete object should be returned.  A value of zero results in an error being raised, if the requested object is obsolete.   Returns  Fact's value; otherwise, an exception is raised if no object is retrieved for a local class.  For shared classes, if an object does not exist, it is assumed the object was deleted from Convergent Billing, a dummy obsolete object is created in the Process Engine, and no exception raised.  Remarks  The function is used by APIs, and returns reference facts as integers representing the object key and reference subset facts as arrays of integers. For API usage it is more efficient to process integer keys, especially for generated functions for external definitions.  This behaviour is the same as ObjectFactGetOld?(), except:  Full security is enforced.  A check for obsolete objects can be controlled by the IncludeObsolete parameter.  Example  With a trigger on the Issue class, get the Case Type Name value of the case associated with the current issue, and print it to stdout on the server:  {<br>    var thisIssue@ := CurrentObjectGet@();<br>    var case@ := to_blob(ObjectFactGetOldSecure?(thisIssue@,<br>        Fact:Issue.Case?, TRUE));<br>    var caseType@ := to_blob(ObjectFactGetOldSecure?(case@,<br>        Fact:Case.Type?, TRUE)); <br>    var caseTypeName$ :=<br>        to_string(ObjectFactGetOldSecure?(caseType@,<br>                               Fact:Case_Type.Name?, TRUE));<br>    print('Case_Type.Name = ' + caseTypeName$);<br>}  "},{"id":147,"title":"ObjectFactGetSecure?()","url":"52071.htm","text":"Syntax  ObjectFactGetSecure?(      Object@,      fact?,      includeObsolete&)  Description  Returns reference facts as integers representing the object key and reference subset facts as arrays of integers.    The following table lists variations of this function that are used to determine the data type of the result.  Function Variations  Variation   Data Type of Result  ObjectFactGetSecure?()  Unknown  ObjectFactGetSecure&()  Long  ObjectFactGetSecure$()  Text  ObjectFactGetSecure#()  Double  ObjectFactGetSecure~()  Date  ObjectFactGetSecure@()  Blob  ObjectFactGetSecure@[]()  Array of blobs  ObjectFactGetSecureAsKey&[]()  Array of longs  CSG International recommends caution in the use of the function for updating unprotected text facts with values retrieved from encrypted and masked facts. For security reasons, subsequent use of the retrieved data must be carefully considered, as protected data could be displayed to a user who does not have permission to view it.  Parameters  Parameter  Description  Object@  OID of the object from which the fact is retrieved.  fact?  OID of the fact to retrieve. Fact OID or Fact Name may be specified.  includeObsolete&  Specifies whether the fact value of the obsolete object should be returned.  A value of zero results in an error being raised, if the requested object is obsolete.   Returns  Fact's value; otherwise, an exception is raised if no object is retrieved for a local class.  For shared classes, if an object does not exist, it is assumed the object was deleted from Convergent Billing, a dummy obsolete object is created in the Process Engine, and no exception raised.  Remarks  The function is used by APIs, and returns reference facts as integers representing the object key and reference subset facts as arrays of integers. For API usage it is more efficient to process integer keys, especially for generated functions for external definitions.  This behaviour is the same as ObjectFactGet?(), except that:  Full security is enforced.  A check for obsolete objects can be controlled by the IncludeObsolete parameter.  Example  With a trigger on the Issue class, get the Case Type Name value of the case associated with the current issue, and print it to stdout on the server:  {<br>    var thisIssue@ := CurrentObjectGet@();<br>    var case@ := to_blob(ObjectFactGetSecure?(thisIssue@,<br>        Fact:Issue.Case?, TRUE));<br>    var caseType@ := to_blob(ObjectFactGetSecure?(case@,<br>        Fact:Case.Type?, TRUE)); <br>    var caseTypeName$ :=<br>        to_string(ObjectFactGetSecure?(caseType@,<br>                               Fact:Case_Type.Name?, TRUE));<br>    print('Case_Type.Name = ' + caseTypeName$);<br>}  "},{"id":148,"title":"ObjectFactNotify&amp;()","url":"58878.htm","text":"Syntax  ObjectFactNotify&(      User@,      Object@,      Facts@[])  Description  Retrieves the value of the specified facts and asynchronously sends them to the Process Engine web client.  Notifications are only sent to the Process Engine web client.  Other clients do not receive the notification.  Parameters  Parameter  Description  User@  User to whom the fact values should be sent.  If Null, the facts are sent to the current Process Engine session.  Object@  OID of object for which to fetch fact values.  Facts@[]  List of facts to send for the object.  Returns  Null if successful; otherwise, an exception is raised.  Example  Retrieve current Contact object values for the Official_Name, Surname, and Firstname facts, and send values in messages to the current Process Engine session:  {<br>    var myFacts@[];<br>    var myContact@ := CurrentObjectGet@();<br>    myFacts@[0] := Fact:Contact.Official_Name@;<br>    myFacts@[1] := Fact:Contact.Surname@;<br>    myFacts@[2] := Fact:Contact.Firstname@;<br>    ObjectFactNotify&(null@, myContact@, myFacts@[]);<br>}  "},{"id":149,"title":"ObjectFactSort@[]()","url":"53512.htm","text":"Syntax  ObjectFactSort@[](      Class@,      Facts&[],      var FactSeqNr&[])  Description  Sorts facts into their default processing order.  Parameters  Parameter  Description  Class@  Class that the specified fact belongs to.  Facts&[]  Fact keys to sort.  FactSeqNr&[]  Sequence numbers for each fact in Facts@[] in the same order.  Returns  Fact IDs sorted by default processing order.  Remarks  Facts are processed in a default order unless configured differently.  The default processing order places facts in the following groups:   AssocRefA, AssocRefB, and Type facts  Facts with no dependencies (and not group 1)   Facts with dependencies on other derived facts   Facts with dependencies on business rules or cross validations   Facts with dependencies on triggers   Facts that define a security group or status.  If a fact has properties of multiple groups, it is placed in the later grouping.  For example, a type fact with dependencies on triggers is placed in group 5.  Obsolete dependencies are not treated as dependencies.  For example, a name fact with an obsolete trigger dependency is placed in group 2.  Business rules that are marked Trigger on Commit Only are ignored because they are not executed during an insert or update.  The only triggers considered are After Fact Update and After Group Update.  All other triggers are ignored.   Facts in groups 4 and 5 are ordered within their group so that the facts belonging to the business rule or trigger with the lowest key is placed earlier in the group.  For example, if fact X belongs to two trigger groups where the triggers have keys 1234 and 2345, and fact Y belongs to two trigger groups where the triggers have keys 2345 and 3456, fact X is placed before fact Y.  Example  {<br>  objid& := Class:Issue@;<br>  fact1a& := ObjectKeyGet&(Fact:Issue.Case@);           # RefA<br>  fact2& := ObjectKeyGet&(Fact:Issue.Last_Update@);     # No dependencies<br>  fact3& := ObjectKeyGet&(Fact:Issue.Name@);            #Dependent on other derived facts<br>  fact4a& := ObjectKeyGet&(Fact:Issue.Fact236T1@);      # In business rule<br>  fact5a& := ObjectKeyGet&(Fact:Issue.Expression@);     # After_Group_Update trigger set earlier<br>  fact5b& := ObjectKeyGet&(Fact:Issue.Description@);    # After_Fact_Update trigger set earlier<br>  fact6a& := ObjectKeyGet&(Fact:Issue.Security_Group@); # Security group<br>  fact6b& := ObjectKeyGet&(Fact:Issue.Status@);         # Status    sortedFacts@[] := ObjectFactSort@[](objid@, [fact6a&, fact6b&, fact5a&, fact3&, fact1a&, fact5b&, fact4a&, fact2&], seqNrs&[]);    if (is_defined(sortedFacts@[])) {<br>    print('');<br>    for (i& := 0; i&< length(sortedFacts@[]); ++i&) {<br>      lFactAttribs?{} := FactFetchDetails?{}(sortedFacts@[i&]);<br>      print('sortedFacts[' + to_string(i&) + '] = ' + to_string(lFactAttribs?{'Name'}));<br>    }<br>  }    print(seqNrs&[]);<br>}  The following is output from the above code example:  sortedFacts[0] = Case<br>sortedFacts[1] = Last_Update<br>sortedFacts[2] = Name<br>sortedFacts[3] = Fact236T1<br>sortedFacts[4] = Expression<br>sortedFacts[5] = Description<br>sortedFacts[6] = Security_Group<br>sortedFacts[7] = Status<br>[ 7, 8, 5, 3, 1, 6, 4, 2 ]  Sequence numbers begin at 1 while array indexes begin at 0.   "},{"id":150,"title":"ObjectFetchByName?{}()","url":"52838.htm","text":"Syntax  ObjectFetchByName?{}(      const Class$,      const Keys?{},      const FactNames$[])  Description  Retrieves the specified object.  Parameters  Parameter  Description  Class$  Class that the specified object belongs to.  Keys?{}  Search criteria that identifies the object to retrieve.  If ObjectKey is specified, the supplied value is the ID of the object, and the object is retrieved directly.  Otherwise, a search is generated using the supplied keys, which returns the object ID.  Multiple keys can be supplied to uniquely identify the object.  FactNames$[]  Fact names to retrieve for the object.  Returns  One of the following:  An unknown hash containing the requested facts as fact name and value pairs.  An 'Object not found' error if the specified object is not found, or the user has incorrect permissions.  A 'Multiple objects found' error if Keys?{} identifies multiple objects.  Remarks  The function executes all business logic associated with updating an object, and enforces full security by calling ObjectFactGetSecure?().  Example 1  Retrieve the Name, Type, and Currency facts from the object with an ID of 12 in the Case class.  {<br>    var Result?{};<br>    Result?{} := ObjectFetchByName?{}('Case', hash(['ObjectKey'], [12]),  ['Name', 'Type', 'Currency']); <br>    print(Result?{});<br>}  Example 2  Retrieve the Name, Type, and Priority facts from the object where the Name fact contains the value 'C12' in the Case class.  A search is executed to find the specified object.  {<br>    var Result?{};<br>    Result?{} := ObjectFetchByName?{}('Case', hash(['Name'], ['C12']), ['Name', 'Type', 'Priority']); <br>    print(Result?{});<br>}  "},{"id":151,"title":"ObjectGetByName@()","url":"37926.htm","text":"Syntax  ObjectGetByName@(      ClassOid@,      FactOid@,      ObjectName$)  Description  Retrieves the ID of the object with the specified value (ObjectName$) for the specified text fact (FactOid@) and its class object ID (ClassOid@).  Parameters  Parameter  Description  ClassOid@  OID of the class in which to look up the object.  Specify the CLS_FACT constant to use the ObjectName$ parameter to retrieve facts objects.  The OID of the class is not mandatory when retrieving fact-based objects.  FactOid@  OID of the fact in which to look up the value of ObjectName$ in and must reference a text fact.  If null@ is specified, the Name fact of the given class is used. null@ is usually specified for FactOid@.  ObjectName$  Name of the object to look up.  If CLS_FACT is specified in the ClassOid@ parameter, ObjectName$ must be specified using the format Class.Fact to retrieve a fact object (for example, Contact.Account_Balance).  It is valid to specify a null$ or empty string.  Returns  OID of the found object.  If the object is not found, the function call is successful, but no object is returned and result is null@.  If more than one object is found, an exception is raised.  Remarks  The function can be used for both non-fact-based and fact-based classes, but excludes remote keyless classes.  If the FactOid@ and ObjectName$ parameters are null, the function searches for an object that has an empty Name fact.  If the object belongs to a remote keyless class, an exception is raised and an error message is registered.  The exception may be caught in a try-except expression, if necessary.  Examples  Retrieve a fact object (for example, the Account_Balance fact object in the Contact class):  {<br>    var ResultOid@;<br>    var ClassOid@;<br>    try{<br>        # Get the 'Contact' object's 'Account_Balance' fact<br>        ResultOid@ := ObjectGetByName@(Class:Fact@, null@, 'Contact.Account_Balance');<br>        if (ResultOid@ != null@){<br>            print(to_string(ResultOid@));<br>            print('ObjectGetByName successful');<br>        } else {<br>            print('Object not found');<br>        }<br>    }except {<br>            print('ObjectGetByName failed');<br>            print(error_message());<br>    }<br>}  Retrieve a non-fact-based object (for example, the Case class object):  {<br>    var ResultOid@;<br>    var ClassOid@;<br>    try{<br>        # Get the class object by name 'Case'<br>        ResultOid@ :=ObjectGetByName@(Class:Class@, null@, 'Case');<br>        if (ResultOid@!=null@){<br>            print(to_string(ResultOid@));<br>            print('ObjectGetByName successful');<br>        } else {<br>            print('Object not found');<br>        }<br>    } except {<br>            print('ObjectGetByName failed');<br>            print(error_message());<br>    }<br>}  Retrieve a fact-based object (for example, the object in the Language class where ISO_Code equal 'en'):  {<br>    var ResultOid@;<br>    var ClassOid@;<br>    try{<br>        # Get the language object where ISO_Code equals english<br>        ResultOid@ :=ObjectGetByName@(null@, Fact:Language.ISO_Code@, 'en');<br>        if (ResultOid@!=null@){<br>            print(to_string(ResultOid@)); <br>            print('ObjectGetByName successful');<br>        } else {<br>            print('Object not found');<br>        }<br>    } except {<br>            print('ObjectGetByName failed');<br>            print(error_message());<br>    }<br>}  Retrieve a dynamic object (for example, the Case object):  {<br>    var ResultOid@;<br>    var ObjOid@;<br>    try{<br>        # Get the case object by name 'C\\51'<br>        ResultOid@ :=ObjectGetByName@(null@, Fact:Case.Name@, 'C\\51');<br>        if (ResultOid@!=null@){<br>            print(to_string(ResultOid@));<br>            print('ObjectGetByName successful');<br>        } else {<br>            print('Object not found');<br>        }<br>    } except {<br>        print('ObjectGetByName failed');<br>        print(error_message());<br>    }<br>}  "},{"id":152,"title":"ObjectInsert@()","url":"9425.htm","text":"Syntax  ObjectInsert@(      class@,      facts@[],      factValues?[])  Description  Inserts an object of a specified class with specified fact values.    Parameters  Parameter  Description  class@  Class of new object to insert.  fact@[]  Facts to be used when creating a new object.  The object type of the facts must be compatible with the type of the object being created.  factValues?[]  Fact values to be used when creating a new object.  The fact values can be converted.  Returns  OID of the inserted object, or null or undefined if no object was created.  Null is returned if an association object is specified but the association exists; that is, a duplicate association object is not created.  Remarks  The function is commonly used to create action and issue action associations for action type triggers.  Unless specifically instructed through a call to ObjectInsert@() in the EPM, the only association object the server creates automatically is a Case_Action object where an Action object is inserted and there is a Case object in the current transaction context.    It is recommended that TempObjectCreate@() be used instead of this function when creating temporary or external objects because it is more efficient.  Example 1  With a trigger on the Case class, insert an issue of type Billing Inquiry with the issue's Case fact set to the current case:  {<br>    const thisCase@ := CurrentObjectGet@();<br>    const enquiryType@ := StaticObj@('Issue_Type', 'Billing Inquiry');<br>    const myIssue@ := ObjectInsert@(Class:Issue@,<br>                 [Fact:Issue.Case@, Fact:Issue.Type@],<br>                 [thisCase@, enquiryType@]);<br>}  Example 2  With a trigger on Order class, insert an OrderedProd object, associated with the current order object:  {<br>    const thisOrder@ := CurrentObjectGet@();<br>    const prodType@ := StaticObj@('Purchased_Item_Type', 'Base Product');<br>    const newProd@ :=  ObjectInsert@(Class:OrderedProd@,<br>    [Fact:OrderedProd.Order@, Fact:OrderedProd.ProductType_R@],<br>    [thisOrder@,prodType@]);<br>}  Example 3  This example uses reference facts instead of static objects.  With a trigger on OrderedProd class, create a new OrderedComp object and associate it with the current ordered product object:  {<br>    const thisOrdProd@ := CurrentObjectGet@();<br>    const SelProdStruc@:= to_blob(ObjectFactGet?(thisOrdProd@,      Fact:OrderedProd.SelectServ_R@));<br>    CompType@ := to_blob(ObjectFactGet?(SelProdStruc@,<br>                        Fact:ProdStruc.Type_R@));<br>    const newServ@ :=  ObjectInsert@(Class:OrderedComp@,<br>    [Fact:OrderedComp.OrderedProd@,<br>                          Fact:OrderedComp.Type_R@],<br>                         [thisOrdProd@,CompType@]);<br>}  Example 4  Insert an object into a non-association class (for example, the Action class):  {<br>    const thisOrder@ :=CurrentObjectGet@();<br>    const CustAcct@ := to_blob@(ObjectFactGet?(thisOrder@,Fact:Order.CustAcctOrd_R@));<br>    # Create the Action Object<br>    const newAction@ := ObjectInsert@(Class:Action@,<br>        [Fact:Action.Type@, Fact:Action.CustAcct_R@],<br>        [StaticObj@('Action_Type', 'Order In Progress'), CustAcct@]);<br>}  Pass the Type fact as the first fact for a non-association class, or as the second fact for an association class, because there are often many dependencies on the Type fact of a dynamic class.  Passing the Type fact as the first or second fact in the function call ensures that the Type fact is set or updated when:  Derivation expressions are parsed.  Any After Fact Update or After Group Update triggers are assessed for firing.    Passing the Type fact as the first or second fact is important when creating an After Fact Update trigger which has the Type fact set for a defined class.  If the class's Type fact is not set, and the trigger's Group fact has a dependency on another fact that is defined before the class Type fact, the After Fact Update trigger does not fire as expected.  "},{"id":153,"title":"ObjectInsertByName&amp;()","url":"52839.htm","text":"Syntax  ObjectInsertByName&(      const Class$,      const FactNames$[],      const FactValues?[])  Description  Inserts an object of a specified class with specified fact values.  Parameters  Parameter  Description  Class$  Name of the class that the specified object belongs to.  FactNames$[]  Name of the facts for which values are supplied.  FactValues?[]  Values corresponding to the supplied fact names.  Returns  ID of the newly-created object; otherwise, an error is returned.  Remarks  The function executes all business logic associated with creating an object, and enforces full security by calling ObjectInsertSecure@().  Example  Create an object of the Case class with the specified Type and Currency values.  {<br>    var Result&;<br>    Result& := ObjectInsertByName&('Case', ['Type', 'Currency'], ['C', 77.50]); <br>    print(Result&);<br>}  "},{"id":154,"title":"ObjectInsertSecure@()","url":"52035.htm","text":"Syntax  ObjectInsertSecure@(      class@,      facts@[],      factValues?[])  Description  This function is similar to ObjectInsert@(), except that this is a secure function.  "},{"id":155,"title":"ObjectKeyGet&amp;()","url":"9427.htm","text":"Syntax  ObjectKeyGet&(      Object@)  Description  Returns the key of the specified object.  The function is deterministic.  Parameter  Parameter  Description  Object@  OID of the object.  Returns  Primary key of the object if successful; otherwise, an exception is raised.  Example  Print out the object key if it is a Case object:  {<br>    print('Object is Case ' + <br>    to_string(ObjectKeyGet&( Class:Case@ )));<br>}  It is preferable to use constants as displayed in the example above; otherwise, the function is not evaluated at compile time.  "},{"id":156,"title":"ObjectPurge&amp;()","url":"45757.htm","text":"Syntax  ObjectPurge&(      Object@)  Description  Purges the specified object from the Process Engine server cache using the OID.  Parameter  Parameter  Description  Object@  OID of the object to purge.  Returns  1 if successful; otherwise, an exception is raised.  Remarks  This function performs the same task as ObjectPurgeByKey&() but uses the object OID rather than the class and object keys.  Purging an entire dynamic class impacts performance and is deprecated. A class purge request for dynamic and keyless classes is ignored. Entire static classes can be purged.  Examples  To purge all objects of the Issue_Type static class:  {<br>try {<br>    ObjectPurge&(Class:Issue_Type@);<br>    print('ObjectPurge succeeded');<br>    } except {<br>    print('ObjectPurge failed');<br>    }<br>}  To purge the Enquiry object in the Issue_Type class:  {<br>try {<br>     ObjectPurge&(StaticObj@('Issue_Type', 'Enquiry'));<br>     print('ObjectPurge succeeded');<br>     } except {<br>     print('ObjectPurge failed');<br>     }<br>}  When functions are called from Convergent Billing, Process Engine constants are not available (for example, Class:Issue_Type&).  Hard-coded constants are used instead (for example, 170).  "},{"id":157,"title":"ObjectPurgeByKey&amp;()","url":"45756.htm","text":"Syntax  ObjectPurge&(      ClassKey&,      ObjectKey&)  Description  Purges the specified object from the Process Engine server cache using the object and class keys.  Only individual dynamic and keyless objects from the public cache can be purged.  Parameters  Parameter  Description  ClassKey&  Class key of class containing the object to purge.  ObjectKey&  Object key of the object to purge.  If not provided or 0, all objects in the class are purged.  Returns  1 if successful; otherwise, an exception is raised.  Remarks  This function works in the same way as the pe_admin server utility using the -pc and -po parameters.  Purging an entire dynamic class impacts performance and is deprecated. Entire static classes can be purged.  A class purge request for a keyless or dynamic class is ignored, and results in a warning message being raised.  To flush the dynamic cache, run the following command:  pe_admin -pc <dynamic_class>   Examples  To purge all objects in a class:  {<br>    try {<br>       ObjectPurgeByKey&(170, 0);<br>       print('ObjectPurgeByKey succeeded');<br>    } except {<br>       print('ObjectPurgeByKey failed');<br>    }<br>}  To purge a specific object:  {<br>    try { <br>       ObjectPurgeByKey&(170, 2);<br>       print('ObjectPurgeByKey succeeded');<br>    } except {<br>       print('ObjectPurgeByKey failed');<br>    }<br>}  When functions are called from Convergent Billing, Process Engine constants are not available (for example, Class:Issue_Type&).  Hard-coded constants are used instead (for example, 170).  "},{"id":158,"title":"ObjectQueryByExpr?[]()","url":"52840.htm","text":"Syntax  ObjectQueryByExpr?[](      const Class$,      const Expression$,      const ParameterNames$[],      const ParameterValues?[])  Description  Executes a search based on the supplied expression.  Parameters  Parameter  Description  Class$  ID of the class representing the context class of the SXP expression.  Expression$  SXP expression used to execute the search.  The expression must be able to be converted to SQL and return a boolean value.  If the expression contains parameters they must exist in Process Engine.  Process Engine supports 10 built-in untyped parameters ({Untyped01}...{Untyped10}) that can be used when the data type of the parameter is unknown.  Untyped parameters can only be used for dynamic SXP search expressions.  ParameterNames$[]  Parameters of the expression.  ParameterValues?[]  Values to be substituted for the parameters names at runtime.  They are passed as bind variables when the search is executed.  Returns  Array of keys containing the result of the executed SQL statement.  Remarks  The function executes all business logic associated with updating an object, and enforces full security by calling ObjectSearchByExprSecure@[]().  The returned array of keys is in the format ObjectKey/object ID.  The individual keys from the returned array can be passed to the following functions:  ObjectFetchByName?{}()  ObjectRemoveByName&()  ObjectUpdateByName&()  Example  {<br>    var key?{};<br>    var i&, count&;<br>    var Result?{};<br>    var ResultStr$;<br>    var SearchResult?[]$;      SearchResult?[] := ObjectQueryByName?[]('Case', '[Priority] = {This_Priority}', '', ['This_Priority'], ['High']);      count& := count(SearchResult?[]);<br>    if (count& > 0) { <br>        for (i& := 0; i& < count&; i&++) {<br>            if (i& > 0) {<br>                ResultStr$ := ResultStr$ + ', ';<br>            }<br>            key?{} := SearchResult?[i&];<br>            Result?{} := ObjectFetchByName?{}('Case', key?{},  ['Name']);<br>            ResultStr$ := ResultStr$ + to_string(Result?{'Name'});<br>        }<br>    } else {<br>        ResultStr$ := 'No objects returned.';<br>    }<br>    print(ResultStr$);<br>}  "},{"id":159,"title":"ObjectQueryByName?[]()","url":"52841.htm","text":"Syntax  ObjectQueryByName?[](      const Class$,      const Search$,      const ParameterNames$[],      const ParameterValues?[])  Description  Executes a specified saved search.  Parameters  Parameter  Description  Class$  Class representing the context class of the search.  Search$  Name of the search.  The search can contain parameters to be substituted at runtime.  ParameterNames$[]  Names of the parameters to substitute.  They must match the parameters of the specified search.  ParameterValues?[]  Values to be substituted for the parameters names.  They are passed as bind variables when the search is executed.  Returns  Array of keys containing the result of the executed SQL statement.  Remarks  The function executes all business logic associated with updating an object, and enforces full security by calling ObjectSearchSecure@[]().  The returned array of keys is in the format 'ObjectKey' / object ID.  The individual keys from the returned array can be passed to the following functions:  ObjectFetchByName?{}()  ObjectRemoveByName&()  ObjectUpdateByName&()  Example  {<br>    var key?{};<br>    var i&, count&;<br>    var Result?{};<br>    var ResultStr$;<br>    var SearchResult?[]$;      SearchResult?[] := ObjectQueryByName?[]('Case', 'PrioritySearch', '', ['This_Priority'], ['High']);      count& := count(SearchResult?[]);<br>    if (count& > 0) { <br>        for (i& := 0; i& < count&; i&++) {<br>            if (i& > 0) {<br>                ResultStr$ := ResultStr$ + ', ';<br>            } <br>            key?{} := SearchResult?[i&];<br>            Result?{} := ObjectFetchByName?{}('Case', key?{},  ['Name']);               ResultStr$ := ResultStr$ + to_string(Result?{'Name'});<br>        }<br>    } else {<br>        ResultStr$ := 'No objects returned.';<br>    }<br>    print(ResultStr$);<br>}  "},{"id":160,"title":"ObjectRefresh&amp;()","url":"9429.htm","text":"Syntax  ObjectRefresh&(      Object@,      Recursive&)  Description  If the specified object is in the Process Engine server cache, the function refreshes all stored facts for the object to reflect changes made by the remote system since the object was loaded.  If the specified object is not in the Process Engine server cache, the function loads it into the cache from the database.  Parameters  Parameter  Description  Object@  OID of the object to refresh.  Recursive&  If:  0, none of the associated objects are refreshed.  1, all referenced shared objects are refreshed.  2, only shared objects referenced by reference subset facts are refreshed.  Returns  Null if successful; otherwise, an exception is raised.  Remarks  If a refreshed object contains non-stored reference subset facts from shared classes, these facts are also refreshed because additional objects may have been created or removed, which could change the contents of non-stored reference subset facts.  However, the function does not re-derive facts with an expiry duration.  Use ObjectFactDerive&() for this purpose.  Facts with a derivation type of Default are not re-derived unless they are null. If re-derivation of a fact is required, set the fact's derivation type to Derived.  The Recursive& parameter can be set to either 0, 1, or 2.  Three constants are used to represent Recursive& parameter values.  It is recommended that the following constants be used instead of creating variables:  Recursive:No& = 0  No associated objects are refreshed.  Recursive:All& = 1  Shared objects in the server cache referenced by reference facts and reference subset facts in the specified object are refreshed.  Recursive:Assocs& = 2  Shared objects in the server cache referenced only by reference subset facts in the specified object are refreshed.  For example, to refresh an object without refreshing any associated objects:  {<br>    var myObject@;<br>    ...<br>    ObjectRefresh(myObject@, Recursive:No&);<br>    ...<br>}  Call the function only for objects in local classes if the local class has non-stored reference subset facts referencing a shared class.  The function does not refresh objects being updated.  This ensures updated data is preserved and not refreshed from the database.  The maximum recursion level for the function is three.  This ensures the number of recursive refreshes does not create an unnecessary load on system resources.  Example  With a trigger on the Contact class, retrieve the value of the Description fact for the current contact object, print it to stdout on the server, and refresh the object.  If the description has changed, print the updated description:  {<br>    var myObject@;<br>    myObject@ := CurrentObjectGet@();<br>    try {<br>        result? := ObjectFactGet?(myObject@, Fact:Contact.Description@);<br>        print('ObjectFactGet successful - value is: ' +<br>               to_string(result?));<br>        ObjectRefresh&(myObject@, Recursive:No&);<br>        print('ObjectRefresh successful');<br>        result? := ObjectFactGet?(myObject@, Fact:Contact.Description@);<br>        print('ObjectFactGet successful - value is: ' +<br>               to_string(result?));<br>    }<br>    except {<br>        print('ObjectRefresh failed');<br>    }<br>}  "},{"id":161,"title":"ObjectRemove&amp;()","url":"9431.htm","text":"Syntax  ObjectRemove&(      Object@)  Description  Makes the specified object obsolete.  Parameter  Parameter  Description  Object@  OID of the object to make obsolete.  Returns  1 if successful; otherwise, an exception is raised.  Example  With a trigger on the Case class, delete all issues associated with the case:  {<br>    # delete all issues from this case<br>    var thisCase@ := CurrentObjectGet@();<br>    var issuesAny? := ObjectFactGet?(thisCase@,<br>        Fact:Case.All_Issues@);<br>    if (is_defined(issuesAny?)) {<br>        var issues@[] := to_blob_array@[](issuesAny?);<br>            for (i& := 0; i& < length(issues@[]); ++i&)  <br>        {<br>            ObjectRemove&(issues@[i&]);<br>        }<br>    }<br>}  "},{"id":162,"title":"ObjectRemoveByName&amp;()","url":"52842.htm","text":"Syntax  ObjectRemoveByName&(      const Class$,      const Keys?{})  Description  Makes the specified object obsolete.  Parameters  Parameter  Description  Class$  Name of the class that the specified object belongs to.  Keys?{}  Search criteria that identifies the object to remove.  If ObjectKey is specified, the supplied value is the ID of the object, and the object is retrieved directly.  Otherwise, a search is generated using the supplied keys, which returns the object ID.  Multiple keys can be supplied to uniquely identify the object.  Returns  ID of the obsolete object; otherwise, an error is returned.  Remarks  This function executes all business logic associated with removing an object, and enforces full security by calling ObjectRemoveSecure&().  Example  {<br>    var Result&;<br>    Result& := ObjectRemoveByName&('Case', hash([ObjectKey'], [12]) ); <br>    print(Result&);<br>}  "},{"id":163,"title":"ObjectRemoveSecure&amp;()","url":"52069.htm","text":"Syntax  ObjectRemoveSecure&(      Object@)  Description  This function is similar to ObjectRemove&(), except that this is a secure function.  "},{"id":164,"title":"ObjectSearch@[]()","url":"9433.htm","text":"Syntax  ObjectSearch@[](      search@,      params@[],      paramValues?[])  Description  Runs a public search defined in the Search Tool.  Parameters  Parameter  Description  search@  OID of the search to be performed (EPM constants can be used for searches).  params@[]  Array of OID of the parameters required for the search.  paramValues?[]  Array of values for the parameters identified in params@[] (must match the size of the params@[] array).  The values can be converted.  Returns  Array of object OIDs if successful; otherwise, an exception is raised.  Remarks  Searches are run against the database, so they can only return data that is committed.  Example 1  Run the All_Sex search in the Sex class, and print (to stdout on the server) the name of each search object returned:  {<br>    var result@[]  := ObjectSearch@[](Search:Sex.All_Sex@,[], []);<br>    for (i& := 0; i& < length(result@[]); ++i&) {<br>    var name? := ObjectFactGet?(result@[i&],Fact:Sex.Name@);<br>    print('sex ' + to_string(i&) + ' = ' + to_string(name?));<br>    }<br>}  Example 2  Count the number of purchased products using a search requiring parameter substitution:  {<br>    ...<br>    # Count purchased Products of this Cust Acct<br>    PurchProdCount& := length(ObjectSearch@[](<br>            Search:Purchased_Item.PurchProd@,<br>            [Parameter:This_Cust_Acct@,<br>            Parameter:pi_ProdDefn@],<br>            [CustAcct@, CompName$[i&]]));<br>}  "},{"id":165,"title":"ObjectSearchByExpr@[]()","url":"51156.htm","text":"Syntax  ObjectSearchByExpr@(      Class@,      IncludeObsolete&,      Expression$,      ParameterNames$[],      ParameterValues?[])  Description  Converts an SXP expression into an SQL statement and then executes it.  Parameters  Parameter  Description  Class@  Class object ID representing the context class of the SXP expression.  IncludeObsolete&  If specified, obsolete objects are returned.  Expression$  Valid SXP expression for the class specified in Class@.  The expression can contain parameters that are substituted at runtime.  Process Engine supports 10 built-in untyped parameters ({Untyped01}...{Untyped10}) that can be used when the data type of the parameter is unknown.  Untyped parameters can only be used for dynamic SXP search expressions.  ParameterNames$[]  Array of names of parameters within the SXP expression to be substituted.  ParameterValues?[]  Array of values that will be substituted for the named parameters.  Returns  Blob result of the executed SQL statement as a single item.  Remarks  To avoid multiple parse operations, the SQL statement is cached locally.  For a secure version of this function, refer to ObjectSearchByExprSecure@[]().  Example  {<br>var ParamNames$[];<br>var ParamVals?[];<br>var oid@;<br>var ObjKey&;<br>var i&, count&;<br>var ResultStr$;  var ClassObj@ := Class:Case@;<br>var FactObj@ := Fact:Case.Name@;  var SearchResult@[] := ObjectSearchByExpr@[](ClassObj@, TRUE, '', ParamNames$[], ParamVals?[]);  count& := count(SearchResult@[]);<br>if (count& > 0) { <br>for (i& := 0; i& < count&; i&++) {<br>if (i& > 0) {<br>ResultStr$ := ResultStr$ + ',';<br>} <br>oid@ := SearchResult@[i&];<br>ResultStr$ := ResultStr$ + ' ' + to_string(ObjectFactGet?(oid@, FactObj@));<br>}<br>} else {<br>ResultStr$ := 'No objects returned.';<br>}<br>print(ResultStr$);  return 1;<br>}  "},{"id":166,"title":"ObjectSearchByExprSecure@[]()","url":"51171.htm","text":"Syntax  ObjectSearchByExpr@(      Class@,      IncludeObsolete&,      Expression$,      ParameterNames$[],      ParameterValues?[])  Description  This function is similar to ObjectSearchByExpr@[](), except that this is a secure function.  Parameters  Parameter  Description  Class@  Class object ID representing the context class of the SXP expression.  If it is date-ranged, an effective date clause is added to the generated SQL.  The active effective date in the Process Engine server is used as blind variable in the clause.  IncludeObsolete&  If specified, obsolete objects are returned.  Expression$  Valid SXP expression for the class specified in Class@.  The expression can contain parameters that are substituted at runtime.  Process Engine supports 10 built-in untyped parameters ({Untyped01}...{Untyped10}) that can be used when the data type of the parameter is unknown.  Untyped parameters can only be used for dynamic SXP search expressions.   ParameterNames$[]  Array of names of parameters within the SXP expression to be substituted.  ParameterValues?[]  Array of values that will be substituted for the named parameters.  Returns  Array of blobs containing the result of the execution of the SQL statement.  Remarks  Only objects that the user has access to will be returned compared to ObjectSearchByExpr@[](), which displays all results.  Example  {<br>var ParamNames$[];<br>var ParamVals?[];<br>var oid@;<br>var ObjKey&;<br>var i&, count&;<br>var ResultStr$;  var ClassObj@ := Class:Case@;<br>var FactObj@ := Fact:Case.Name@;  SearchResult@[] := ObjectSearchByExprSecure@[](ClassObj@, TRUE, '', ParamNames$[], ParamVals?[]);  count& := count(SearchResult@[]);<br>if (count& > 0) {<br>for (i& := 0; i& < count&; i&++) {<br>if (i& > 0) {<br>ResultStr$ := ResultStr$ + ',';<br>} <br>oid@ := SearchResult@[i&];<br>ResultStr$ := ResultStr$ + ' ' + to_string(ObjectFactGet?(oid@, FactObj@));<br>}<br>} else {<br>ResultStr$ := 'No objects returned.';<br>}<br>print(ResultStr$);  return 1;<br>}  "},{"id":167,"title":"ObjectSearchSecure@[]()","url":"52070.htm","text":"Syntax  ObjectSearchSecure@[](      search@,      params@[],      paramValues?[])  Description  This function is similar to ObjectSearch@(), except that this is a secure function.  "},{"id":168,"title":"ObjectState&amp;()","url":"9435.htm","text":"Syntax  ObjectState&(      Object@)  Description  Returns the state of the specified object.  This is used to determine if the object is in an uncommitted state, and how it came to be in an uncommitted state.  Parameters  Parameter  Description  Object@  OID of the object  Returns  ObjectState:Insert&, ObjectState:Lock&, ObjectState:Update&, ObjectState:Delete&, ObjectState:InsertDelete&, or ObjectState:NoTrans& if successful; otherwise, an exception is raised.  Remarks  The Process Engine server does not distinguish between the Lock and Update states.  The Lock and Update states are provided so EPM functions and triggers can perform appropriately depending on whether the object was updated or locked.  The Lock state applies to objects put into update mode by the server, but no stored fact was updated.  The Lock state is important when dealing with non-stored facts.  For example, non-stored reference facts to shared classes that are updated do not cause a change in state from Lock to Update.  The following table lists the value of each returned variable.  The value is used for debugging purposes.   Return Values  Variable  Description  Value   ObjectState:Insert&  Object was created in the current transaction.  TC_INSERT (1)  ObjectState:Lock&  Object is locked in the current transaction, but no stored fact was updated.  TC_LOCK (2)  ObjectState:Update&  Object was updated in the current transaction.  The state only changes to ObjectState:Update& when the first stored fact in the object is updated.  TC_UPDATE (3)  ObjectState:Delete&  Object was deleted in the current transaction.  TC_DELETE (4)  ObjectState:InsertDelete&  Object was created in the current transaction and then deleted in the same transaction.  TC_INSERTDELETE (5)  ObjectState:NoTrans&  Object is not part of a transaction.  TC_NOTRANS (6)  Example  With a trigger on the Issue class, if it is in an Insert state, perform the EPM logic:  {<br>    # in the context of a commit trigger on class Issue<br>    if (ObjectState&(CurrentObjectGet@()) = ObjectState:Insert&) {<br>        # Perform EPM logic for inserted object<br>    }<br>}  "},{"id":169,"title":"ObjectUpdate&amp;()","url":"9437.htm","text":"Syntax  ObjectUpdate&(      Object@,      facts@[],      factValues?[])  Description  Updates an object's facts as specified within the function.  This is used to modify any number of fact values on an object where the OID of that object is known.  Parameters  Parameter  Description  Object@  OID of the object to be updated.  fact@[]  Array of OID of the facts to be updated.  factValues?[]  Array of values for the facts identified in fact@[] (must match the size of the fact@[] array).  The fact values can be converted.  Returns  1 if successful; otherwise, an exception is raised.  Remarks  If the object's type is updated, the object types of facts associated with the object are set to null (global).  Passing the Type fact as the first fact is important when creating an After Fact Update trigger which has the Object Type set for a defined class.  If the class's Type fact is not set, and the trigger's Group fact has a dependency on another fact that is defined before the class Type fact, the After Fact Update trigger does not fire as expected.  If the object's type is changed, pass the Type fact as the first fact because there are often many dependencies on the Type fact of a dynamic class.  Passing the Type fact as the first fact in the function call ensures that the Type fact is set or updated when:  Derivation expressions are parsed.  Any After Fact Update or After Group Update triggers are assessed for firing.  Example 1  With a trigger on the Case class, set the Description fact to the value 'Default description for my cases':   {<br>    const casePriority@ := StaticObj@('Priority', 'Critical');<br>    ObjectUpdate&(CurrentObjectGet@(),<br>        [Fact:Case.Description@, Fact:Case.Priority@],<br>        ['Default description for my cases',<br>        casePriority@]);<br>}  Example 2  An On Client Request trigger can fire other triggers that can do some processing in the background.  For example:  The user requests that an order be cancelled using a client operation.  A boolean fact that sets off another trigger is updated.  A cascade-like effect is created.  {<br>    var OrdProd@ := CurrentObjectGet@();<br>    ObjectUpdate&(OrdProd@,<br>              [Fact:OrderedProd.CancelProd_B@,<br>               Fact:OrderedProd.Description@],<br>              [1, 'Ordered Production Description]);<br>}  "},{"id":170,"title":"ObjectUpdateByName&amp;()","url":"52843.htm","text":"Syntax  ObjectUpdateByName&(      const Class$,      const Keys?{},      const FactNames$[],      const FactValues?[])  Description  Updates specified facts with supplied values for an object.  Parameters  Parameter  Description  Class$  Class that the specified object belongs to.  Keys?{}  Search criteria that identifies the object to update.  If ObjectKey is specified, the supplied value is the ID of the object, and the object is retrieved directly.  Otherwise, a search is generated using the supplied keys, which returns the object ID.  Multiple keys can be supplied to uniquely identify the object.  FactNames$[]  Facts for which values are supplied.  FactValues?[]  Values corresponding to the supplied fact names.  Returns  ID of the updated object; otherwise, an error is returned.  Remarks  The function executes all business logic associated with updating an object, and enforces full security by calling ObjectUpdateSecure&().  Example  {<br>    var Result&;<br>    Result& := ObjectUpdateByName&('Case', hash(['Name'], ['C12']), ['Priority', 'Currency'], ['High', 77.50]); <br>    print(Result&);<br>}  "},{"id":171,"title":"ObjectUpdateSecure&amp;()","url":"52060.htm","text":"Syntax  ObjectUpdateSecure&(      Object@,      facts@[],      factValues?[])  Description  This function is similar to ObjectUpdate&(), except that this is a secure function.   "},{"id":172,"title":"ObjectValidate&amp;()","url":"58879.htm","text":"Syntax  ObjectValidate&(      Object@)  Description  Executes all business rules for the specified object.  Parameter  Parameter  Description  Object@  OID of the object to validate.  Returns  1 if successful; otherwise, an exception is raised.  Remarks  If a business rule for the object fails, the message defined for the business rule is displayed in Process Engine web client and the EPM script of the calling trigger stops processing at that point.  If the object is not in update mode, the business rules are not executed and '1' is returned.   To execute a specific business rule for an object, use BusRuleExecute&().  Example  Execute all business rules for the object that is the context for the trigger:  {<br>    ObjectValidate&(CurrentObjectGet@());<br>}  "},{"id":173,"title":"OpenUrl&amp;()","url":"45346.htm","text":"Syntax  OpenUrl&(      Url$,      Target$)  Description  Opens a URL or file in a specified target frame in Process Engine web client.  Parameters  Parameter  Description  Url$  URL string used by the Process Engine web client to open the URL.  Target$  String specifying the target frame for the URL to open in.   If null$ is passed, Target$ is set to _blank in the OpenURL&() function.  The URL opens in a new blank window.  Returns  Integer representing the result from a treClientNotify call.  This result signifies whether the asynchronous TRE call succeeded, not if the system command was successfully executed but the browser failed to open.  Example  On Client Request trigger:  {<br>    # Open CSG International website.<br>    OpenUrl&('http://www.csgi.com', null$);<br>}  "},{"id":174,"title":"OpenView&amp;()","url":"58880.htm","text":"Syntax  OpenView&(      ClientID$,      Class@)  Description  Displays a view and creates an object of the specified class.  The contents of the view are defined by the function parameters.  Parameters  Parameter  Description  ClientID$  ID of the client in which to open the view.  If null$ is passed, the client calling the function is the target client.  Class@  OID of the object's class.  Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the open view command was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  A screen is only displayed if the class has a view.  No error messages are displayed if a view does not exist for the class.  If a NULL or 0 class key is passed, the Process Engine web client Home page is displayed.  If the class has multiple types, use OpenViewOfType&(), not this function.  The Process Engine web client receives a notification from a triggered function, the browser is not brought into focus if:  Its is minimised.  Not in focus.  Example  Display the Case view and create a case:  {<br> var myClass@ := Class:Case@;<br> OpenView&(null$, myClass@);<br>}  "},{"id":175,"title":"OpenViewNewWindow&amp;","url":"62274.htm","text":"Syntax  OpenViewNewWindow&(      ClientID$,      Class@)  Description  Notifies the Process Engine web client to open a new view of the class in a new window where type is not required.  Parameters  Parameter  Description  ClientID$  ID of the client in which to open the view.  If null$ is passed, the client calling the function is the target client.  Class@  OID of the object's class for which to open a new view.  Returns  None.  Remarks  The Process Engine web client receives a notification from a triggered function, the browser is not brought into focus if:  Its is minimised.  Not in focus.  "},{"id":176,"title":"OpenViewOfType&amp;()","url":"58881.htm","text":"Syntax  OpenViewOfType&(      ClientID$,      Class@,      ClassType@)  Description  Displays a view and creates an object of the specified class and type.  Parameters  Parameter  Description  ClientID$  ID of the client in which to open the view.  If null$ is passed, the client calling the function is the target client.  Class@  OID of the object's class.  ClassType@  OID of the type of class.  Mandatory if the class has multiple types.   Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the open view command was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.   A screen is only displayed if the class has a view.  No error messages are displayed if a view does not exist for the class.   Example  Display the Case view and create a case of type 'C':  {<br>    var myClass@   := Class:Case@;<br>    var myType@ := StaticObj@('Case_Type', 'C');<br>    OpenViewOfType&(null$, myClass@, myType@);<br>}  "},{"id":177,"title":"OpenViewOfTypeNewWindow&amp;()","url":"62275.htm","text":"Syntax  OpenViewOfTypeNewWindow&(      ClientID$,      Class@,      Type@)  Description  Notifies the Process Engine web client to open a new view of a class in a new window where a type is required.  Parameters  Parameter  Description  ClientID$  ID of the client in which to display the object.  Class@  OID of the object's class.  Type@  OID of the type for which to open a new view.  Returns  None.  Remarks  The Process Engine web client receives a notification from a triggered function, the browser is not brought into focus if:  Its is minimised.  Not in focus.  "},{"id":178,"title":"OpenViewWithObject&amp;()","url":"58882.htm","text":"Syntax  OpenViewWithObject&(      ClientID$,      Object@)  Description  Displays the object's view with the object as the view's main (root) object.  If the view is open, it is made the active view.  Parameters  Parameter  Description  ClientID$  ID of the client in which to display the object.  If null$ is passed, the client calling the function is the target client.  Object@  OID of the object to be displayed.   Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the open view command was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.   A screen is only displayed if the object's class has a view.  No error messages are displayed if a view for the object does not exist.  If the view is not open, ensure the object to be displayed is not part of an open transaction.  If a view is opened for an object that is part of an open transaction, the opened view does not reflect the open transaction.    Example  Perform a search and open the first case in the list:  {<br>    var FirstCase@[] := ObjectSearch@[](Search:Case.All_Case@,[],[]);<br>    if length(FirstCase@[]) > 0 then <br>    OpenViewWithObject&(null$, FirstCase@[0]);<br>}  "},{"id":179,"title":"OpenViewWithObjectNewWindow&amp;()","url":"62276.htm","text":"Syntax  OpenViewWithObjectNewWindow&(      ClientID$,      Object@)  Description  Notifies the Process Engine web client to open a view of the class in a new window for the object specified.  Parameters  Parameter  Description  ClientID$  ID of the client in which to display the object.  Object@  OID of the object to be displayed.  Returns  None.  Remarks  The Process Engine web client receives a notification from a triggered function, the browser is not brought into focus if:  Its is minimised.  Not in focus.  "},{"id":180,"title":"ParamValue?()","url":"9409.htm","text":"Syntax  ParamValue?(      param@)  Description  Returns the value of a Process Engine parameter.  ParamValue? is deterministic.  The following table lists variations of this function that are used to determine the data type of the result.  Function Variations  Variation   Data Type of Result  ParamValue?()  Unknown  ParamValue&()  Long  ParamValue$()  Text  ParamValue#()  Double  ParamValue~()  Date  ParamValue@()  Blob  ParamValue@[]()  Array of blobs  ParamValueAsKey&[]()  Array of longs  Parameter  Parameter  Description  param@  Parameter to retrieve.  Returns  Value of the parameter as an unknown data type if successful; otherwise, an exception is raised.  Example  Retrieve the user parameter:  {<br>    user@ := to_blob(ParamValue?(Parameter:User@));<br>}  "},{"id":181,"title":"PECFileDownload&amp;()","url":"58886.htm","text":"Syntax  PECFileDownload&(      ClientID$,      SourceLocation$,      PromptUser&,      PresetDestination$)  Description  Downloads a file from a file server to a PC hosting a Process Engine web client instance.  When the download is complete, the file is opened by the associated program using Windows.  Parameters  Parameter  Description  ClientID$  ID of the client instance to download the file to.  Pass a null string to indicate the current client.  SourceLocation$  Source location and file name of the file to download.  If the location is prefixed with sv://, this is automatically removed.  PromptUser&  Flag indicating whether to prompt for the location to download the file to.  If set to 1, prompts for the location; otherwise, does not prompt and the file is downloaded to the location specified in PresetDestination$.  It is deprecated and maintained for backward compatibility with Process Engine Windows client.  PresetDestination$  Location to download the file to.  Browser settings can override this parameter with the outcome depending on the value specified. This function uses only the file name portion of the path. This means that if the value is set to:  A complete path (that is, <directory>/<file_name>), <directory> is ignored and the file is downloaded with the name specified in <file_name>.   null$ or <file_name>, the file name specified in SourceLocation& is used.  Returns  Integer representing the result from the treClientNotify call.  Remarks  The function calls biFileDownloadSize&() and if this call is successful, it calls biFileDownload@() to download the file (see the Configurer's Reference Guide for Singleview Convergent Billing).    A Downloading window is displayed, and downloads can be cancelled by clicking the Cancel button.  Double back-slashes (\\\\) are required in EPM to represent one back-slash (\\) for directory locations.  For single-click downloads, the function must be called from an On Client Request trigger, and the UserPrompt& parameter set to 0.  The On Client Request trigger can be placed on a button or menu operation.  For more information about file downloads, refer to Secure File Transfer.  In Process Engine web client, the PromptUser& parameter is ignored and the Save As pop-up is displayed.  The value in the PresetDestination$ parameter, if any, is displayed as the default value in the File name field in the pop-up.  Example  The following On Client Request trigger on an operation downloads the file to the specified location without prompting the user.  {<br>PECFileDownload&(treClientGetId$(), 'sv://SecureDownload/SecureFileTransfer_LargeFile1.pdf', 0, 'DownloadedFile_1.pdf');<br>}  "},{"id":182,"title":"PECFileDownloadWithPrompt&amp;()","url":"58887.htm","text":"Syntax  PECFileDownloadWithPrompt&(      ClientID$,      SourceLocation$,      PromptUser&,      PresetDestination$)  Description  Downloads a file from a file server to a PC hosting a Process Engine web client instance. It prompts a user to confirm the selected file, and if required, allows them to select an alternative file to download.  When the download is complete, the file is opened by the associated program using Windows.  Parameters  Parameter  Description  ClientID$  ID of the client instance to download the file to.  Pass a null string to indicate the current client.  SourceLocation$  Source location and file name on the server, of the file to download.  If the location is prefixed with sv://, this is automatically removed.  PromptUser&  Flag indicating whether to prompt for confirmation or the location to download the file to.  If set to:   0, there is no prompt for location or file confirmation. The download directory defaults to the directory specified in PresetDestination$.  1, prompts the user for the file download location with an option to select an alternative file to download.  2, prompts user to confirm whether to download a selected file or cancel a download.  3, prompts to confirm or cancel a file download, with the option to select a different file and location to download the selected file to.   It is deprecated and maintained for backward compatibility with Process Engine Windows client.  PresetDestination$  Location to download the file to.  Browser settings can override this parameter with the outcome depending on the value specified. This function uses only the file name portion of the path. This means that if the value is set to:  A complete path (that is, <directory>/<file_name>), <directory> is ignored and the file is downloaded with the name specified in <file_name>.   null$ or <file_name>, the file name specified in SourceLocation& is used.  Returns  Integer representing the result from the treClientNotify call.  Remarks  The function calls biFileDownloadSize&() and if this call is successful, it calls biFileDownload@() to download the file (see the Configurer's Reference Guide for Singleview Convergent Billing).    A Downloading window is displayed, and downloads can be cancelled by clicking the Cancel button.  Double back-slashes (\\\\) are required in EPM to represent one back-slash (\\) for directory locations.  For single-click downloads, the function must be called from an On Client Request trigger, and the UserPrompt& parameter set to 0.  The On Client Request trigger can be placed on a button or menu operation.  For more information about file downloads, refer to Secure File Transfer.  In Process Engine web client, the PromptUser& parameter is ignored and the Save As pop-up is displayed.  The value in the PresetDestination$ parameter, if any, is displayed as the default value in the File name field in the pop-up.  Example  The following On Client Request trigger on an operation downloads the file to the specified location without prompting the user.  {<br>PECFileDownloadWithPrompt&(treClientGetId$(), 'sv://SecureDownload/SecureFileTransfer_LargeFile1.pdf', 2, 'DownloadedFile_1.pdf');<br>}  "},{"id":183,"title":"PECFileUpload&amp;()","url":"58889.htm","text":"Syntax  PECFileUpload&(      ClientID$,       PresetDestination$)  Description  Uploads a file from PC hosting a Process Engine web client instance to a Singleview server.  Parameters  Parameter  Description  ClientID$  ID of the client instance to upload the file to.  Pass a null string to indicate the current client.  PresetDestination$  Location on the server to upload the file to.   If a file name is:  Specified, the specified file name is used.   Not specified, the name of the source file is used.  Returns  Integer representing the result from a treClientNotify call.  Remarks  The function calls biFileUploadInitialise&() and if this call is successful, it calls biFileUpload@() to upload the file (see the Configurer's Reference Guide for Singleview Convergent Billing).  A Uploading window is displayed, and uploads can be cancelled by clicking the Cancel button.  Single click uploads are not available because the function always displays the Select file to open window.  For more information about file uploads, refer to Secure File Transfer.  Example 1  The following On Client Request trigger on an operation uploads the selected file to the server.  {<br>PECFileUpload&(treClientGetId$(), 'SecureFileTransfer_LargeFile1.pdf');<br>}  Example 2  The following On Client Request trigger on an operation uploads the file to the server using the source file's name because a file name is not specified.  {<br>PECFileUpload&(treClientGetId$(), 'SecureUpload/');<br>}  "},{"id":184,"title":"PECFileUploadExec&amp;()","url":"58893.htm","text":"Syntax  PECFileUploadExec&(      ClientID$,      PresetDestination$,      TrigExecOnComplete@,      UnknownParams?[])  Description  Uploads a file from a PC hosting a Process Engine web client instance to the Singleview server, and executes a trigger after the file is uploaded.  Parameters  Parameter  Description  ClientID$  ID of the client instance to upload the file to.  Pass a null string to indicate the current client.  PresetDestination$  Location on the server to upload the file to.  If a file name is:  Specified, the specified file name is used.   Not specified, the name of the source file is used.  TrigExecOnComplete@  Object Identity (OID) of the trigger to execute after the completion of the file transfer.  UnknownParams?[]  Unknown array of configurable variables to be passed as client parameters to the TrigExecOnComplete@ trigger.  Allowed data types are strings, integers, floats, dates, hash of unknown, and arrays of:  Strings  Integers  Floats  Dates  Unknown.  Returns  Integer representing the result from a treClientNotify call.  Remarks  The function calls biFileUploadInitialise&() and if this call is successful, it calls biFileUpload@() to upload the file (see the Configurer's Reference Guide for Singleview Convergent Billing).  A Uploading window is displayed, and uploads can be cancelled by clicking the Cancel button.  Single click uploads are not available because the function always displays the Select file to open window.  For more information about file uploads, refer to Secure File Transfer.  Example 1  The following On Client Request trigger on an operation uploads the selected file to the server and executes the specified trigger when the file upload is complete.  {<br>PECFileUploadExec&(treClientGetId$(), 'SecureFileTransfer_LargeFile1.pdf', triggeredOp@, dateArray?[]);<br>}  Example 2  The following On Client Request trigger on an operation uploads the file to the server using the source file's name because a file name is not specified, and executes the specified trigger when the file upload is complete.  {<br>PECFileUploadExec&(treClientGetId$(), 'SecureUpload/', triggeredOp@, dateArray?[]);<br>}  "},{"id":185,"title":"PECFileUploadExecWithPrompt&amp;()","url":"58894.htm","text":"Syntax  PECFileUploadExecWithPrompt&(      ClientID$,      PresetDestination$,      TrigExecOnComplete@,      UnknownParams?[])  Description  Uploads a file from a PC hosting a Process Engine web client instance to the Singleview server, executes a trigger after the file is uploaded, and prompts the user to confirm the selected file, or select another file.  Parameters  Parameter  Description  ClientID$  ID of the client instance to upload the file to.  Pass a null string to indicate the current client.  PresetDestination$  Location on the server to upload the file to.  If a file name is:  Specified, the specified file name is used.   Not specified, the name of the source file is used.  TrigExecOnComplete@  Object Identity (OID) of the trigger to execute after the completion of the file transfer.  UnknownParams?[]  Unknown array of configurable variables to be passed as client parameters to the TrigExecOnComplete@ trigger.  Allowed data types are strings, integers, floats, dates, hash of unknown, and arrays of:  Strings  Integers  Floats  Dates  Unknown.  Returns  Integer representing the result from a treClientNotify call.  Remarks  The function calls biFileUploadInitialise&() and if this call is successful, it calls biFileUpload@() to upload the file (see the Configurer's Reference Guide for Singleview Convergent Billing).  A Uploading window is displayed, and uploads can be cancelled by clicking the Cancel button.  Single-click uploads are not available because the function always displays the Select file to open window.  For more information about file uploads, refer to Secure File Transfer.  Example 1  The following On Client Request trigger on an operation uploads the selected file to the server and executes the specified trigger when the file upload is complete.  {<br>PECFileUploadExecWithPrompt&(treClientGetId$(), 'SecureFileTransfer_LargeFile1.pdf', triggeredOp@, dateArray?[]);<br>}  Example 2  The following On Client Request trigger on an operation uploads the selected file to the server using the source file's name because a file name is not specified, and executes the specified trigger when the file upload is complete.  {<br>PECFileUploadExecWithPrompt&(treClientGetId$(), 'SecureUpload/', triggeredOp@, dateArray?[]);<br>}  "},{"id":186,"title":"PECFileUploadWithPrompt&amp;()","url":"58896.htm","text":"Syntax  PECFileUploadWithPrompt&(      ClientID$,      PresetDestination$)  Description  Uploads a file from a PC hosting a Process Engine web client instance to the Singleview server, and prompts the user to confirm the selected file, or select another file.  Parameters  Parameter  Description  ClientID$  ID of the client instance to upload the file to.  Pass a null string to indicate the current client.  PresetDestination$  Location on the server to upload the file to.  If a file name is:  Specified, the specified file name is used.   Not specified, the name of the source file is used.  Returns  Integer representing the result from a treClientNotify call.  Remarks  The function calls biFileUploadInitialise&() and if this call is successful, it calls biFileUpload@() to upload the file (see the Configurer's Reference Guide for Singleview Convergent Billing).  A Uploading window is displayed, and uploads can be cancelled by clicking the Cancel button.  Single-click uploads are not available because the function always displays the Select file to open window.  For more information about file uploads, refer to Secure File Transfer.  Example 1  The following On Client Request trigger on an operation uploads the selected file to the server.  {<br>PECFileUploadWithPrompt&(treClientGetId$(), 'SecureFileTransfer_LargeFile1.pdf');<br>}  Example 2  The following On Client Request trigger on an operation uploads the selected file to the server using the source file's name because a file name is not specified.  {<br>PECFileUpload&(treClientGetId$(), 'SecureUpload/');<br>}  "},{"id":187,"title":"PeriodicProcessing&amp;()","url":"55479.htm","text":"Syntax  PeriodicProcessing&()  Description  Performs Process Engine Statistics Module (PSM) periodic processing (see the Performance Guide for Singleview).  Parameter  Parameter  Description  None.  Returns  None.  Example  { <br>    # Perform PSM periodic processing <br>    PeriodicProcessing&(); <br>}  "},{"id":188,"title":"PETrace&amp;()","url":"55570.htm","text":"Syntax  PETrace&(      TraceClass$      TraceLevel&)  Description  Enables EPM functions and triggers to set their debug trace levels.  Parameter  Parameter  Description  TraceClass$  List of trace class flags, delimited by commas or spaces.  The table below lists the flags used by TraceClass&.  TraceLevel&  Debug level (0-6). The higher the level, the more detailed the debug trace.  The following table lists TraceClass$ flags.  TraceClass$ Flags  Flag  Description  cf  Fact derivation  cs  Searches  ct  Trigger events  cb  Business rule events  ce  External services  cx  EPM call  cz  EPM function  ci  Config  cc  Full configuration (all of the above)  all  off  Disable trace  Returns  None.  Remarks  The function sets trace options on a Process Engine server process for the duration of the EPM function that calls it.  The trace options of all other processes are unaffected.  Example  {<br>    # Turn on local Trace for duration of this function<br>    # Fact Derivation and Business Rule at level 3<br>    PETrace&('cf cb', 3);<br>    # The following two examples perform exactly the same as the above:<br>    # PETrace&('cf, cb', 3);<br>    # PETrace&('cf,cb', 3);      var myCase@ := ObjectInsert@(<br>                Class:Case@,<br>                [Fact:Case.Type@, Fact:Case.Status@],<br>                [1, 1]);<br>    BusRuleExecute&(Business_Rule:Case.Receive_Case@, myCase@);<br>}  "},{"id":189,"title":"PopulateField&amp;()","url":"58897.htm","text":"Syntax  PopulateField&(      ClientID$,      OID@,      Fact@,      Value?)  Description  Focuses on a field on the active view and populates it with the specified value.  Parameters  Parameter  Description  ClientID$  ID of the client in which to populate the field.  If null$ is passed, the client calling the function is the target client.  OID@  OID or class ID of a specific object.  Fact@  OID of the fact to populate.  Value?  Value with which to populate the field.  Returns  1 if successful; otherwise, an exception is raised.  The result specifies whether the asynchronous TRE call succeeded, not if the populate operation was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  The function searches all sections and groups on the active view and tab.  The fields are searched in the same order as for FocusField&().  Combo boxes can be populated using the object key.  The values for populating the combo boxes are derived using the StaticObj@() and ObjectKeyGet&() functions.  If the populate operation succeeds, the object is changed to edit mode.  Saving or cancelling the field change is performed manually.  Passing Fact Values  The following are guidelines for passing fact values:  Pass an empty string to clear a field for any fact type.  Pass dates as a string, integer, or double.  Pass booleans as 1, 0, True, or False.  Any field type can be passed for the Value? parameter but only strings, integers, and doubles are handled.  If any other type is passed, the field is focused but not populated.  Pass integers and doubles as their native types to avoid formatting problems, but numbers can be passed as strings if required.  Example  Create a case and populate the source drop-down list with 'In person':  {<br> # Create a case of type 'C'<br> var myClass@ := Class:Case@;<br> var myType@  := StaticObj@('Case_Type', 'C');<br> OpenViewOfType&(null$, myClass@, myType@);   # Populate Source field in Detail Section.<br> var myFact@ := Fact:Case.How_Received@;<br> var myVal$ := ObjectKeyGet&(StaticObj@('How_Received', 'In person'));<br> PopulateField&(null$, myClass@, myFact@, myVal$);<br>}  "},{"id":190,"title":"PopulateFieldOnDetail&amp;()","url":"58898.htm","text":"Syntax  PopulateFieldOnDetail&(      ClientID$,      OID@,      Fact@,      Value?)  Description  Focuses a field in the Detail section of the active view and populates it with the specified value.  Parameters  Parameter  Description  ClientID$  ID of the client in which to populate the field.  If null$ is passed, the client calling the function is the target client.  OID@  OID or class ID of a specific object.  Fact@   OID of the fact to populate.  Value?  Value with which to populate the field.   Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the command was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  The function operates the same way as PopulateField&(), except that only the Detail section is searched for the field to populate.  Example  Create a case and populate the source drop-down list with 'In person':  {<br> # Create a case of type 'C'<br> var myClass@ := Class:Case@;<br> var myType@ := StaticObj@('Case_Type', 'C');<br> OpenViewOfType&(null$, myClass@, myType@);    # Populate Source field in Detail Section<br> var myFact@ := Fact:Case.How_Received@;<br> var myVal& := ObjectKeyGet&(StaticObj@('How_Received', 'In person'));<br> PopulateFieldOnDetail(null$, myClass@, myFact@, myVal&); <br>}  "},{"id":191,"title":"PopulateFieldOnGroup&amp;()","url":"58903.htm","text":"Syntax  PopulateFieldOnGroup&(      ClientID$,      Group@,      OID@,      Fact@,      Value?)  Description  Focuses on a field in a group in the active view and populates it with the specified value.  Parameters  Parameter  Description  ClientID$  ID of the client in which to populate the field.  If null$ is passed, the client calling the function is the target client.  Group@  OID of the group in which to find the fact.  If the fact does not exist in this group, no field is populated, but the group is focused on.   Use StaticObj@() to get the OID of the group.  Groups are in the Layout_Group_Template class, and the group name is displayed in the Layout Builder in the Configuration Workbench.  OID@  OID or class ID of a specific object.  Fact@  OID of the fact to populate.  Value?  Value with which to populate the field.   Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the command was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  The function operates the same way as PopulateField&(), but only the specified group is searched for the field to populate.  Example  Create a case and populate the Customer Name field in the Customer Details group with 'John Smith':   {<br> # Create a case of type 'C'<br> var myClass@ := Class:Case@;<br> var myType@ := StaticObj@('Case_Type', 'C');<br> OpenViewOfType&(null$, myClass@, myType@);   # Populate Customer Name field in the Customer Details group<br> var myVal$ := 'John Smith';<br> var myGroup@ := StaticObj@('Layout_Group_Template', 'cont_CustAcctSrch');<br> var myFact@ := Fact:Cust_Acct.CustAcctName_X;<br> PopulateFieldOnGroup(null$, myGroup@, myClass@, myFact@, myVal$);<br>}  "},{"id":192,"title":"PopulateFieldOnTab&amp;()","url":"58904.htm","text":"Syntax  PopulateFieldOnTab&(      ClientID$,      Tab@,      OID@,      Fact@,      Value?)  Description  Focuses on a field on a tab in the active view and populates it with the specified value.  Parameters  Parameter  Description  ClientID$  ID of the client in which to populate the field.  If null$ is passed, the client calling the function is the target client.  Tab@   OID representing the tab on which to find the fact.  If the fact does not exist on the specified tab, no field is populated but the tab is focused on.  Pass null@ as the tab parameter to search only the active tab for the fact.  Use StaticObj@() to get the OID of the tab.  Tabs are in the Layout_Manager class, and the tab name is displayed in the Interface Design Tool.  OID@  OID or class ID of a specific object.  Fact@  OID of the fact to populate.  Value?  Value with which to populate the field.   Returns  1 if successful; otherwise, an exception is raised.  The result signifies whether the asynchronous TRE call succeeded, not if the command was successfully executed.  Remarks  Call the function from an On Client Request trigger to guarantee Process Engine web client displays the view.  The function operates the same way as PopulateField&(), except that only the specified tab is searched for the field to populate.  Example  Create a case and populate the Search Fact field on the Contacts tab:  {<br>    # Create a case of type 'C'<br>    var myClass@ := Class:Case@;<br>    var myType@ := StaticObj@('Case_Type', 'C');<br>    OpenViewOfType&(null$, myClass@, myType@);      # Populate the SearchFact field on the Contacts tab.<br>    var myFact_Class@ := Class:Contact@;<br>    var myFact@ := Fact:Contact.SearchFact@;<br>    var myVal$ := &#8216;search me&#8217;; <br>    var myTabFocus@ := StaticObj@('Base_Tab', 'ContactsTab');      PopulateFieldOnTab&(null$, myTabFocus@, myFact_Class@, myFact@, myVal$);<br>}  "},{"id":193,"title":"RaiseError&amp;()","url":"9393.htm","text":"Syntax  RaiseError&(      MessageOid@,      params$[])  Description  Aborts with an error that is returned to the client.  Processing of the EPM stops when the error is raised.  Parameters  Parameter  Description  MessageOid@  OID of the message object in the Message class.  params$[]  Parameter values to be substituted into the message.  Returns  Raises an exception.  Remarks  This function registers the specified message in the Process Engine server and raises an exception.  The exception can be caught by a function or trigger in a try-except expression.  Example 1  With a trigger on the Issue class, raise an error if the user is attempting to make the issue obsolete:  {<br>    var issue@ := CurrentObjectGet@();<br>    if (ObjectState&(issue@) = ObjectState:Delete&)<br>    {<br>        RaiseError&(Message:CannotDeleteIssue@,[]);<br>    }<br>}  Example 2  With a trigger on the Comment_Action class, when an action is completed (closed) or cancelled, no new comment is allowed to be added to this action:  {<br>    var ActionStatus@;<br>    var ActionStatus$;<br>    var thisObject@ :=CurrentObjectGet@();<br>    var thisAction@ :=<br>    to_blob(ObjectFactGet?(thisObject@,Fact:Comment_Action.Action@));<br>    var ActionFinish~ := <br>        to_date~(ObjectFactGet?(thisAction@,Fact:Action.Finish@));<br>    if (ActionFinish~ <> null~)<br>    {<br>        ActionStatus@ :=<br>        to_blob(ObjectFactGet?(thisAction@,Fact:Action.Status@));<br>        ActionStatus$ := to_string(ObjectFactGet?(ActionStatus@,Fact:Status.Display_Name@));<br>        RaiseError&(Message:comment_Add@,[ActionStatus$]);<br>    }  }  "},{"id":194,"title":"ReferenceValidate&amp;()","url":"38223.htm","text":"Syntax  ReferenceValidate&(      ObjectOid@,      FactOid@,      RefFactOid@)  Description  Determines whether the specified referenced object fact is valid or not for a reference fact.  Parameters  Parameter  Description  ObjectOid@  In:  Object ID of the object to which the reference fact belongs.  If null:  RefFactOid@ cannot be null  The filter search used by FactOid@ cannot use any facts of ObjectOid@.  FactOid@  In:  Object ID of the reference fact.  RefFactOid@  In:  Object ID of the referenced object to check the reference fact against.  If null:  ObjectOid@ cannot be null  If the current value of FactOid@ is:  Null, the fact is not validated and True is returned   Not null, FactOid@ is used for validity checks.  Returns  True if the reference fact is valid for the user, False if not; otherwise, an exception is raised.  Remarks  The referenced object is considered valid when:  It is not obsolete.  The current user has view permission.  It is returned by the search filter on the reference fact (if a filter search is defined).  To improve the performance of the validation, the search or SXP expression on which the validation is based should use the PDL_Filter Process Engine parameter.  PDL_Filter is populated from the reference identity fact of the reference object.  Example  The following code displays a message stating whether the specified referenced object is valid for the reference fact:  {<br>    var lResult&; <br>    var lObjOid@ := to_objid@(100, 1);     # a case object<br>    var lFactOid@ := to_objid@(2, 2001);   # a reference fact<br>    var lRefObjOid@ := to_objid@(64, 11);  # the referenced object      try {<br>       lResult& := ReferenceValidate&(lObjOid@, lFactOid@, lRefObjOid@);<br>       print('ReferenceValidate succeeded');<br>       if (lResult& <> 0) {<br>           print('The reference was valid');<br>       } else {<br>           print('The reference was not valid');<br>       }<br>       } except {<br>           print('ReferenceValidate failed');<br>    }<br>}  "},{"id":195,"title":"RefreshScreen&amp;()","url":"58908.htm","text":"Syntax  RefreshScreen&(      User@,      Object@)  Description  Sends an asynchronous message to the client, and refreshes the specified object and all objects dependent on it in Process Engine web client.  Parameters  Parameter  Description  User@  User for which to refresh the object.  If User@ is Null, the object is refreshed in the current Process Engine web client session; otherwise, the object is refreshed in all Process Engine web client sessions for the specified user.  Object@  ID of the object to refresh. The specified object must be the root object of one of the views; otherwise, the refresh is ignored.  If Object@ is Null, all Process Engine web client pages are refreshed.  Returns  Null if successful; otherwise, an exception is raised.  Remarks  If uncommitted data exists when the function is called, a window is displayed and prompts the user to commit their changes before the updated information is displayed.  Example  Refresh the current object in Process Engine web client for the logged-on user:   {<br>    var myUser@;<br>    var myObject@;<br>    # set up test values<br>    myUser@ := to_blob(ParamValue?(Parameter:User@));<br>    myObject@ := CurrentObjectGet@();<br>    try {<br>        RefreshScreen&( myUser@, myObject@);<br>        print('RefreshScreen successful');<br>    }<br>    except {<br>        print('RefreshScreen failed');<br>    }<br>}  "},{"id":196,"title":"RefreshToolbar&amp;()","url":"58917.htm","text":"Syntax  RefreshToolbar&(      User@)  Description  Refreshes the Global bar, and the Main and Tab menus in Process Engine web client.  Parameter  Parameter  Description  User@  User for which to refresh the Global bar, and the Main and Tab menus.  If set to null, the Global bar, and the Main and Tab menus are refreshed in the current Process Engine web client session; otherwise, they are refreshed in all Process Engine web client sessions for the specified user.  Returns  Null if successful; otherwise, an exception is raised.  Example  To refresh the Global bar, and the Main and Tab menus when an On Client Request trigger has changed the enabled state of a button, include the RefreshToolbar& EPM function in the On Client Request trigger.  The following On Client Request trigger enables the Busy button on the client and executes the RefreshToolbar& EPM function:  {<br>    var myUser@ := to_blob(ParamValue?(Parameter:User@));<br>    var mystate@[] := to_blob_array@[] (ObjectFactGet? (myuser@, Fact:User.CTI_User_State@));      ObjectUpdate& (mystate@[0], [Fact:CTI_User_State.CTI_Available@], [0]);      RefreshToolbar&( myUser@);<br>}  If the function executed successfully, the Global bar, and the Main and Tab menus are refreshed and displayed with Busy button enabled.  "},{"id":197,"title":"RootObjectGet@()","url":"9449.htm","text":"Syntax  RootObjectGet@()  Description  Returns the object specified as the transaction root for this operation.  If no object is specified, the returned object is the root of the transaction to which the current object belongs.   Parameters  Parameter  Description  None.  Returns  OID representing the Transaction Root Object, if successful; otherwise, an exception is raised.  Remarks  If the operation does not have a specified root object and the current object is not part of a transaction, there is no root object and an exception is thrown.  If a transaction root is specified, this object may not necessarily be part of a transaction, but if the trigger starts a transaction, this object becomes the root object.  Example  Commit trigger on case:  {<br>    var myCase@ := RootObjectGet@();<br>    var myCount& :=<br>        to_integer(ObjectFactGet?(myCase@,Fact:Case.Counter_Fact@));<br>    ++myCount&;<br>    ObjectUpdate&(myCase@, [Fact:Case.Counter_Fact@], [myCount&]);<br>}  "},{"id":198,"title":"SearchCompile&amp;()","url":"52410.htm","text":"Syntax  SearchCompile&(      const Class?,      const IncludeObsolete&,      const Expression$,      var SQL,      var ParamNames$[])  Description  Compiles an SXP expression into an SQL statement.  Parameters  Parameter  Description  Class?  Class object ID or class name representing the context class of the SXP expression.  IncludeObsolete&  If specified, obsolete objects are returned.  Expression$  Valid SXP expression representing the where reserved word for the specified class.  The expression can contain parameters that are substituted for bind variables.  Process Engine supports 10 built-in untyped parameters ({Untyped01}...{Untyped10}) that can be used when the data type of the parameter is unknown.  Untyped parameters can only be used for dynamic SXP search expressions.  SQL$  Compiled SQL statement.  ParameterNames$[]  Array of names of the parameters representing the bind variables required to execute the SQL.  Returns  True if successful; otherwise, an exception is raised.  Remarks  The compiled SQL statement is returned to the user for execution.  To assist bind variable provision at runtime, the embedded parameters are replaced with Oracle bind variables and the list of parameters used in the expression are returned.  Example  {<br>var ParamNames$[];<br>var SQL$;<br>var ResultStr&;  ResultStr$ := SearchCompile&('Case', 0, '[Currency_Fact] = {Untyped01}', SQL$, ParamNames$[]);<br>}<br>print(SQL$);<br>print(ParamNames$[])  return 1;<br>}  The result of the function execution is as follows:  SQL:<br>SELECT l2.CaseKey FROM Case_Val l1, Case_Val l2<br>WHERE l1.rowkey = 110<br>AND l1.CaseKey = l2.CaseKey<br>AND l2.rowkey = 1<br>AND l1.d3 = :p1<br>AND l2.d2 > :p2  ARRAY ParamNames:<br>Untyped01 Now  "},{"id":199,"title":"StatEnd&amp;()","url":"38398.htm","text":"Syntax  StatEnd&(      EventName$,      ErrCode&)  Description  Ends and processes a Process Engine Statistics Module (PSM) statistic event (see the Performance Guide for Singleview).  Parameters  Parameter  Description  EventName$  Name of the statistics event.  The syntax of the event name is '<class>:<event>'.  Configurers can define their own arbitrary event classes and names (see the Performance Guide for Singleview).  ErrCode&  Identifies statistic records that have resulted in an error.  Returns  0 if successful; non-zero value if there is an error.  Remarks  The function, used in conjunction with StatStart&(), allows a configurer to generate Process Engine statistics.  The function generates a server-based EPM task event.  Statistics are stored according to the statistic setting specified in the pe_debug server utility (see the System Reference Guide for Singleview), or in a PSM configuration file.  Example  The following code fragment is a remote EPM function used as an API entry point:  {<br>    var ErrCode&;<br>    ...<br>    # Start the API statistic event<br>    StatStart&()<br>    ...    # do the API processing<br>    ...    # set ErrCode& if API fails      # End and process the API statistic event<br>    StatEnd&('API:MyFunction', ErrCode&);<br>}  "},{"id":200,"title":"StaticObj@()","url":"9441.htm","text":"Syntax  StaticObj@(      class$,      name$)  Description  Gets the OID of an object in a static class.  The function is deterministic.  Parameters  Parameter  Description  class$  Name of the class from which to find the object.  name$  Unique value of the Name fact of the object to return.  Returns  OID of the object if successful; otherwise, an exception is raised.  Remarks  A dependency between the trigger and the static object is also created, which means that the static object cannot be made obsolete without first removing the reference from the EPM script.  Example  Retrieve the OID for the Billing Inquiry object in the Issue_Type class:  {<br>    var myIssueType@ := StaticObj@('Issue_Type', 'Billing Inquiry');<br>}  It is preferable to use constant strings as in the example above; otherwise, the function is not evaluated at compile time, so no dependency between the trigger and the static object is created.  "},{"id":201,"title":"StatStart&amp;()","url":"38397.htm","text":"Syntax  StatStart&()  Description  Starts a Process Engine Statistics Module (PSM) statistic event (see the Performance Guide for Singleview).  Parameters  Parameter  Description  None.  Returns  0 if successful; otherwise, an exception is raised.  Remarks  The function, used in conjunction with StatEnd&(), allows generation of Process Engine statistics.  Example  The following code fragment is a remote EPM function used as an API entry point:  {<br>    var ErrCode&;<br>    ...      # Start the API statistic event<br>    StatStart&()<br>    ...    # do the API processing<br>    ...    # set ErrCode& if API fails      # End and process the API statistic event<br>    StatEnd&('API:MyFunction', ErrCode&);<br>}  "},{"id":202,"title":"TempObjectCreate@()","url":"9443.htm","text":"Syntax  TempObjectCreate@(      class@,      facts@[],      factValues?[])  Description  Inserts a temporary object into the public cache.  It is recommended that the function be used instead of ObjectInsert@() when creating temporary or external objects, because it is more efficient.  Parameters  Parameter  Description  class@  Class of the object to create and must be a class with usage type of External.  facts@[]  Facts to be used when creating an object.  The object type of the facts must be compatible with the type of the object being created.  factValues?[]  Fact values to be used when creating an object.  The fact values can be converted.  Returns  OID of the inserted temporary object if successful; otherwise, an exception is raised.  Remarks  The size of the facts@[] and factValues?[] arrays must be the same.  Only objects of classes with usage type of External can be created by the function.  The object is not in update mode.  Example  Create a temporary enquiry object:  {<br>    var thisCase@ := CurrentObjectGet@();<br>    var enquiryType@ := StaticObj@('TempClass_Type',<br>                                  'Enquiry');<br>   var myTempObject@ := TempObjectCreate@(Class:TempClass@, <br>                   [Fact:TempClass.Case@,<br>                   Fact:TempClass.Type@],<br>                   [thisCase@, enquiryType@]);<br>}  "},{"id":203,"title":"TempObjectSet&amp;()","url":"51871.htm","text":"Syntax  TempObjectSet&(      RefSubset@,      ObjOid@,      FactOid@[],      RefFactOid@[],      ValueArrays?[])  Description  Inserts a set of temporary objects to replace the function performed by External Services.  Parameters  Parameter  Description  RefSubSet@  Reference subset fact for populating object keys for newly-created objects.  ObjOid@  Parent object of newly-created objects containing a reference subset fact.  FactOid@[]  List of facts set when creating new objects.  RefFactOid@[]  Optional reference lookup facts for setting denormalised facts.  ValueArrays?[]  List of fact values for creating new objects.  Returns  Number of temporary objects inserted.  Remarks  Example of On Client Request trigger:  {<br>    var result&;    var ExtClass1_Name$[];<br>    var ExtClass1_Description$[];<br>    var ExtClass1_Integer&[];<br>    var ValueArrays?[];      ExtClass1_Name$[0] := 'Fred';<br>    ExtClass1_Description$[0] := 'FredDescription';<br>    ExtClass1_Integer&[0] := 55;<br>    ExtClass1_Name$[1] := 'Tom';<br>    ExtClass1_Description$[1] := 'TomDescription';<br>    ExtClass1_Integer&[1] := 66;      ValueArrays?[0][] := ExtClass1_Name$[];<br>    ValueArrays?[1][] := ExtClass1_Description$[];<br>    ValueArrays?[2][] := ExtClass1_ExtRefA@[];<br>    print('ValueArrays = ' + to_string( ValueArrays?[] ) );      result& := TempObjectSet&( Fact:Class188.MyExternalChildren@, CurrentObjectGet@(),<br>    [Fact:ExtClass1.Name@, Fact:ExtClass1.Description@, Fact:ExtClass1_Integer&],<br>    [null@, null@, null@], ValueArrays?[]);      print('TempObjectSet success: Result = ' + to_string(result&));<br>}  The size of fact@[] arrays and ValueArrays?[] array must match.  Only objects of classes with usage type External can be created using the function.  Newly-created objects are not in update mode.  "},{"id":204,"title":"to_blob_array@[]()","url":"9445.htm","text":"Syntax  to_blob_array@[](      blobArray?)  Description  Converts an unknown value to a blob array.  The function is deterministic.  Parameter  Parameter  Description  blobArray?  Blob array that needs casting.  Returns  Blob array if successful; otherwise, an exception is raised.  Example  With a trigger on the Case class, make all issues associated with the current case obsolete:  {<br>    ...      var i&;      # delete all issues from this case<br>    var thisCase@ := CurrentObjectGet@();<br>    var issuesAny? := ObjectFactGet?(thisCase@,<br>                      Fact:Case.All_Issues@);<br>    if (is_defined(issuesAny?)) {<br>        var issues@[] := to_blob_array@[](issuesAny?);<br>        for (i& := 0; i& < length(issues@[]); ++i&) {<br>            ObjectRemove&(issues@[i&]);<br>        }<br>    }<br>}  "},{"id":205,"title":"to_objid@()","url":"9447.htm","text":"Syntax  to_objid@(      objclass&,      objkey&)  Description  Converts a class key and object key to an OID.  The function is deterministic.  Parameters  Parameter  Description  objclass&  Class of the object.  objkey&  Primary key of the object.  Returns  One of the following:  OID representing the specified object  Undefined result if objectkey& is undefined  Exception if objclass& is invalid or undefined, or objectkey& is invalid.  Example  On Client Request trigger:  {<br>    # construct an OID from the client parameters<br>    # passed in by the trigger<br>    var myObject@ :=<br>        to_objid@(to_integer(ClientParamGet$(1)), to_integer(ClientParamGet$(2)));<br>    var class@ := ClassGet@(myObject@);<br>    if (class@ = Class:Case@) {<br>        # Do processing in the knowledge that this <br>        # is a Case object<br>        print('Class is Case');<br>    }<br>    else {<br>        # Perform processing for invalid class<br>        print('Invalid Class');<br>    }<br>}  "},{"id":206,"title":"Trace&amp;()","url":"9395.htm","text":"Syntax  Trace&(      traceMessage$)  Description  Enables output of trace statements within EPM code.  For information about switching on tracing using the Administration Tool, refer to the System Administration Guide for Singleview.  Parameter  Parameter  Description  traceMessage$  Trace message to be output to the trace logs.  Returns  Null if successful; otherwise, an exception is raised.  Example  Trace the start and end of the MyTrigger trigger:  {<br>    Trace&(\"Trigger MyTrigger Begin\");<br>    # Do Trigger logic here…<br>    Trace&(\"Trigger MyTrigger End\");<br>}  "},{"id":207,"title":"TransactionGet@[]()","url":"9451.htm","text":"Syntax  TransactionGet@[]()  Description  Returns a list of objects in the current transaction.  Parameters  Parameter  Description  None.  Returns  Array of OIDs, or an empty array if there is no current transaction.  Remarks  The first object returned is the root of the transaction, followed by all dependent objects (in the order in which they are displayed in the transaction context).  If the current object executing the trigger that calls the function is not the root object in the private cache, an empty array is returned.  Example  Perform processing for each object within the current transaction:  {<br>    var objects@[] := TransactionGet@[]();<br>    for ( i& := 0; I& < length(objects@[]); ++i&) {<br>        # Process each object in the transaction<br>    }<br>}  "},{"id":208,"title":"ViewEmails&amp;()","url":"57795.htm","text":"Syntax  ViewEmails&(      EmailID&[],      Params?{})  Description  Displays the Email page with an array of objects so that a user can view one or more email objects.  Parameters  Parameter  Description  EmailID&[]  Array of email IDs.  Params?{}  Information on how emails are displayed, and other contextual parameters.  Valid hash keys are listed in the table below.  Returns  None.  Remarks  The following table lists hash keys for Params${}.  Params?{} Hash Keys  Parameter  Description  ACTIVE&  Key of the currently-expanded email.  Expanded&[]  Array of keys of email objects displayed as expanded in addition to the currently-expanded email (ACTIVE&).  VIEW_ONLY&  Displays email as view only. Email is not editable.  Valid values are   0 (editable)  1 (view only).  Deprecated parameter maintained for backward compatibility.  CONTEXT_PARAMS  Parameters that are passed back to a specified function when an email is sent or saved. CONTEXT_PARAMS can be used to pass in any context parameter (for example, Case ID and Contact ID).  This parameter is deprecated, and maintained only for backward compatibility.  "},{"id":209,"title":"Warn&amp;()","url":"9397.htm","text":"Syntax  Warn&(      MessageOid@,      params$[])  Description  Aborts with a warning that is returned to the client.  When the warning is returned to the user, it can be overridden, in which case the EPM script executes again, this time ignoring the warnings raised.  Parameters  Parameter  Description  MessageOid@  OID of the message object in the Message class.  Params$[]  Parameters to be substituted into the message.  Returns  Null if successful; otherwise, an exception is raised.  Remarks  This function:  Registers the specified message in the Process Engine server and raises an exception.  The exception can be caught by a function or trigger in a try-except expression.  Can only be called if there is a current transaction, which can be used to store the warning override information.  An exception is thrown if this is not the case.  Example  With a trigger on the Issue class, warn the user if the salary of the contact for the issue is outside the acceptable range:  {<br>    var issue@ := CurrentObjectGet@();<br>    var contact@ := to_blob(ObjectFactGet?(issue@,Fact:Issue.Contact@));<br>    var salary& := <br>     to_integer(ObjectFactGet?(contact@, Fact:Contact.Salary@));      if (salary& < 1000) {<br>        Warn&(Message:SalaryTooSmall@, [to_string(salary&)]);}<br>    else if (salary& > 200000) {<br>        Warn&(Message:SalaryTooLarge@, [to_string(salary&)]);<br>    }<br>}  "},{"id":210,"title":"Shared Built-in Convergent Billing EPM Functions","url":"57370.htm","text":"Process Engine is able to use a number of built-in Convergent Billing functions.  This section describes the EPM functions shared between Process Engine and Convergent Billing.  For more information about Convergent Billing EPM functions refer to the Configuration Fundamentals Guide for Singleview Convergent Billing.  "},{"id":211,"title":"biSwitchCBProcessLogFile&amp;()","url":"63596.htm","text":"Syntax  biSwitchCBProcessLogFile&()  Description  Closes and re-opens the standard output or standard error files in all Tuxedo servers, and Convergent Billing and Process Engine processes in the current instance.  Attributes  Application Environment  Any  Context  Any  Method  Remote  Parameter  Description  None.  Returns  Total number of Tuxedo servers and non-Tuxedo processes notified on the current instance.  Remarks  The function assumes that the standard output and error files are named $ATA_DATA_SERVER_LOG/stdout and $ATA_DATA_SERVER_LOG/stderr respectively.  This function broadcasts the LoggerReload&() function to all Convergent Billing and Process Engine processes to reload the advanced logging configuration.  Additional processes or Tuxedo servers can be specified using the SwitchCBProcessLogFile.NotifyProcessList$[] or the SwitchCBProcessLogFile.NotifyTuxedoServerList$[] functions respectively.  "},{"id":212,"title":"biTrcEpm&amp;()","url":"12219.htm","text":"Syntax  Interface 1  Interface 2  biTrcEpm&(      Enable&)  biTrcEpm&(      Enable&,      const Server$)  Interface 3  Interface 4  biTrcEpm&(      Enable&,      DebugLevel&)  biTrcEpm&(      Enable&,      DebugLevel&,      const Server$)  Description  Enables or disables EPM function tracing.  Attributes  Application Environment  Any  Context  Any  Method  Remote  Parameter  Description  Enable&  In: Enable or disable EPM tracing.  Valid values are:  1 (Enable)  0 (Disable).  DebugLevel&  In:  Enable EPM tracing debug.  Valid values are:  1 (Light Debug):  Function calls and contents of the debug() function call are included in the trace; function parameters and return values are not included in trace.  2 (Full Debug):  Function parameters and return values are included in the trace.   3 (Light Debug with call stack entries): Same as 1 (Light Debug) with trace output for call stack entries and exits made by Singleview.   4 (Full Debug with call stack entries): Same as 2 (Full Debug) with trace output for call stack entries and exits made by Singleview.    The parameter is optional.  Full debug is enabled by default if the parameter is not specified.  These values are the same as those supported by the debug() function.  Server$  In:  Process name of the Tuxedo servers for which EPM tracing is to be enabled or disabled.  The parameter is optional.  Returns  Number of servers notified.  Remarks  This function is supported for the following Tuxedo servers that do not contain their own explicit support for EPM tracing:  trerodb  trerwdb  tresok  treproxy  tremon  tresec  authsvr  f_asp  f_rsp  f_abp  f_itp  f_smp  f_lmp.  Each notified process writes to its own trace file in the $ATA_DATA_SERVER_LOG directory.  Files are generated with file names of biTrcEpm<groupid>.<serverid>.trc, where <groupid> and <serverid> are the Tuxedo group and server IDs of the process.  If the Server$ parameter is specified, only those servers with the specified process name are notified to enable or disable EPM function tracing.  "},{"id":213,"title":"biTrcTre&amp;()","url":"12225.htm","text":"Syntax  Interface 1  Interface 2  biTrcTre&(      DebugLevel&)  biTrcTre&(      DebugLevel&,      const&nbsp;Server$)  Description  Enables or disables TRE function tracing in Tuxedo server processes for the current instance.  Attributes  Application Environment  Any  Context  Any  Method  Remote  Parameter  Description  DebugLevel&  In:  Set trace level. Valid values are:  1 (On)  0 (Off).  Server$  In:  Process name of server process to restrict enabling/disabling of TRE tracing.  It is optional.  Returns  Number of servers notified.  Remarks  If tracing is enabled, each Tuxedo server process notified appends subsequent TRE trace to its own file in the $ata_data_server_log directory.  Files are generated with file names of biTrcTre<groupid>.<serverid>.trc, where <groupid> and <serverid> are the Tuxedo group and server IDs of the process.  If the Server$ parameter is specified, only those servers with the specified process name are notified.  "},{"id":214,"title":"DerivedAttributeArrayDelete&amp;()","url":"14536.htm","text":"Syntax  DerivedAttributeArrayDelete&(      DerivedAttributeId&,      OldEffectiveDate~,      var&nbsp;LastModified~,      EffectiveStartDate~,      EffectiveEndDate~,      const&nbsp;Rows?[])  Description  Deletes rows from a derived attribute table.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  DerivedAttributeId&  In:  ID of the derived attribute.  OldEffectiveDate~  In:  Date-time used to retrieve the derived attribute table.  LastModified  In:  Last modified date-time of the derived attribute table effective as at OldEffectiveDate~.  Out:  Last modified date-time of the updated derived attribute table as at EffectiveStartDate~.  EffectiveStartDate~  In:  Start of the date-time range for which changes are to be made.  EffectiveEndDate~  In:  End of the date-time range for which changes are to be made.  Rows?[]  In:  Two-dimensional array of rows to be deleted.  Values must be specified for all indexes in the derived attribute table. They must be in entity validation order and match the entity validation types.  Returns  Number of rows successfully deleted.  If the function is not successful (or if either EffectiveStartDate~ or EffectiveEndDate~ are outside the derived attribute record's date-time range), an error is raised.  Remarks  This function provides a simplified version of the delete operation of interface 1 of DerivedAttributeArrayUpdate&().  When it determines the derived attribute table rows that need to be deleted, it calls interface 1 of DerivedAttributeArrayUpdate&() to perform the deletions. Therefore, other functionality and restrictions that apply to interface 1 of DerivedAttributeArrayUpdate&() also apply to this function.  It is usually used to manage derived attribute tables associated with partition exception derived attributes (for example, AccountPartitionException, CustomerPartitionException, and ServicePartitionException) (see the Configurer's Reference Guide for Singleview Convergent Billing (Vol. 1)).  The derived attribute associated with the table (identified by DerivedAttributeId&) must have a STORAGE_CONTEXT_CODE of Global (5) or Global-Shared (6).   If the table is configured with a storage context of Global, the derived attribute table is purged from all process caches.  If the table is configured with a storage context of Global-Shared, the table is incrementally updated in the shared memory cache.  If the executing instance is part of a cluster, the purge or update is repeated on each instance in the cluster.  The sequence number of the derived attribute table rows is maintained internally.  Updates spanning multiple date ranges are not supported.  The last modification date-time of the derived attribute table is automatically updated when deletions are completed.  Both EffectiveStartDate~ and EffectiveEndDate~ must be specified.  "},{"id":215,"title":"DerivedAttributeArrayFetchById&amp;()","url":"35188.htm","text":"Syntax  Interface 1  Interface 2  DerivedAttributeArrayFetchById&(      const DAId&,      const EffectiveDate~,      const FieldNames$[],      var FieldValues?[])  DerivedAttributeArrayFetchById&(      const DAId&,      const EffectiveDate~,      WhereClause$,      OrderByClause$,      FromRow&,      ToRow&      const FieldNames$[],      var FieldValues?[])  Description  Fetches derived attribute table rows or extended derived attribute table rows in sequence number or extended row ID order respectively.  Attributes  Function Type  Local  Service  (Local)  Application Environment  Any  Context  Any  Parameter  Description  DAId&  In:  ID of the global derived attribute whose derived attribute table rows are to be updated.  EffectiveDate~  In:  Effective date-time used to retrieve the required derived attribute table rows or extended derived attribute table rows.  WhereClause$  In:  SQL Where clause to be used in the search.  OrderByClause$  In:  Optional SQL Order By clause to be used in the search.  FromRow&  In:  First row of search results. Row numbering starts at 1.  ToRow&  In:  Last row of search results. Specify 0 or -1 to return all remaining rows.  FieldNames$[]  In:  Column names from DERIVED_ATTRIBUTE_ARRAY or DERIVED_ATTR_ARRAY_EXT for which a value is required.  An error is raised if the array is empty.  FieldValues?[]  In:  Two-dimensional array of field values in [row][field] order.  Returns  Number of rows found.  Remarks  Interface 2 fetches derived attribute table rows or extended derived attribute table rows using the specified WhereClause$ and OrderByClause$.   Fields to return are specified in the FieldNames$[] parameter.  To retrieve rows for derived attribute tables using extended features, the effective user requires view access to either of the following:  Derived attribute table, if row-level security is not enabled.  Required derived attribute table rows, if row-level security is enabled.  "},{"id":216,"title":"DerivedAttributeArrayFetchById?[]()","url":"35190.htm","text":"Syntax  Interface 1  Interface 2  DerivedAttributeArrayFetchById?[](      const DAId&,      const EffectiveDate~)  DerivedAttributeArrayFetchById?[](      const DAId&,      const EffectiveDate~,      WhereClause$,      OrderByClause$,      FromRow&,      ToRow&)  Description  Fetches derived attribute table rows or extended derived attribute table rows in sequence number or extended row ID respectively.  Attributes  Function Type  Local  Service  (Local)  Application Environment  Any  Context  Any  Parameter  Description  DAId&  In:  ID of the global derived attribute whose derived attribute table rows are to be updated.  EffectiveDate~  In:  Effective date-time used to retrieve the required derived attribute table rows or extended derived attribute table rows.  WhereClause$  In:  SQL Where clause to be used in the search.   OrderByClause$  In:  Optional SQL Order By clause to be used in the search.  FromRow&  In:  First row of search results. Row numbering starts at 1.  ToRow&  In:  Last row of search results. Specify 0 or -1 to return all remaining rows.  Returns  Field values are returned in a two-dimensional array in [row][field] order.  Remarks  Interface 2 fetches derived attribute table rows or extended derived attribute table rows using the specified WhereClause$ and OrderByClause$.   The order of the fields in the returned rows is determined from SEQNR in ENTITY_VALIDATION_LIST for the derived attribute.  Field values are cast to data type according to attribute type.  To retrieve rows for derived attributes tables using extended features, the effective user requires view access to either of the following:  Derived attribute table, if row-level security is not enabled.  Required derived attribute table rows, if row-level security is enabled.  "},{"id":217,"title":"DerivedAttributeArrayUpdate&amp;()","url":"14537.htm","text":"Syntax  Interface 1  Interface 2  DerivedAttributeArrayUpdate&(      DerivedAttributeId&,      OldEffectiveDate~,      var&nbsp;LastModified~,      EffectiveStartDate~,      EffectiveEndDate~,      const Opcode&[],      const RowId&[],      const Rows?[])  DerivedAttributeArrayUpdate&(      DerivedAttributeId&,      OldEffectiveDate~,      var&nbsp;LastModified~,      EffectiveStartDate~,      EffectiveEndDate~,      const&nbsp;Rows?[])  Interface 3  DerivedAttributeArrayUpdate&(      const DerivedAttributeId&,      const OldEffectiveDate~,      var&nbsp;LastModified~,      const EffectiveStartDate~,      const EffectiveEndDate~,      Opcodes&[],      SeqNr&[],      const FieldNames$[],      FieldValues?[],      const DoNotPurgeIndCode&)  Description  Maintains derived attribute tables that have a storage context of Global or Global-Shared, including derived attribute tables using extended features.  Attributes  Function Type  Local Built-in  Service  (Local)  Application Environment  Any  Context  Any  Parameter  Description  DerivedAttributeId&  In:  ID of the derived attribute to be updated.  OldEffectiveDate~  In:  Date-time used to retrieve the derived attribute table.  LastModified~  In:  Last modified date-time of the derived attribute table effective as at OldEffectiveDate~.  If this record does not exist for a tenanted derived attribute, the last modified date-time is ignored on input.  Out:  Last modified date-time of the updated derived attribute table as at EffectiveStartDate~.  EffectiveStartDate~  In:  Start of the date-time range for which changes are to be applied.  It is mandatory.  EffectiveEndDate~  In:  End of the date-time range for which changes are to be applied.  It is mandatory.  Opcode&[]  OpCodes&[]  Operations to perform on the row.  RowId&[]  Seqnr&[]  In:  If a derived attribute is using standard features, sequence number of the row or rows being inserted, updated, or deleted.  The following applies when specifying sequence numbers for derived attributes using standard features:  Sequence numbers are processed (and therefore interpreted) in the order in which they are specified.  Therefore, deleted rows must be specified in descending sequence order (for example, 6,3,2), and inserted rows must be specified in ascending sequence order (for example, 2,3,6).  The starting number for the first row is 1 (not 0).  For example, to delete the first three rows from the table, specify 3,2,1 (not 2,1,0).  The contiguity of sequence numbers is maintained by this function.  For derived attributes using extended features, it contains extended derived attribute row IDs instead of normal sequence numbers. When inserting rows, it must be specified with a placeholder value (for example, null&) because the row IDs are allocated automatically, and cannot be specified.  Rows for derived attribute tables using extended features are processed in the following order:  Insert  Update  Delete.  Rows?[]  In:  Two-dimensional array of rows inserted, updated, or deleted (if supported by the interface using Opcode&[]).  An empty row can be specified when deleting.  The first dimension is the row number, and the second dimension is the column number (as defined by entity validation).  The data type of the array element must be cast using the appropriate type indicator.  For example, if entity validation specifies a real, the value is referenced using the real type indicator (#).  FieldNames$[]  In: Names of the fields in the DERIVED_ATTRIBUTE_ARRAY_TRE_V view to be updated.  FieldValues?[]  In: Values to be updated. It is a two-dimensional array in [Row][Field] order. An empty row can be specified for records being deleted.  DoNotPurgeIndCode&  In: If set to:   1, the derived attribute table is not purged from the cache.   0, the derived attribute table is purged.  Returns  Interface 1 returns the number of rows successfully processed, which should equal the size of Opcode&[]).  Interface 2 returns the number of rows successfully processed for insert and update.  For both interfaces, if the function is not successful (or if either EffectiveStartDate~ or EffectiveEndDate~ are outside the derived attribute record's date-time range), an error is raised.  Remarks  If the derived attribute is configured to be tenantable (TENANT_IND_CODE is set to 1), and the implementation is:   Untenanted and an empty table does not exist, an empty derived attribute table for the derived attribute is created during the first successful call to this function.   Tenanted, an empty derived attribute table is created for each tenant the first time a user associated with a specific tenant calls this function.  The empty derived attribute table has the following properties:  Spans the date range of the derived attribute definition effective as at the date of the update (that is, OldEffectiveDate~).  Has a security group that matches the user's primary security group.  If the derived attribute has row-level security enabled, a user must have update privileges to the security group of the derived attribute table to insert rows into the table. If a security group is not specified for the new derived attribute table rows, the security group matches the primary security group of the user.  Access to view, update, and delete derived attribute table rows is controlled by the security group of the:  Row, if row-level security is enabled.  Derived attribute table, if row-level security is not enabled.   Interface 1  Interface 1 is used to insert, update, or delete rows.  The following applies:  The operation (insert, update, or delete) is specified explicitly using Opcode&[].  Entity validation defines fields that can be specified in Rows?[], and their order, data type, and whether they are mandatory.  On successful completion, if the updated derived attribute is of context:  Global, it is purged from the process caches.  Global-Shared, it is incrementally updated from the shared cache.  Interface 2  Interface 2 provides a simplified version of interface 1, and is used to insert and update rows.  To delete rows using a similar simplified interface, use the biDerivedAttributeDelete&() function.  The following applies:  The operation (insert or update) is specified implicitly.  The row identifiers (Seqnr&[] parameter) are not required.  This interface is usually used to manage derived attribute tables associated with partition exception derived attributes (for example, AccountPartitionException, CustomerPartitionException, and ServicePartitionException) (see the Configurer's Reference Guide for Singleview Convergent Billing (Vol. 1)).  When the function called using interface 2 determines the appropriate operation, the parameters are passed to interface 1 for further processing. Therefore, other functionality and restrictions that apply to interface 1 also apply to interface 2.  "},{"id":218,"title":"DerivedAttributeArrayUpdateNoPurge&amp;()","url":"14538.htm","text":"Syntax  DerivedAttributeArrayUpdateNoPurge&(      DerivedAttributeId&,      OldEffectiveDate~,      var&nbsp;LastModified~,      EffectiveStartDate~,      EffectiveEndDate~,      const Opcode&[],      const RowId&[],      const Rows?[])  Description  Performs the same actions as DerivedAttributeArrayUpdate&() interface 1, except that the updated derived attribute table is not purged at the completion of the operation.  Attributes  Function Type  Local Built-in  Service  (Local)  Application Environment  Any  Context  Any  Parameter  Description  DerivedAttributeId&  In:  ID of the derived attribute to be updated.  OldEffectiveDate~  In:  Date-time used to retrieve the derived attribute table.  LastModified~  In:  Last modified date-time of the derived attribute table effective as at OldEffectiveDate~.  Out:  Last modified date-time of the updated derived attribute table as at EffectiveStartDate~.  EffectiveStartDate~  In:  Start of the date-time range for which changes are to be applied.  It is mandatory.  EffectiveEndDate~  In:  End of the date-time range for which changes are to be applied.  It is mandatory.  Opcode&[]  Operations to perform on the row.  RowId&[]  In:  If a derived attribute is using standard features, sequence number of the row or rows being inserted, updated, or deleted.  The following applies when specifying sequence numbers for derived attributes using standard features:  Sequence numbers are processed (and therefore interpreted) in the order in which they are specified.  Therefore, deleted rows must be specified in descending sequence order (for example, 6,3,2), and inserted rows must be specified in ascending sequence order (for example, 2,3,6).  The starting number for the first row is 1 (not 0).  For example, to delete the first three rows from the table, specify 3,2,1 (not 2,1,0).  The contiguity of sequence numbers is maintained by this function.  For derived attributes using extended features, it contains extended derived attribute row IDs instead of normal sequence numbers. When inserting rows, it must be specified with a placeholder value (for example, null&) because the row IDs are allocated automatically, and cannot be specified.  Rows for derived attribute tables using extended features are processed in the following order:  Insert  Update  Delete.  Rows?[]  In:  Two-dimensional array of rows inserted, updated, or deleted (if supported by the interface using Opcode&[]).  An empty row can be specified when deleting.  The first dimension is the row number, and the second dimension is the column number (as defined by entity validation).  The data type of the array element must be cast using the appropriate type indicator.  For example, if entity validation specifies a real, the value is referenced using the real type indicator (#).  Returns  Number of rows successfully processed (which should equal the size of Opcode&[]); otherwise, an error is raised.  Remarks  Used to insert, update, or delete rows.  The following applies:  The operation (insert, update, or delete) is specified explicitly using Opcode&[].  Entity validation defines fields that can be specified in Rows?[], and their order, data type, and whether they are mandatory.  If the derived attribute is assigned to a tenant, an empty derived attribute table for the derived attribute and tenant combination is created during the first successful call to this function by a user assigned to the same tenant, if an empty table does not exist already.  The empty derived attribute table has the following properties:  Spans the date range of the derived attribute definition effective as at the date of the update (that is, OldEffectiveDate~).  Has a security group that matches the user's primary security group.  If the derived attribute has row-level security enabled, a user must have update privileges to the security group of the derived attribute table to insert rows into the table. If a security group is not specified for the new derived attribute table rows, the security group matches the primary security group of the user.  Access to view, update, and delete derived attribute table rows is controlled by the security group of the:  Row, if row-level security is enabled.  Derived attribute table, if row-level security is not enabled.  "},{"id":219,"title":"DerivedAttributeId&amp;()","url":"52786.htm","text":"Syntax  Interface 1  Interface 2  DerivedAttributeId&(      const TableName$,      const IsDisplayName&)  DerivedAttributeId&(      const TableName$)  Description  Given the display name or internal name of a derived attribute table, retrieves the ID of the corresponding derived attribute from the cache.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  TableName$  In: Name of a derived attribute table.  IsDisplayName&  In: If TRUE, indicates TableName$ is the display name of the derived attribute table.  If FALSE, indicates TableName$ is the internal name of the derived attribute table.  Returns  ID of the derived attribute; otherwise, an error is raised.   Remarks  Interface 1 calls interface 2 with IsDisplayName$ set to FALSE.  If the derived attribute entry has not been loaded into the cache, it is loaded from the database before return.  "},{"id":220,"title":"DerivedAttributePurge&amp;()","url":"14539.htm","text":"Syntax  DerivedAttributePurge&(      DerivedAttributeId&)  Description  Used when the definition of a derived attribute is modified.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  DerivedAttributeId&  In:  ID of the derived attribute to purge.  Returns  1 (TRUE) if the definition of the derived attribute is successfully purged; otherwise, 0 (FALSE) if the derived attribute is not found in the cache.  Remarks  The derived attribute table is purged from either the global or non-global cache of the current process.  If multiple copies of this derived attribute are cached for different date ranges, all copies are removed.   If only the contents of a derived attribute table have been changed, use biDerivedTablePurge&().  "},{"id":221,"title":"DerivedAttributeTableDisplayName$()","url":"52788.htm","text":"Syntax   DerivedAttributeTableDisplayName$(      const DerivedAttributeId&)  Description  Given a derived attribute ID, retrieves the display name for a derived attribute table from the cache.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  DerivedAttributeId&  In: ID of the derived attribute.  Returns  Display name of the derived attribute table; otherwise, an error is raised.  Remarks  If the derived attribute entry has not been loaded into the cache, it is loaded from the database before return.  "},{"id":222,"title":"DerivedAttributeTableFix&amp;()","url":"14540.htm","text":"Syntax  DerivedAttributeTableFix&(      const WhereClause$,      DoCommit&)  Description  Checks entries in the DERIVED_ATTRIBUTE_TABLE table for the specified set of derived attributes (using DERIVED_ATTRIBUTE_HISTORY information), and inserts rows in the table for missing date ranges.  Attributes  Function Type  Local  Service  (Local)  Application Environment  Any  Context  Any  Parameter  Description  WhereClause&  In:  SQL WHERE clause to use on the DERIVED_ATTRIBUTE table (and restrict the number of derived attributes to be checked).  If not specified, all table-based derived attributes are checked.  DoCommit&  In:  Determines whether changes are committed. Valid values are:  TRUE: All changes are committed before function completion.  FALSE: Changes are not committed (caller responsibility).  Returns  Number of rows inserted into the DERIVED_ATTRIBUTE_TABLE table.  If a condition is detected that cannot be corrected, an error is raised.  Remarks  The function can be used to correct DVP errors on the DERIVED_ATTRIBUTE_TABLE table.  If date range gaps are found between the DERIVED_ATTRIBUTE_TABLE and the DERIVED_ATTRIBUTE_HISTORY tables, all rows in the DERIVED_ATTRIBUTE_TABLE are deleted and recreated.  "},{"id":223,"title":"DerivedAttributeTableName$()","url":"52787.htm","text":"Syntax  DerivedAttributeTableName$(      const DerivedAttributeId&)  Description  Given a derived attribute ID, retrieves the internal name for the corresponding derived attribute table from the cache.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  DerivedAttributeId&  In: ID of the derived attribute.  Returns  Internal name of the derived attribute table; otherwise, an error is raised.  Remarks  If the derived attribute entry has not been loaded into the cache, it is loaded from the database before return.  "},{"id":224,"title":"ReferenceCodeAbbrev$()","url":"13700.htm","text":"Syntax  ReferenceCodeAbbrev$(      const ReferenceTypeAbbrev$,      ReferenceCode&)  Description  Retrieves the reference code abbreviation of a reference item.  Attributes  Function Type  Local Built-in  Service  biFnEvaluateRO   Application Environment  Any  Context  Any  Parameter  Description  ReferenceTypeAbbrev$  In:  Reference type abbreviation that identifies the reference type.  ReferenceCode&  In:  Reference code or ID of the reference item for which the reference code abbreviation is to be returned.  Returns  Reference code abbreviation; otherwise, an error is raised.  Remarks  ReferenceCode& must be the reference:  Code, if EXTENDED_IND_CODE is:  Not set.  Set and ALLOW_REFERENCE_CODE_IND_CODE is set.  ID, if EXTENDED_IND_CODE is set and ALLOW_REFERENCE_CODE_IND_CODE is not set.  "},{"id":225,"title":"ReferenceCode&amp;()","url":"13699.htm","text":"Syntax  ReferenceCode&(      const ReferenceTypeAbbrev$,      const ReferenceCodeAbbrev$)  Description  Retrieves the reference code or ID of a reference item.  Attributes  Function Type  Local Built-in  Service  biFnEvaluateRO   Application Environment  Any  Context  Any  Parameter  Description  ReferenceTypeAbbrev$  In:  Reference type abbreviation that identifies the reference type.  ReferenceCodeAbbrev$  In:  Reference code abbreviation of the reference item for which the reference code is to be returned.  Returns  Reference code or ID; otherwise, an error is raised.  Remarks  This function returns the reference:  Code, if EXTENDED_IND_CODE is:  Not set.  Set and ALLOW_REFERENCE_CODE_IND_CODE is set.  ID, if EXTENDED_IND_CODE is set and ALLOW_REFERENCE_CODE_IND_CODE is not set.  "},{"id":226,"title":"ReferenceCodeAbbrevByLabel$()","url":"13701.htm","text":"Syntax  ReferenceCodeAbbrevByLabel$(      const ReferenceTypeLabel$,      ReferenceCode&)  Description  Returns the reference code abbreviation of a reference item.  Attributes  Function Type  Local Built-in  Service  biFnEvaluateRO   Application Environment  Any  Context  Any  Parameter  Description  ReferenceTypeLabel$  In:  Reference type label that identifies the reference type.  ReferenceCode&  In:  Reference code or ID of the reference item for which the reference code abbreviation is to be returned.  Returns  Reference code abbreviation; otherwise, an error is raised.  Remarks  ReferenceCode& must be the reference:  Code, if EXTENDED_IND_CODE is:  Not set.  Set and ALLOW_REFERENCE_CODE_IND_CODE is set.  ID, if EXTENDED_IND_CODE is set and ALLOW_REFERENCE_CODE_IND_CODE is not set.  "},{"id":227,"title":"ReferenceCodeByLabel&amp;()","url":"13702.htm","text":"Syntax  ReferenceCodeByLabel&(      const&nbsp;ReferenceTypeLabel$,      const&nbsp;ReferenceCodeLabel$)  Description  Returns the reference code or ID of a reference item.  Attributes  Function Type  Local Built-in  Service  biFnEvaluateRO   Application Environment  Any  Context  Any  Parameter  Description  ReferenceTypeLabel$  In:  Reference type label that identifies the reference type.  ReferenceCodeLabel$  In:  Reference code label of the reference item for which the reference code is to be returned.   Returns  Reference code or ID, if successful; otherwise, an error is raised.  Remarks  This function returns the reference:  Code, if EXTENDED_IND_CODE is:  Not set.  Set and ALLOW_REFERENCE_CODE_IND_CODE is set.  ID, if EXTENDED_IND_CODE is set and ALLOW_REFERENCE_CODE_IND_CODE is not set.  "},{"id":228,"title":"ReferenceCodeLabel$()","url":"13703.htm","text":"Syntax  ReferenceCodeLabel$(      const ReferenceTypeLabel$,      ReferenceCode&)  Description  Returns the reference code label or ID of a reference item.  Attributes  Function Type  Local Built-in  Service  biFnEvaluateRO   Application Environment  Any  Context  Any  Parameter  Description  ReferenceTypeLabel$  In:  Reference type label that identifies the reference type.  ReferenceCode&  In:  Reference code of the reference item for which the reference code label is to be returned.   Returns  Reference code label or ID, if successful; otherwise, an error is raised.  Remarks  This function returns the reference:  Code label, if EXTENDED_IND_CODE is:  Not set.  Set and ALLOW_REFERENCE_CODE_IND_CODE is set.  ID, if EXTENDED_IND_CODE is set and ALLOW_REFERENCE_CODE_IND_CODE is not set.  "},{"id":229,"title":"SQLCacheSize&amp;()","url":"13799.htm","text":"Syntax  SQLCacheSize&(      const&nbsp;NewSize&)  Description  Modifies the maximum number of Oracle Call Interface (OCI) handles cached for reuse.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  NewSize&  In:  Maximum number of OCI statement handles that are cached for reuse.  The value of NewSize& should be in the range 0 to 100, where 0 implies no statement handles are cached, and 100 is an upper limit designed to prevent the allocation of too many Oracle resources.  Returns  Old cache size.  Remarks  Caching of statement handles is used to improve performance of SQL operations by removing the need to re-parse statements.    When a process starts the default cache size is set to either the value of the environment variable $ATA_SQLCACHESIZE, or 30 if the environment variable is not defined.  "},{"id":230,"title":"SQLClose&amp;()","url":"13800.htm","text":"Syntax  SQLClose&(      var&nbsp;Handle@)  Description  Closes an SQL statement handle returned by a previous call to SQLOpen@() or SQLOpenArray@() and releases the resources associated with the SQL statement.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  Handle@  In:  SQL statement handle returned from a previous call to SQLOpen@() or SQLOpenArray@().  Out:  Undefined value if closed successfully.  Returns  1 (TRUE) if the statement handle is successfully closed and Handle@ is undefined; otherwise, an error is raised if the statement handle is invalid or has been closed.  "},{"id":231,"title":"SQLDescribe?[]()","url":"13802.htm","text":"Syntax  SQLDescribe?[](      const&nbsp;SQLText$)  Description  Returns the characteristics of the columns specified in the SQLText$ SELECT statement.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  SQLText$  In:  SQL SELECT statement whose columns are to be described.  Returns  Array of hashes, with each element in the array corresponding to a column in the SELECT list (the first element in the array corresponds to the first column, and so on).  If the SQL SELECT statement is invalid, an error is raised.  Remarks  The following table lists statistics returned for each array element.  Statistics Returned in Array Elements  Key  Type  Description  ColumnName  String  Name of the column being returned.  TreType  Integer  TRE data type of this column.  Possible return types are:  TRE_LONG (1)  TRE_DOUBLE (2)  TRE_STRING (4)  TRE_DATETIME (8)  TRE_BLOB (9)  Mandatory  Integer  1 (TRUE), if this column must always contain a value.  2 (FALSE), if this column can contain null values.  Size  Integer  Maximum number of bytes that can be returned in this column (only present for columns with type TRE_STRING).  If the column is stored in the database as an Oracle LONG or CLOB data type, a TreType of TRE_STRING is returned, but this key is not present (that is, there is no maximum size).  Precision  Integer  Maximum number of significant digits that can be stored in this column.  It only works with data types TRE_LONG or TRE_DOUBLE.  It is not present when a column of type TRE_DOUBLE does not have a specified precision.  Scale  Integer  Number of significant digits after the decimal point.  It only works for columns of type TRE_DOUBLE).  I is not present when a column of type TRE_DOUBLE does not have a specified scale.  "},{"id":232,"title":"SQLDuplicateBindCheck&amp;()","url":"52250.htm","text":"Syntax  SQLDuplicateBindCheck&()  Description  Controls how Singleview handles duplicate bind variables detected in functions.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  2 (an error is raised for duplicate bind variables), by default.  Remarks  This function can be modified so that if duplicate bind variables are passed to a function, one of the following values is returned:  0 (Duplicate bind variables are silently ignored)  1 (A warning message is logged for duplicate bind variables)  2 (An error is raised for duplicate bind variables).  This function is deterministic (the same result is returned each time the function is called).  "},{"id":233,"title":"SQLExecute&amp;()","url":"13803.htm","text":"Syntax  SQLExecute&(      const&nbsp;SQLText$,      const&nbsp;ParamNames$[],      const&nbsp;ParamValues?[])  Description  Prepares the specified SQL statement (typically insert, update, or delete), binds any specified parameters, and executes the SQL statement.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  SQLText$  In:  SQL query to be performed.  Parameter names in the query text should be preceded by a ':'.  ParamNames$[]  In:  List of parameter names in the query.  Parameter names in this array should not include the ':'.  ParamValues?[]  In:  Corresponding values to assign to each parameter name in the query.  Array elements can be used.  For information about array elements, refer to Remarks below.  Returns  Number of rows affected by the statement (can be zero).  If the execution of the preparation, any of the binds, or the query itself fails, an error is raised.  Remarks  This function is similar to the biSQLExecute&() function, except that the statement is executed from within the current process (rather than causing a TRE call to a server to execute the statement) and ParamValues?[] can contain array elements.  The following is true for this function:  The function can only be used in processes that have an SQL server connection to the database.  For this reason, the function cannot be called from within EPM code running in the ecp process or the Convergent Billing client.  The transactional behaviour of the query is dependent on the process in which it is run.  If called from within a trerwdb process, it is part of a global transaction managed by the TRE.  If called from within a trerodb process (or most other processes), it is a part of a locally managed transaction.  Since the query is executed within the current process, it has a lower overhead and better performance than the same query executed using the biSQLExecute&() function.  If running from within a global transaction, it is possible to recover from errors raised by this function without aborting the transaction.  An error raised by any biSQLExecute&() call causes the transaction to be aborted.  ParamNames$[] holds the variable names used in the SQLText$ parameter.  Valid parameter names are identified in SQLText$ by a ':' followed by a name.  Only the variable name is included in ParamNames$[] (that is, without the colon).  The parameter values for the variable names are passed in the ParamValues?[] array.  The elements of ParamValues?[] must be either all base elements (for example, string or integer) or all array elements (for example, string array or integer array).  If array elements are used, all array elements must have the same number of values.  The effect of using array elements is the same as executing the SQL statement once for every row in the arrays.  Blob types are not supported by array operations.  The following is an example using array elements:  # Delete rows from test_table that have a test_table_ID of 1, 2 and 3<br># and are effective for the current date. <br>var&nbsp;lTestIds&[] := [ 1,2,3 ];<br>var&nbsp;lNow~ := current_date();<br>var&nbsp;lEffectiveDates~[] := [ lNow~, lNow~, lNow~ ];<br>SQLExecute&('DELETE FROM test_table WHERE test_table_ID = :ID AND<br>            :eff_date BETWEEN effective_start_date AND effective_end_date', <br>            [ 'ID', 'eff_date' ], <br>            [ lTestIds&[], lEffectiveDates~[] ] );  "},{"id":234,"title":"SQLFetch?[]()","url":"13804.htm","text":"Syntax  SQLFetch?[](      var&nbsp;Handle@)  Description  Fetches the next row from the SQL statement handle returned by a previous call to SQLOpen@() or SQLOpenArray@().  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  Handle@  In/Out:  SQL statement handle returned from a previous call to SQLOpen@() or SQLOpenArray@().  Returns  Single-dimensional array containing the next row returned from the opened SQL statement, or an undefined array if all rows have been returned.  If the statement handle is invalid or closed, an error is raised.  Remarks  An undefined array is returned if all rows have been returned.  "},{"id":235,"title":"SQLOpen@()","url":"13805.htm","text":"Syntax  SQLOpen@(      const&nbsp;SQLText$,      const&nbsp;ParamNames$[],      const&nbsp;ParamValues?[])  Description  Prepares the specified SQL statement, binds any specified parameters, and executes the SQL statement.  Not calling SQLClose&() for a statement handle returned by a successful SQLOpen@() call results in memory and Oracle cursor leaks in the calling process.  It is recommended that all code after an SQLOpen@() call and just before the SQLClose&() call be contained in an EPM try-except expression.    The try-except expression closes the cursor if an error is raised while the block is being processed.  Statement handles are local to the current process and must not be passed between processes using remote function calls.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  SQLText$  In:  SQL SELECT statement to be executed.  Parameters in the text must be preceded by a colon (':').  ParamNames$[]  In:  List of parameter names in SQLText$.  The parameter names must not include the colon.  ParamValues?[]  In:  Corresponding values to assign to each parameter in the statement.  Returns  Opaque reference to the statement handle if the call is successful; otherwise, an error is raised if the prepare, any of the binds, or the execute fails.  Remarks  A statement handle is returned that must be passed to SQLFetch?[]() to fetch each row returned from the statement.  After all rows have been retrieved, SQLClose&() must be called to close the statement handle and release resources.  The following restrictions apply to the function:  It can only be used in processes that have an SQL server connection to the database.  Therefore, it cannot be called from within EPM code running in the ecp process or the Convergent Billing client.  The transactional behaviour of the statement is dependent on the process in which it is run.  If called from within a trerwdb process, the statement is part of a global transaction managed by the TRE.  If called from within a trerodb process (or most other processes), the statement is part of a locally managed transaction.  ParamNames$[] holds the bind variable names which are present in SQLText$.  Valid parameter names are identified in SQLText$ by a colon (':'), followed by a name.  Only the name must be specified in ParamNames$[]; that is, do not include the colon.  "},{"id":236,"title":"SQLOpenArray@()","url":"13806.htm","text":"Syntax  SQLOpenArray@(      const&nbsp;SQLText$,      const&nbsp;ParamNames$[],      const&nbsp;ParamValues?[])  Description  Prepares the specified SQL statement, binds any specified parameters, and executes the SQL statement using the Oracle Call Interface (OCI).  The retrieval of CLOB and BLOB columns is not supported using this function.  SQLOpen@() must be used if CLOB and BLOB columns are to be retrieved.  Not calling SQLClose&() for a statement handle returned by a successful SQLOpen@() call results in memory and Oracle cursor leaks in the calling process.  It is recommended that all code after an SQLOpen@() call and just before the SQLClose&() call be contained in an EPM try-except expression.  The try-except expression closes the cursor if an error is raised while the block is being processed.  Statement handles are local to the current process and must not be passed between processes using remote function calls.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  SQLText$  In:  SQL SELECT statement to be executed.  Parameters in the text should be preceded by a colon (':').  ParamNames$[]  In:  List of parameter names in SQLText$.  The parameter names must not include the colon.  ParamValues?[]  In:  Corresponding values to assign to each parameter in the statement.  Returns  Opaque reference to the statement handle if the call is successful; otherwise, an error is raised if the prepare, any of the binds, or the execute fails.  Remarks  A statement handle is returned that must be passed to SQLFetch?[]() to fetch each row returned from the statement.  After all rows have been retrieved, SQLClose&() must be called to close the statement handle and releases resources.  The function is identical to SQLOpen&(), except it is implemented using the OCI array interface.  The OCI array interface retrieves rows from the query in sets of rows from eight to 1024, which can significantly improve performance for large result sets.  "},{"id":237,"title":"SQLQuery&amp;()","url":"13807.htm","text":"Syntax  SQLQuery&(      const&nbsp;SQLText$,      const&nbsp;ParamNames$[],      const&nbsp;ParamValues?[],      FromRow&,      ToRow&,      var&nbsp;Rows?[])  Description  Prepares the specified SQL statement, binds any specified parameters, executes the SQL statement, and fetches the specified range of rows.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  SQLText$  In:  SQL query to be performed.  Parameter names in the query text should be preceded by a ':'.  ParamNames$[]  In:  List of parameter names in the query.  Parameter names in this array should not include the ':'.  ParamValues?[]  In:  Corresponding values to assign to each parameter name in the query.  FromRow&  In:  First row in the query result set to be returned ('1' is the first row).  ToRow&  In.  Last row to be returned.  If the values 0 or 1 are specified, all rows from FromRow& are returned.  Rows?[]  Out:  Two-dimensional array containing the rows specified in the range in FromRow& and ToRow& of the query (in [Row&][Column&] order).  Row&=0 corresponds to the row specified by FromRow& of the query.  Returns  Number of rows contained in the hash; otherwise, 0 if there are no rows.  If there are rows after the ToRow& value, this implies that the module must do an additional fetch after the ToRow& value to get additional data (if this is wanted), and 1 is added to the returned value.  If the execution of the preparation, any of the binds, or the query itself fails, an error is raised.  An error is also raised if ToRow& > 0 and ToRow& < FromRow&, or if FromRow& <1.  Remarks  The function returns the row data in the Rows?[] parameter.  It is identical to biSQLQuery&(), except that the query is performed from within the current process (rather than causing a TRE call to a server to perform the query.  The following is true for this function:  The function can only be used in processes that have an SQL server connection to the database.  For this reason, the function cannot be called from within EPM code running in the ecp process or the Convergent Billing client.  The transactional behaviour of the query is dependent on the process in which it is run.  If called from within a trerwdb process, it is part of a global transaction managed by the TRE.  If called from within a trerodb process (or most other processes), it is a part of a locally managed transaction.  The query is executed within the current process, so it has a lower overhead and better performance than the same query executed using biSQLQuery&().  If running from within a global transaction, it is possible to recover from errors raised by this function without aborting the transaction.  An error raised by any biSQLQueryRW&() call causes the transaction to be aborted.  Oracle Call Interface (OCI) handles are cached for reuse when executing SQL statements.  The number of handles is determined by the value of the $ATA_SQLCACHESIZE environment variable, or 30 if there is no value specified for $ATA_SQLCACHESIZE.  Caching OCI handles can improve performance where many repetitive SQLQuery&() calls are being made.  The number of OCI handles cached for a process can be changed by calling SQLCacheSize&().  "},{"id":238,"title":"SQLQuery?[]()","url":"13808.htm","text":"Syntax  SQLQuery?[](      const&nbsp;SQLText$,      const&nbsp;ParamNames$[],      const&nbsp;ParmValues?[])  Description  Prepares the specified SQL statement, binds any specified parameters, executes the SQL statement, and fetches and returns all the rows from the query.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  SQLText$  In:  SQL query to be performed.  Parameter names in the query text should be preceded by a ':'.  ParamNames$[]  In:  List of parameter names in the query.  Parameter names in this array should not include the ':'.  ParamValues?[]  In:  Corresponding values to assign to each parameter name in the query.  Returns  Two-dimensional array containing the rows returned by the SQL query (in [Row&][Column&] order) if the function is successful; otherwise, an undefined array if there are no rows.  If the execution of the preparation, any of the binds, or the query itself fails, an error is raised.  Remarks  The function is similar to SQLQuery&(), except that it returns the rows directly (rather than as a parameter) and does not support returning a range of rows.  All rows are always returned.  "},{"id":239,"title":"SQLStats?[]()","url":"13810.htm","text":"Syntax  SQLStats?[]()  Description  Retrieves SQL statistics for the current process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  Unknown array of SQL statistics, contained within unknown hash elements.  Remarks  Statistics gathering must have been enabled using SQLStatsOn& for any statistics to be available.  The following table lists statistics returned in the unknown array.  Statistics Returned in Unknown Array  Key  Type  Description  SQL  String  Text of the SQL statement.  ParseCount  Integer  Number of OCIStmtPrepare() operations performed plus the number of reused cached Oracle Call Interface (OCI) statement handles.  ParseReuseCount  Integer  Number of times a cached OCI statement handle was reused.  It always be less than ParseCount.  ParseTime  Real  Time in seconds spent executing OCIStmtPrepare() operations.  ExecutionCount  Integer  Number of OCIStmtExecute() operations performed.  ExecutionTime  Real  Time in seconds spent executing OCIStmtExecute() operations.  FetchCount  Integer  Number of OCIStmtFetch() operations performed.  It may be larger than FetchRowCount as some fetches return no rows.  FetchRowCount  Integer  Number of rows fetched using SELECT statements.  If array fetches are performed using the SQLArrayCursor class, this value may be larger than FetchCount, as one OCIStmtFetch() operation can be used to fetch multiple rows.  FetchTime  Real  Time in seconds spent executing OCIStmtFetch() operations.  "},{"id":240,"title":"SQLStatsDate~()","url":"13811.htm","text":"Syntax  SQLStatsDate~()  Description  Date-time SQL statistics gathering was last enabled.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  Date-time SQL statistics gathering was last enabled.  "},{"id":241,"title":"SQLStatsOff&amp;()","url":"13812.htm","text":"Syntax  SQLStatsOff&()  Description  Disables gathering of SQL statistics for the current process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  1 (TRUE).  "},{"id":242,"title":"SQLStatsOn&amp;()","url":"13813.htm","text":"Syntax  SQLStatsOn&()  Description  Enables gathering of SQL statistics for the current process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  1 (TRUE).  Remarks  SQLStats?[]() is used to retrieve statistics.  "},{"id":243,"title":"SQLStatsReset&amp;()","url":"13814.htm","text":"Syntax  SQLStatsReset&()  Description  Resets SQL statistics for the current process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  1 (TRUE).  "},{"id":244,"title":"SQLTrace&amp;()","url":"13815.htm","text":"Syntax  SQLTrace&(      Enable&)  Description  Enables or disables Oracle SQL statement tracing in the current process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  Enable&  In:  Sets mode of function. Valid values are:  1 (Enable Oracle tracing)  2 (Disable Oracle tracing).  Returns  1 (TRUE).  Remarks  For information about where Oracle SQL trace files are generated and how they are interpreted, refer to the Oracle documentation.  "},{"id":245,"title":"treOperatorSetId&amp;()","url":"14081.htm","text":"Syntax  treOperatorSetId&(      NewOperatorId&)  Description  Changes the effective user associated with subsequent operations and TRE calls within the current server request.  Attributes  Application Environment  Any  Context  Any  Method  Remote  Parameter  Description  NewOperatorId&  In:  User ID to be applied.  Returns  1 (TRUE) if successful; otherwise, an error is raised.  The normal cause of an error is that the real user ID associated with the connection is not authorised to change their effective user ID.  Remarks  For this function to be successful, the caller must have superuser privileges (able to change their effective user ID) and the specified user ID is defined as a valid Singleview user.  Changing the user impacts the user associated with all subsequent server calls.  If called from Tuxedo server processes, the function updates Oracle's CLIENT_IDENTIFIER of the current session to be equal to the user name associated with the specified NewOperatorId&.  This ensures that any Convergent Billing audit records subsequently generated correctly reflect the effective user who performed the operation.  "},{"id":246,"title":"TuxedoGroupId&amp;()","url":"14093.htm","text":"Syntax  TuxedoGroupId&()  Description  Returns the Tuxedo group ID of the current server process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  Tuxedo group ID of the current server process.  If called from a process that is not a Tuxedo server, an error is raised.  "},{"id":247,"title":"TuxedoServerId&amp;()","url":"14098.htm","text":"Syntax  TuxedoServerId&()  Description  Returns the Tuxedo server ID of the current server process.  Attributes  Application Environment  Any  Context  Any  Method  Local  Parameter  Description  None.  Returns  Tuxedo server ID of the current process.  If called from a process that is not a Tuxedo server, an error is raised.  "},{"id":248,"title":"TuxedoServerInvoke&amp;()","url":"50408.htm","text":"Syntax  TuxedoServerInvoke&(      OperatorName$      GroupId&,      ServerId&,      const Function$,      const FunctionParams?[])  Description  Sends a request to a single Tuxedo server to evaluate a function with the specified set of parameters.  Attributes  Application Environment  Any  Context  Any  Method  Built-in  Parameter  Description  OperatorName$  In:  Name of the operation making the call.  GroupId&  In:  Server group ID of the Tuxedo server.  ServerId&  In:  ID of the specified Tuxedo server.  Function$  In:  Name of the function to be evaluated.  FunctionParams?[]  In:  Parameters that correspond to Function$.  Returns  TRUE if the request is successfully sent to the Tuxedo server; otherwise, an error is raised.  Remarks  OperatorName& sets the CLIENT_IDENTIFIER for the database connection to allow Oracle auditing.  "},{"id":249,"title":"Operation Types","url":"58932.htm","text":"This section lists the Process Engine web client operation types. In Process Engine web client operations are invoked from:  Menu options in the Main Menu and Tab Menu drop-down lists  Buttons and links on:  Global and Context bars  Pages, tabs and pop-ups  Gadgets.  Process Engine web client operations are configured and specified in the following Configuration Workbench Tools:  Menu Tool, for configuring menu options used in the Process Engine web client Home page gadgets for populating lists in the:  Create gadget  Search > Advanced Search gadget  Search gadgets for single objects.  Interface Design Tool:  Main Frame node, for buttons and links on the Home page Global bar.  Detail Section Toolbar tab of the relevant view node, for details page Main Menu menu options.  (Web) Search Results Toolbar tab of the relevant view node, for search results page Main Menu menu options.  Tab Section Toolbar tab of the relevant view node, for details page Tab Menu menu options.  The following table lists operation types by category.  Operation Type by Category  Category  Operation Type  Description  Create Object  NewAssocLink  Creates a complex association between two objects. The associated object is selected from a drop-down list of objects.  It is used only with complex associations and does not require an Advanced search to find the object in the associated class.  An Advanced search is not required because the valid objects are supplied in a drop-down list (if there is more than one), or created automatically (if there is only one).  If specified in the Interface Design Tool on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  NewAssocCreate  Creates an object and associates it with the current object. The operation creates the new object and, if required, the association class object.  It can be used with simple and complex associations.  It replaces the deprecated NewAssocObj A-D operation types.  If specified in the Interface Design Tool on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Global bar, Main Menu, or Tab Menu.  NewAssocSearch  Allows the user to search for an object in another class and associate it with the current object. The operation creates the association class object, and can only be used for complex associations.  It replaces the deprecated NewAssocObj E-F operation types.  If specified in the Interface Design Tool on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  NewObj  Creates an object whose class is specified in the operation definition.  When creating a NewObj operation, the New Objects Class is mandatory and New Objects Type is optional. If a type is not specified, multiple copies of the NewObj operation are added to the menu or gadget, one for each possible type of the object. The type is displayed in brackets after the caption (for example, Contact (Residential) and Contact (Business)).  The following rules apply for types displayed to the user in the Process Engine web client:  If a filter expression is configured on type fact, types that satisfy the filter expression are displayed.  If the class is not cached and a filter search is configured on the type fact, types that satisfy the filter search are displayed.  If the class is cached, all types are displayed.  Only objects in classes with a corresponding view can be created.  Captions in menu item configuration must not begin with New. Process Engine web client functionality removes New, if included at the start of menu item captions.   Client parameters for triggers on NewObj operations are populated from the view created by the operation, not the view on which the operation was invoked. Client parameters are accessed using the ClientParamGet$() or ClientFullParamGet&() function.  If specified in the:  Menu Tool, it is displayed as a link in the Create gadget.  Interface Design Tool on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Global bar, Main Menu, or Tab Menu.  Delete Object  DeleteObj  Makes an object obsolete. Making an object obsolete is different from deleting an object. An obsolete object can be included in operations such as Custom Searches, but a deleted object cannot.  An object made obsolete using DeleteObj cannot be restored; that is, it cannot be made current again.  If specified in the Interface Design Tool in the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Main Menu or Tab Menu.  If the operation is used in a trigger, one of the following must be selected:  Relevant details page tab  Row in the search results page summary grid.  Export  ExportData  Exports search results data in XML, CSV, or HTML format.  If specified in the Interface Design Tool on the (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Miscellaneous  Gap  Not an operation; inserts a space or separator between adjacent operations.    If specified in the Interface Design Tool on the:  Mainframe section Toolbar tab, it is displayed as a space between the buttons on the Process Engine web client Home page Global bar.  Details Section Toolbar tab, it is displayed as a separator in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a separator  in the Main Menu on the Process Engine web client search results page.  Tab Section Toolbar tab, it is displayed as a separator in the Tab Menu on the Process Engine web client details page tab.  Refresh Object  RefreshFacts  Refreshes fact values for the screen, view, or tab from which the RefreshFacts operation is invoked.  Refreshing fact values:  Updates fact values, which ensures fact values updated by other users in Process Engine web client or Convergent Billing are updated.  Re-derives fact values if they have expired since last being fetched.  The RefreshFacts operation type is only available when viewing data; that is, if a field on a tab is being updated, the menu option in the Main Menu and Tab Menu invoking the RefreshFacts operation is disabled.  If specified in the Interface Design Tool on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Main Menu or Tab Menu.  Searching  SavedSearch  If specified in the Menu Tool, it is displayed as:  Saved searches in the Search > Advanced Search gadget.  Drop-down options for configuring single search gadgets.  Transactional  Accept  Records changes to data in the database and often referred to as 'save'.   It can be invoked manually or automatically. The user is prompted to accept when:  Deleting an object.  Selecting another object in the current class after making changes.  Accept records all changes made in the current view since the most recent of the following events:  User opened the view.  Last Accept was performed on the view.  Last Cancel was performed on the view.  This operation is used only with the AsyncDialog&() EPM function.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Main Menu or Tab Menu.  Cancel  Discards changes made but not yet recorded in the database (that is, changes not accepted).  Cancel discards all changes made since the most recent of the following events:  User logged in to the client.  Last Accept was performed.  Last Cancel was performed.  This operation is used only with the AsyncDialog&() EPM function.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Main Menu or Tab Menu.  Triggers  TriggerOnly  Executes the specified trigger. Only On Client Request triggers are valid.     It is enabled when:  Always Enabled is set to True.  The current object exists and no context class is specified.  An object of the context class exists (see the Configuration Workbench Tools Guide for Singleview Process Engine).  The current object is an object of the class for the details page overview or a tab on the details page, depending on whether the operation is on the details page overview or a tab on the details page.   Enabling TriggerOnly operations only in the situations listed allows TriggerOnly operations to be disabled when there is not an appropriate object to process. For example, an order trigger requires a product to be selected.   Some TriggerOnly operations on the Global bar do not require an object; for example, an operation to start a script. TriggerOnly operations that do not require an object should always be enabled by setting Always Enabled to 'True'.  If specified in the Interface Design Tool, on the:  Mainframe section Toolbar tab, it is displayed as a button on the Process Engine web client Home page Global bar.  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on the Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Global bar, Main Menu, or Tab Menu.  TriggerValue  Passes the specified value to an On Client Request trigger and executes the trigger.  This trigger is enabled in a similar way to the TriggerOnly operation.   If a user clicks a menu option on a Main Menu or Tab Menu, or a button on the Global bar, which are linked to a TriggerValue operation, Process Engine web client displays a message pop-up to prompt the user to enter a value, or select a value from a drop-down list.  The selected value is passed to the trigger as a parameter using the selected item's class key, object key, and the following keywords:  PARAM:MENUVALUE and PARAM:END.  When the Selection Menu drop-down list does not contain a value, the <Operation Display Name> Parameter Entry window is displayed to specify a value to be passed as a parameter for the trigger.  If the Selection Menu drop-down list is left blank, a value must be specified in the Trigger Value Prompt field. This value is used as the label for the field where a value is specified to pass as a parameter to the trigger.   If both the Trigger Value Prompt and Selection Menu fields are specified, the value in the Trigger Value Prompt field is used as the label for the selection menu's drop-down list.  If specified in the Interface Design Tool, on the:  Mainframe section Toolbar tab, it is displayed as a button on the Process Engine web client Home page Global bar.  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on the Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Global bar, Main Menu, or Tab Menu.  Update Object  SetFactVal  Sets the value of the specified boolean fact to 'True'.  Using SetFactVal avoids having to locate and update a specific field on a layout. SetFactVal can also be used to change the state of a boolean fact that is not included in a layout. New Object Class and Fact Name must be specified for Update Object.  If specified in the Interface Design Tool, on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on the Process Engine web client details page tab.  View  ComplexSearchView  It adds:  A Search Definition link in the Search > Advance Search gadget that allows a user to search for custom search definitions. Clicking the link displays the Process Engine web client Find Search Definition pop-up.  Links in the Create gadget for creating new Custom searches for specified classes. Clicking the link displays the Process Engine web client Search page.  If specified in the Interface Design Tool on the Mainframe Toolbar tab, it is displayed on the Process Engine web client Global bar.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Global bar, Main Menu, or Tab Menu.  InPlaceSearchView  Adds a link to the Search > Advanced Search gadget for performing an Advanced search on a specified class.  If specified in the Menu Tool, it is displayed as a saved search in the Search > Advanced Search gadget.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Global bar, Main Menu, or Tab Menu.  SetEffectiveDate  Displays the current effective date-time for retrieving the fact values in the Context bar.  Changing the date-time changes the effective date-time of all date ranged objects in the view.  Non-date ranged objects are also refreshed when the effective date-time is changed to update references to date ranged objects; for example, a case referencing date ranged contacts.  If the Effective Date/Time Fact field is set for the view, editing the effective date-time in the toolbar overrides the value of the Effective Date/Time Fact field while the object is in the view; that is, if the object is scrolled off and back onto, the last effective date-time specified in the toolbar is used.    Clearing the effective date-time in Context bar sets the effective date-time back to the Effective Date/Time Fact for the view for the current object (if it is not null); otherwise, it defaults to the current server date-time.  SummaryView  Displays the appropriate summary view and the date ranged objects for the selected object. SummaryView is similar to Zoom but only zooms to a summary view and displays date ranged objects. The View Reference attribute specifies the name of the summary view to which to zoom.  It is specified in the Menu Tool and displayed as a link in the Create gadget.  If specified in the Interface Design Tool, on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Main Menu or Tab Menu.   If used in a trigger, a Summary view must be configured for the class of the view from which the trigger is called.  Zoom  Displays the current object in its own view. Objects and reference facts can be zoomed on.    To zoom on an object, specify the class to which to zoom.  For example, when viewing a contact on the Contact Details tab of the Case details page, zooming to the Contact view by specifying the Contact class displays the full details of the contact.  To zoom on a reference fact, specify the class of the fact and the name of the reference fact. Process Engine zooms to the view of the class the fact is referencing. Only reference facts with a view defined for the reference class can be specified. For example, on the Issue details page there is a Main Menu option to zoom to the case. The Zoom operation uses the Case reference fact on the Issue class.  Client parameters for triggers on Zoom operations are populated from the view created by the operation, not the view on which the operation was invoked. Client parameters are accessed using the ClientParamGet$() or ClientFullParamGet&() function (see the Configuration Guide for Singleview Process Engine).  If specified in the Interface Design Tool, on the:  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  Tab Section Toolbar tab, it is displayed as a menu option in the Tab Menu on a Process Engine web client details page tab.  This operation can be used in a trigger or an EPM function called by a trigger configured for the Main Menu or Tab Menu.  Workflow  GetNextAction  Used with actions; allows the user to assign the next available action to themselves.   When GetNextAction is selected, the action with the highest priority from the user's work groups meeting specified criteria is assigned automatically. The priority is specified by the Retrievable Ranking fact in the Action class. To be assigned, the action must be:  Retrievable  Not completed  Active  Not blocked by a precedent action's non-completion  Not assigned  Not locked.  The user must belong to the work group assigned to the action.  When several actions have the same ranking, one action is selected randomly and assigned to the user.  If the GetNextAction operation type is specified in the Interface Design Tool, on the Mainframe Toolbar tab, it is displayed on the Process Engine web client Global bar.  NewCampaign  Allows the user (usually a team leader) to activate an outbound campaign.  To activate an outbound campaign refer to the User Guide for Customer Management.  The individual actions for the campaign are allocated when users invoke the GetNextAction operation.  If specified in the Interface Design Tool on the:  Main Frame section Toolbar tab, it is displayed as a button on the Process Engine web client Home page Global bar.  Details Section Toolbar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client details page.  (Web) Search Results Toobar tab, it is displayed as a menu option in the Main Menu on the Process Engine web client search results page.  Determining which operation to use can be difficult, particularly with the NewAssoc* operations.  Copying an operation that achieves the required results and changing the parameters can simplify the operation definition.  "},{"id":250,"title":"New Association Object Operations","url":"9473.htm","text":"Process Engine provides the following operation types to create associations between objects:  NewAssocLink  NewAssocSearch  NewAssocCreate.  This section describes:  The terminology used for the NewAssoc* operations.  How to determine which operation to use to create association objects.  "},{"id":251,"title":"Terminology for NewAssoc* Operations","url":"9473.htm#o9474","text":"The following terminology is used to describe NewAssoc* operations:   Current class  Class of the object being worked on when the operation is invoked.   Target class  Class in which an object is to be created, or searched for.  Association class  Association class in which an object must be created when creating complex associations.  The following table displays examples of the NewAssoc* terminology.  NewAssoc* Terminology Examples  Operation  Current Class  Target Class  Association Class  Adding a contact to a case on the Case details page  Case  Contact  Case_Contact  Adding an action to an issue on the Issue tab of the Case details page  Issue  Action  Action_Issue  Adding an issue to a case in the Issue tab of the Case details page  Case  Issue  None because a simple association is being created  "},{"id":252,"title":"Determining NewAssoc* Operation to Use","url":"9475.htm","text":"The operation types for creating associations between objects are:  NewAssocLink  For complex associations only, to create an association object by allowing the user to select a target object from a drop-down list.  NewAssocSearch  For complex associations only, to create an association object by allowing the user to perform an Advanced Search for a target object.  NewAssocCreate  For simple and complex associations, to create an object to which an association is made. For complex associations, an association object is also created.  The following diagram displays a decision tree for deciding which NewAssoc* operation to use.  NewAssoc* Operation Selection  The NewAssocCreate operation type replaces the deprecated NewAssocObjA, NewAssocObjB, NewAssocObjC, and NewAssocObjD operation types. The NewAssocSearch operation type replaces the deprecated NewAssocObjE and NewAssocObjF operation types. The deprecated operation types must not be used and it is recommended that the deprecated operation types are replaced by the new operation types.  "},{"id":253,"title":"NewAssoc* Class Attributes","url":"9475.htm#o9477","text":"For NewAssoc* operations, the target class must be specified for simple associations, and the target and association classes must be specified for complex association. Different operation attributes are used to specify the target and association classes, depending on whether the association is simple or complex.   The following figure displays the classes involved in a simple and complex association. The attributes used by the NewAssoc* operations to specify the target class and association class are displayed in each class's box. The New Object's Type and Associated Type attributes are optional.  NewAssoc* Operation Class Attributes  "},{"id":254,"title":"NewAssocLink","url":"58938.htm","text":"The NewAssocLink operation allows the user to associate an object in an associated class to the current object, without having the user enter search criteria.  The operation is useful when there are few objects in the target class from which to select.  NewAssocLink can only be used for complex associations.  The following attributes are set when creating a NewAssocLink operation:  New Object's Class, which is the class of the association object to be created.  New Object's Type, which is the type of the association object to be created.  Associated Class, which is the class of the objects displayed in the drop-down list.  Associated Type cannot be specified, because the objects listed in the drop-down list are existing objects with their types set.  When displayed in Process Engine web client, the drop-down list contains either of the following:  All the objects of the associated class.  All the objects returned by a filter expression, if a filter search expression is defined on the new object class's reference fact, as determined by the Association 1 or Association 2 fact.  The filter search expression is defined on the Association 1 or Association 2 fact (see the Configuration Workbench Tools Guide for Singleview Process Engine) referencing the associated class.    The filter search expression can contain the this keyword to help build the filtering logic.  The this object refers to either the tab's current object or the view's current object, depending on the toolbar where the operation is located.  If the association class is dynamic, a filter search expression must be specified.  Selecting an object from the drop-down list creates an association object of the New Object's Class, and links the appropriate reference fact to the selected object.  Both objects are displayed in the view as appropriate.  "},{"id":255,"title":"Example","url":"58938.htm#o55518","text":"This section describes an example of using NewAssocLink.  A new view is required to allow Process Engine web client users to associate actions to cases.  The Case class contains case information, the Action class contains action information, and the Case_Action class is the association class, allowing a complex association to be created.  To create the view:  Create a view based on the Case class using the Interface Design Tool.  Specify the appropriate fields for the List section.  Build a layout to display the case details in the Detail section.  Build a layout to display a tab with a grid in the Tab section to display the associated actions.  On the Actions tab created in step 4, add a NewAssocLink operation with the following attributes:  Operation Type set to NewAssocLink  New Object's Class set to Case_Action  Associated Class set to Action  Other attributes set as required.  If the actions available in the drop-down list need to be filtered, specify a filter search expression on the Action reference fact in the Case_Action class.  "},{"id":256,"title":"NewAssocCreate","url":"9470.htm","text":"The NewAssocCreate operation allows an object to be created and the new object associated to an existing object.  The operation is configured according to whether the association is simple or complex.  "},{"id":257,"title":"Simple Association","url":"9470.htm#o58940","text":"The following attributes are set when creating a NewAssocCreate operation for a simple association:  New Object's Class, which is the class of the object to be created.  New Object's Type, which is the type of the object to be created. If the class has no type or the user is to select the type in Process Engine web client, the New Object's Type attribute must be left blank.  When displayed in Process Engine web client:  If the New Object's Type is not specified, a list of object types is displayed for the user to select. When selected, a new object of the selected type is created.  If the New Object's Type is specified, no drop-down list is displayed and in the object of the specified type is created.  The following table lists an example NewAssocCreate operation for a simple association.  NewAssocCreate Simple Association Example  Name  Operation Type  New Object's Class  New Object's Type  Associated Class  Associated Type  Example  Create Troubleshooting Issue  NewAssoc<br>Create  Issue  Troubleshooting  Case details page/<br>Issue tab  In the example, a simple association is created directly between a case and an issue. The class and type of the object being created (New Object's class and New Object's type) are specified. The class and type of the associated object is not required because this is a simple association.  "},{"id":258,"title":"Complex Association","url":"9470.htm#o58941","text":"The following attributes are set when creating a NewAssocCreate operation for a complex association:  New Object's Class, which is the class of the association object to be created.  New Object's Type, which is the type of the object to be created. If the class has no type or the user is to select the type in Process Engine web client, the New Object's Type attribute must be left blank.  Associated Class, which is the class of the target object to be created.  Association Type, which is the type of the object to be created. If the class has no type or the user is to select the type in Process Engine web client, the Association Type attribute must be left blank.  The following table lists an example NewAssocCreate operation for a complex association where the user is prompted to select the type of target object and the type of association object.  NewAssocCreate Complex Association Example  Name  Operation Type  New Object's Class  New Object's Type  Associated Class  Associated Type  Example  New Contact &#8211; Select Type  NewAssocCreate  Case_<br>Contact  Contact  In the example, a complex association is created between a case and a contact. The type of association object and target object must be left blank. The user is prompted for the type of contact (for example, business) and the type of Case_Contact (for example, primary).  If there is only one type of object in the target or association class, the user is not prompted to select an object type; Process Engine uses the only type as a default.  Two objects are created: the target, and association.  The following table lists another example NewAssocCreate operation for a complex association.  NewAssocCreate Complex Association Example  Name  Operation Type  New Object's Class  New Object's Type  Associated Class  Associated Type  Example  Follow Up Call  NewAssocCreate  Case_<br>Action  Request  Action  Follow Up Call  Case details page/Action tab  In the example, a complex association is created between a case and an action, so two objects must be created: the object in the target class, and the object in the association class to create the association.   The type of association object being created (New Object class and New Object type) and the type of object being created (Associated class and Associated type) are specified.  If the object being created involves a complex association, the association class is always entered first (New Object's Class and Type) and the target class is entered second (Associated Class and Type). Conceptually, the association class steps to the target class.   If the object being created involves a simple association, enter the target class as the New Object's Class and Type.  "},{"id":259,"title":"NewAssocSearch","url":"58942.htm","text":"The NewAssocSearch operation allows the user to search for an object in another class and associate it with the current object. The operation creates the association class object, and can only be used for complex associations.  The following attributes must be specified when creating a NewAssocSearch operation:  New Object's Class, which is the class of the association object to be created.  New Object's Type, which is the type of the object to be created. If the class has no type or the user is to select the type in Process Engine web client, the New Object's Type attribute must be left blank.  Associated Class, which is the class of the target object to be searched for.  Association Type, which is the type of the object to be created.  If the class has no type or the user is to select the type in Process Engine web client, the Association Type attribute must be left blank.  If NewAssocSearch is defined for a tab, the Single Operation check box is selected by default (and disabled).  When the button for the NewAssocSearch operation in Process Engine web client is clicked, the Advanced Search is displayed for the association class, so the user to search for and select the target object. When the user commits the data, an association object is created with the specified association type.  Example 1  The following table lists an example of a NewAssocSearch operation, where the user is prompted to select type of target object and association object.  NewAssocSearch Example 1  Operation Name  Operation Type  New Object's Class  New Object's Type  Associated Class  Association Type  Single Operation  Find Contact &#8211; Select Type  NewAssocSearch  Case_<br>Contact  Contact  Selected  A complex association is created between a case and a contact. The type of association object and type of target object are left blank.  The user is prompted for the type of contact (for example, business) being searched for and the type of Case_Contact being created. If there is only one type of object in the target or association class, the user is not prompted to select an object type; Process Engine uses the only type as a default.  One object is created: the association object.  Example 2   The following table lists an example of a NewAssocSearch operation, where the user is prompted to select the type of association object (for example, used on the Contact tab in the Case details page).  NewAssocSearch Example 2  Operation Name  Operation Type  New Object's Class  New Object's Type  Associated Class  Association Type  Single Operation  Find/Add Residential Contact  NewAssocSearch  Case_<br>Contact  Contact  Residential  Selected  A complex association is created between a contact and a case. The type of association object is left blank (New Object's type). The user is prompted for the type of association object when the operation is invoked. The type of the target object for which is being searched must be entered.   One object is created: the association object.  "},{"id":260,"title":"Reserved Words","url":"55480.htm","text":"This section describes Process Engine reserved words that are used in SXP expressions.  The following table lists reserved words.  Reserved Words  Reserved Word  Returned Data Type   Purpose  //  Not applicable.  Prefix for comments.  +, -, *, /  All except text and memo data types.  (+) can be used for concatenating text and memo data types.  Arithmetic operations.  =, <>, <, >, <=, >=  Boolean  Comparison operations.  alias  Text  Generates an alias based on the text expression.  and, or, not  Boolean  Indicates a Boolean relationship between expressions.   [not] between  Boolean  Determines whether or not a value is within a specified range of values.  ceil  Integer, date-time, or decimal  Returns an integer value rounded up to the nearest integer for a decimal value, or a date rounded up to the nearest whole day for a date-time value.  cond [else:]  All  Applies a series of separate conditions, each with an associated instruction.   count  Integer  Counts the number of objects in a specified object class, or specified reference subset fact.   date  Date-time  Converts a series of comma-separated integer constants into a date.  dayofmonth  Integer  Returns the day of the month from a date-time expression.  epm  Not applicable.  Calls an EPM function from a Process Engine expression.  exists  Boolean  Queries a class for objects matching specified criteria.   filter  Reference subset  Used with reference subset facts to retrieve a subset of the objects identified by a reference subset expression.   findstring  Integer  Returns the position of one string within another string.  When either the string or substring are of zero length, it returns NULL.  first  Reference  Retrieves the identity of an object from a reference subset fact.   floor  Integer, decimal, date-time  Returns an integer value rounded down to the nearest integer for a decimal value, or a date rounded down to the nearest whole day for a date-time value.  get  All data types, except reference subset  Retrieves a single value.  get all  Reference subset  Retrieves a subset of objects from a specified class.  if  Text, currency, date-time, integer, decimal, duration, percent, reference  Applies an instruction based on the result of a Boolean expression.  in  Boolean  Determines whether or not one value is the same as another value, or the same as one of a number of values.  is [not] null  Boolean  Detects null values.  length  Integer  Determines the number of characters in a text string.  When the string is of zero length, it returns NULL.  like  Boolean  Implements functionality of the SQL like operator, excluding escape characters.  makelist  Text  Used with a text fact to record the values of a specified fact in the objects identified by a specified reference subset fact.   max, min, sum, average  Integer, percent, currency, decimal, date-time, duration  Used with get to retrieve the maximum, minimum, sum, or average of a range of values.  monthofyear  Integer  Returns the month from a date-time expression.  nth  Reference  Retrieves a reference for an object from a reference subset fact.  nullval  All data types  Returns the first value that is not null.  of  Percent  Calculates percentages of integer, decimal, percent, or currency values.  ref_null  Reference  Placeholder for an expression that cannot currently be defined.  When the details for the expression are available, ref_null is replaced with a valid expression.   reverse  Not applicable.  Used with sort to order a reference subset fact's list of objects in descending order according to the values of a specified criteria expression.  sizeof  Integer  Determines the number of elements in an array or hash.  sort  Not applicable.i  Orders a reference subset according to the values returned by criteria expressions.  sounds like  Boolean  Determines whether or not one specified character string sounds like another specified character string.  starts with  Boolean  Determines whether or not one specified character string is the same as the start of another specified character string.   substring  Text  Retrieves the characters between two specified positions from a character string.  text  Text  Used to convert a non-text value to text.  this  Reference  References the current object (that is, selected object).   time  Date-time  Converts a series of comma-separated integers into a time.  to_bool  Boolean  Converts an integer value to a Boolean.  to_currency  Currency  Converts a string value to a currency.   to_date  Date-time  Converts a string value to a date-time.  to_integer  Integer  Converts a string value to an integer.  to_memo  Memo  Converts a string value to a memo.  to_percent  Percent  Converts a string value to a percent.  to_period  Duration  Converts a string value, stamp expression, or date value to a duration.  to_real  Decimal  Converts a string value to a decimal.  to_ref  Reference  Converts a string value to a reference value.   true, false  Boolean  Specifies the corresponding Boolean state.  week, day, hour, minute  Date-time  Retrieves a date-time rounded to the first second of a specified time from a specified date-time.  weeks, days, hours, minutes  Integer  Retrieves the number of weeks, days, hours, or minutes from a specified duration.  where  Not applicable  Specifies conditions under which specified values are to be retrieved.  year  Integer  Returns the year from a date-time expression.  "},{"id":261,"title":"//","url":"9492.htm","text":"Purpose  Prefix for comments.  A hard return at the end of the comment terminates the comment.  Syntax  // Used to switch  Example  cond (count([All_Comment_Action]) > 0<br>: <Layout_Group_Template>'act_Comment_Grid'<br> )<br>//Displays the comments grid only when a comment has been added.  "},{"id":262,"title":"+, -, *, /","url":"9494.htm","text":"Purpose  Arithmetic operations used for addition, subtraction, multiplication, and division.  Returned Data Type   Can be used with all facts except text and memo facts. Only addition (+) can be used with text and memo facts, when it is used to concatenate strings of characters.  Operator Precedence  * and / have the same precedence and are processed before + and -, which also have the same precedence. For example, the result of 2+3*4 is 14.  Where there are two or more operators of the same precedence, the order of processing is not significant but they are processed from left to right as they are displayed in the expression.  The order of precedence can be overridden using parentheses (round brackets). Calculations enclosed in parentheses are performed first.  For example, the result of 2+3*4 is 14, but the result of (2+3)*4 is 20.  Syntax  <integer-expression1> / <integer-expression2>  The result (integer) is <integer-expression1> divided by <integer-expression2>.  <text-expression1> + <text-expression2>  The result (text) is <text-expression2> appended to <text-expression1>.  Examples  (50+50)/4  The result is 25.  cond([DisplayName_X] is not null: text ([DisplayName_X]),  else: text([First_Name]+ ','+[Surname]))  The result is the display name if it is available; otherwise, the first name and the surname separated by a comma.  "},{"id":263,"title":"=, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=","url":"9496.htm","text":"Purpose  Comparators used for:  Equal to (=)   Not equal to (<>)  Less than (<)  Greater than (>)  Less than or equal to (<=)  Greater than or equal to (>=).  Returned Data Type   Boolean  Syntax  <integer-expression1> > <integer-expression2>  The result (Boolean) is True if <integer-expression1> is greater than <integer-expression2>.  Example  [Due_Date] <= [CaseClosed]  The result is True if the due date is less than or equal to the date the case was closed.  "},{"id":264,"title":"alias","url":"9498.htm","text":"Purpose  Generates an alias based on the text expression.  Returned Data Type    Text  Syntax  alias (<text-expression>, <integer-expression1> | <reference-expression>[,<integer-expression2>])  The result is an alias formed by concatenating <text-expression>, and <integer-expression1> or <reference-expression>.  <integer-expression2> specifies the minimum number of characters in the integer part of the alias. If <integer-expression1> has fewer characters than specified in <integer-expression2>, it is zero-padded to the specified length.  Example  If Last_Name is Pine and Person_ID is 1234:  alias ([Last_Name], [Person_ID], 3)  The result is Pine1234.  alias ([Last_Name], [Person_ID], 6)  The result is Pine001234.  "},{"id":265,"title":"and, or, not","url":"9500.htm","text":"Purpose  Indicates a Boolean relationship between expressions:  and indicates an inclusive relationship  or indicates an exclusive relationship  not indicates a negation.  Use grouping brackets to make operator precedence unambiguous.  Returned Data Type   Boolean  Syntax  (<expression1> > <expression2>) and (<expression3> < <expression4>)  The result is True only when both sets of expressions are True.  (<expression1> > <expression2>) or (<expression3> > <expression4>)  The result is True when one or both sets of expressions are True.  not (<expression1> > <expression2>)  The result is True when the expression in brackets is False.  Examples  ([Total] > 5 and [Total] < 10)  The result is True when the total is greater than 5, and less than 10.  ([Total] > 10 or [Amount] > 10)  The result is True when either the total or the amount is greater than 10, including when both the total and the amount are greater than 10.  not ([Total] > 10)  The result is True when the Total is less than 10.  [Type] = <Contact_Type>'Residential' or [Type] = <Contact_Type>'Business'  The result is True if the contact type is either business or residential.  "},{"id":266,"title":"[not] between","url":"9502.htm","text":"Purpose  Determines whether or not a value is within a specified range of values. It can also be used in validations to ensure that only dates between specified limits are entered.  All expressions must be of the same type; for example, all dates or all integers. The range for the comparison includes the limits; for example, 4 between 4 and 10 is True.  Returned Data Type   Boolean  Syntax  <expression1> between <expression2> and <expression3>  The result (Boolean) is True if the value of <expression1> is between the values of <expression2> and <expression3>.  <expression1> not between <expression2> and <expression3>  The result (Boolean) is True if the value of <expression1> is not between the values of <expression2> and <expression3>.  Example  [Date_Received] between [Date_Closed] and {Now}  The result is True if the received date is between the closed date and now.  [Date_Received] not between [Date_Closed] and {Now}  The result is True if the received date is not between the closed date and now.  "},{"id":267,"title":"ceil","url":"33009.htm","text":"Purpose  Returns an integer value rounded up to the nearest integer for a decimal value, or a date rounded up to the nearest whole day for a date-time value. An integer value passed into the function returns the same integer.  The ceil reserved word provides the same functionality as the ceil() function in Convergent Billing (see the Configurer's Reference Guide for Singleview Convergent Billing (Vol. 2)).   Returned Data Type   Integer, date-time, or decimal.  Syntax  <ceil(<decimal-expression>)>  The result (integer) is rounded up to the nearest higher integer value.  Examples  ceil(24.25)  The result is 25.  ceil(StartDate)  The result is a new start date derived by rounding the current start date to the start of the next day.  ceil({Now})  The result is the next day's date with a time of 00:00:00.  If {Now} is exactly midnight, the result is midnight on the current day.  "},{"id":268,"title":"cond [else:]","url":"9504.htm","text":"Purpose  Applies a series of separate conditions, each with an associated instruction.    The first condition evaluating to True has the corresponding instruction performed and the processing terminates before evaluating further conditions.  If an else: condition is included, the else: instruction is performed if all cond conditions are False.  Returned Data Type   All  Syntax  cond (<br>    <boolean-expression1> : <expression1>[,<br>    <boolean-expression2> : <expression2>,<br>    else:<expression3>])  The result is the <expression> matched with a <boolean-expression> that evaluates to True, or the last <expression>, if all <boolean-expression>s are False.  Example  cond (<br>    {Now} > [Due] and not [Is_Not_Blocked]  : {icn_Blueflag},<br>    {Now} >= [Start] and [Is_Not_Blocked] : {icn_Greenflag},<br>    else : {icn_Yellowflag})  The result is:   Blue flag icon if the action is overdue and blocked.  Green flag icon if the action is ready to start and not blocked.  Yellow flag icon if neither of the above conditions are True; that is, if the action is pending.  "},{"id":269,"title":"count","url":"9506.htm","text":"Purpose  Counts the number of objects in a specified reference subset fact.  The value of a reference subset fact is a list of the current object's associated objects.  It is usually used with a reference subset fact, and not with a class.  Returned Data Type   Integer  Syntax  count <reference-subset-expression>  The result (integer) is the number of objects in <reference-subset-expression>.  Example  count [All_Actions]  If used in the Case class, the result is the number of actions associated with the case.  The same result can also be achieved by using count with the Case_Action class and including only objects associated to the relevant case.  For example:  count <Case_Action> where [Case] = {This_Case}  Do not use this method because it is much more system-intensive.  "},{"id":270,"title":"date","url":"9508.htm","text":"Purpose  Converts a series of comma-separated integer constants into a date. it cannot be used with integer facts.  Returned Data Type   Date-time  Syntax  date (<integer-constant1>, <integer-constant2>, <integer-constant3>)  The result (date-time) is a date in which <integer-constant1> is converted to year, <integer-constant2> to month of the year, and <integer-constant3> to day of the month.  Example  date (2009, 3, 23)  The result is 2009/03/23.  "},{"id":271,"title":"dayofmonth","url":"9510.htm","text":"Purpose  Returns the day of the month from a date-time expression.  Returned Data Type  Integer  Syntax  dayofmonth(<date-time-expression>)  The result (integer) is the day of the month from the date-time-expression.  Example  dayofmonth([Date_Received])  If Date_Received is (23/03/20 09 9:38:07), the result is 23.  "},{"id":272,"title":"epm","url":"37422.htm","text":"Purpose  Calls an EPM function from a Process Engine expression.  There are no restrictions on which EPM functions can be called based on the function's application environment; that is, a Process Engine expression can call an EPM function with an application environment of Any, PE, or CB.  Convergent Billing functions with application environments other than Any cannot be called from Process Engine functions, and are not visible in the EPM Function Tool.  Not all Convergent Billing EPM local functions with an application environment of Any can be called in Process Engine.  When called, Process Engine attempts to execute the function, but if the function cannot be executed, a runtime error is displayed.  Restrictions for calling EPM functions from Process Engine expressions are:  Transactional EPM functions (functions that update or create data in the database) cannot be called from Process Engine expressions; this ensures data integrity.  Asynchronous EPM functions cannot be called because they do not return a value.  Parameters can only be passed by value.  Configurers must be aware of the data integrity risks when calling EPM functions from Process Engine expressions.  To ensure data integrity, avoid the following:  Transactional Convergent Billing EPM functions.  Transactional Process Engine EPM functions are restricted; however, transactional Convergent Billing EPM functions can be called.  Convergent Billing EPM functions that internally call transactional Process Engine EPM functions (see the Configuration Fundamentals Guide for Singleview Convergent Billing).  Remote EPM functions.   Returned Data Type  All.  The table below lists only the EPM return types implicitly converted to Process Engine data types.  All other conversions must be done explicitly using a conversion expression.  For example, to convert an EPM return type of integer into a boolean, use:  to_bool(epm(function&(<expression>)))  Parameters passed into EPM function calls are mapped in the same way that EPM data types are mapped to Process Engine fact types.  Hash parameters are not supported.  Return Type and Process Engine Data Type Conversion  EPM Return Type  Process Engine Data Type  Integer  Integer  String  Text  Real  Decimal  Date  Date Time  Blob  Reference  Blob array  Reference subset  Examples  The following procedure passes the current case into an EPM function and returns a string, indicating the case type:  Create an EPM function called fCM_CaseType$():  fCM_CaseType$(Case@) = {      const case_type@ := to_blob(ObjectFactGet?(Case@,Fact:Case.Type@));<br>    const case_type$ := to_string(ObjectFactGet?(case_type@,Fact:Case_Type.Display_Name@));<br>    return := 'Case type is: ' + case_type$;      }  Create a text fact called CaseDetails_X in the Case class with the following derivation expression:  epm(fCM_CaseType$({This_Case}))  The following procedure calls a custom EPM function that displays the percentage of customer types for a market region:  Create an EPM function called fCM_GetCustMktPercent#():  fCM_GetCustPercent#() = {      # Using customer type and market region, look up the derived<br>    # attribute table and return a real value      const Customer@ := CurrentObjectGet@();<br>    const CustType& := ObjectKeyGet&(Customer@);<br>    const Market@ := to_blob(ObjectFactGet?(Customer@, <br>                    Fact:Cust_Acct.Market_Region@));<br>    const MarketReg& := ObjectKeyGet&(Market@);<br>    var Result$[];<br>    var Irc&;      try {          Irc& := biDerivedTableLookupByDatex&(<br>        'dCLEC_CMN_LatePay_Percent#',<br>        current_date(),<br>        [to_string(CustType&),<br>        to_string(MarketReg&)],<br>        Result$[]);      } except {<br>        RaiseError&(Message:gen_CB_message@,[error_message()]);<br>    } return(to_real(Result$[0]));  }  Create a Percent fact called CustMktPercent_P in the Case class with the following derivation expression:  to_percent(epm(fCM_GetCustMktPercent#()))  "},{"id":273,"title":"exists","url":"9512.htm","text":"Purpose  Queries a class for objects matching specified criteria; for example, when data from an associated object class must be retrieved before a calculation relevant to the current object can be made.    It returns True if objects matching the criteria exist, or False if no objects matching the criteria exist.    It is used with where.  Returned Data Type  Boolean  Syntax  exists <class> where <boolean-expression>  The result is True if there is an object in the class matching <boolean-expression>.  Example  exists [PayOutstdbInv] where [PayReqst] = {This_PayReqst}  The result is True if there is an outstanding invoice for the current pay request.   "},{"id":274,"title":"filter","url":"9514.htm","text":"Purpose  Used with reference subset facts to retrieve a subset of the objects identified by a reference subset expression. A Boolean expression is used as the filter element. For large reference subsets, if all search objects are cached, it gives a faster result.  It is often used with count to count a subset of associated objects.  It scans all objects in the cache, including uncommitted objects.  Returned Data Type  Reference subset  Syntax  filter (<reference-subset-expression>, <boolean-expression>)  The result is a list of objects from the <reference-subset-expression>, filtered by <boolean-expression>.  Example  filter ([All_Actions], [Action].[Finish] is null)  The result is a list of open actions associated with the current case.  "},{"id":275,"title":"findstring","url":"9516.htm","text":"Purpose  Returns the position of one string within another string. The optional third parameter specifies which occurrence to return the position of; otherwise, the position of the first occurrence is returned.   Convergent Billing can store multiple values separated by a colon in a single string field; for example, to store additional address information when the number of core address fields is insufficient. It can be used to parse the string retrieved from Convergent Billing for a colon, and to separate the string.  Returned Data Type  Integer. When either of the strings are of zero length, the result is Null.  Syntax  findstring (<text-expression1>, <text-expression2>[,<integer-expression>])  The result (integer) is the position of <text-expression2> in <text-expression1>.   <integer-expression> specifies the number of occurrences for which to return the position.  Example  findstring (\"24 Smith Street:Brisbane:QLD:Australia\", &#8216;:&#8217;, 2)  The result is 25, which is the position of the second occurrence of &#8216;:&#8217; (including the space between characters) in 24 Smith Street:Brisbane:QLD:Australia.  "},{"id":276,"title":"first","url":"9518.htm","text":"Purpose  Retrieves the identity of the first object from a reference subset fact. The value of a reference subset fact is a list of the objects associated with the current object.  It is an alternative to using nth( ...,1).  It is often used with [reverse] sort to ensure the objects identified by the reference subset expression are in a known order.  Without sorting, the order of objects is unpredictable.  Returned Data Type  Reference  Syntax  first (<reference-subset-expression>)[.<reference-expression>]  The result (reference) is the first object in <reference-subset-expression>.   Example  first([All_Actions]).[Name]  If used in the Case class, the result is the name of the first action associated with this case.  "},{"id":277,"title":"floor","url":"33011.htm","text":"Purpose  Returns an integer value rounded down to the nearest integer for a decimal value, or a date rounded down to the nearest whole day for a date-time value.  An integer value passed into the function returns the same integer.  It provides the same functionality as the floor() function in Convergent Billing (see the Configurer's Reference Guide for Singleview Convergent Billing (Vol. 2)).   Returned Data Type  Integer, date-time  Syntax  floor(<decimal-expression> | <date-time-expression> | <integer-expression>)  The result (integer or date-time) is rounded down to the nearest integer or date-time value.  Examples  floor(24.25)  The result is 24.  floor({Now})  The result (date-time) is today's date with a time of 00:00:00.  If {Now} is exactly midnight, the result is midnight on the current day.  "},{"id":278,"title":"get","url":"9520.htm","text":"Purpose  Retrieves a single value.   It is used with where, and often used with max, min, sum, and average.  When accessing data using a this <class name> parameter in a get expression, any uncommitted data is not accessible to the expression.  Define a parameter and reference that parameter in the get expression.  Returned Data Type  All data types except reference subset.  Syntax  get <*-class-fact> where <boolean-expression>  Retrieves the value from the class and fact specified by <*-class-fact> for the object specified by <boolean-expression>.  Example  get sum [Action.WorkTime_D] where exists <Issue_Action> where [Issue] = {This_Issue} and [Action] = {This_Action}  The result is the total time taken to complete the action, which is derived when the following conditions are True:  An Issue_Action association class exists.  Issue in this class is the same as the current issue.  Action in this class is the same as the current action.  "},{"id":279,"title":"get all","url":"9522.htm","text":"Purpose  Retrieves a subset of objects from a specified class. The subset is selected using a Boolean expression.   It is used with where. If where is not used, all objects in the class are returned. For small reference subsets, filter is generally faster than get all.  Any expression containing get all is converted to SQL, and returns only committed data.  Returned Data Type  Reference subset  Syntax  get all <class> where <boolean-expression>  The result is a list of values from the class, filtered by the <boolean expression>.  Example  get all <Contact_Number> where [Type] = {This_Contact_Type}  The result is a list of contact numbers, of the same type as the current contact type.  "},{"id":280,"title":"if","url":"9524.htm","text":"Purpose  Applies an instruction based on the result of a Boolean expression.  Returned Data Type  Text, currency, date-time, integer, decimal, duration, percent, or reference.  Syntax  if <boolean-expression>, <expression1>, <expression2>  If <boolean-expression> is:  True, <expression1> is performed.  False, <expression2> is performed.  Example  if ([Paid] = 1, 'Close', [Balance_Due])  If Paid is True, it closes; otherwise, it displays the value in Balance_Due.  "},{"id":281,"title":"in","url":"9526.htm","text":"Purpose  Determines whether or not one value is the same as another value, or the same as one of a number of values.  All expressions must be of the same data type.  Returned Data Type  Boolean  Syntax  <expression1> in (<expression2>, <expression3>, <expression4>)  The result (Boolean) is True if <expression1> is equal to <expression2>, or <expression3>, or <expression4>.  Example  [Status] in ({st_issClosed}, {st_issCancld})   The result is True if the status for the current user is the same as the status in st_issClosed or ist_issCancld.  "},{"id":282,"title":"is [not] null","url":"9528.htm","text":"Purpose  Applies only to Null; that is, the absence of values.   It is the same as = and <>, except = and <> cannot be used to detect the absence of a value.  Returned Data Type  Boolean  Syntax  cond (<expression> is not null)  The result (Boolean) is True only if the expression evaluates to not null.  Example  cond ([Business_Name] is not null: [Business_Name])  The result is True if Business_Name is not null.  "},{"id":283,"title":"length","url":"9530.htm","text":"Purpose  Determines the number of characters in a text string.  Returned Data Type  Integer  Syntax  length(<text-expression>)  The result (integer) is the number of characters in <text-expression>. When the text string is zero length, the result is null.  Example  length([Surname])  If Surname is Miller, the result is 6.  "},{"id":284,"title":"like","url":"9532.htm","text":"Purpose  Implements functionality of the SQL like operator excluding escape characters.    It uses % and _ patterns in an SQL.  Returned Data Type  Boolean  Syntax  <text-expression1> like <text-expression2>  The result is True when the value of <text-expression1> contains <text-expression2>.  Example  select from PROFILE_TRE_V where PROFILE_NAME like '%ser%';  The result is True if any profile name in the PROFILE_TRE_V table contains the characters ser.  "},{"id":285,"title":"makelist","url":"9534.htm","text":"Purpose  Used with a text fact to record the values of a specified fact in the objects identified by the specified reference subset fact.   The result (by default) is a comma-separated list of values. If text constant is specified as null, the resulting list is not separated by any character.  Returned Data Type  Text  Syntax  makelist (<reference-subset-expression>, <text-expression>[,<text-constant>])  The result is a text constant-separated list of values for <text-expression> from the objects identified by <reference-subset-expression>.   <text-constant> is optional; if not specified, a comma is the default separator.  Example  makelist ([All_Issues].[Name],';')  The result is text consisting of the list of the names of all associated issues, separated by ';'.  "},{"id":286,"title":"max, min, sum, average","url":"9536.htm","text":"Purpose  Used with get and where to retrieve the maximum, minimum, sum, or average from the specified range of values.  Returned Data Type  Integer, percent, currency, decimal, date-time, or duration  Syntax  get sum <*-class-fact> where <boolean-expression>  The result is the sum of the fact specified by <*-class-fact> from the range of objects specified by <boolean-expression>.  Example  get sum [Action.Actual_Work_Units] where exists <Case_Action> where [Case] = {This_Case} and [Action] = {This_Action}  The result is the total time spent on the current action of the current case.  "},{"id":287,"title":"monthofyear","url":"9538.htm","text":"Purpose  Returns the month from a date-time expression.  Returned Data Type  Integer  Syntax  monthofyear(<date-time-expression>)  The result (integer) is the month from the <date-time-expression>.  Example  monthofyear([Date_Received])  If Date_Received is (23/03/2009), the result is 03.  "},{"id":288,"title":"nth","url":"9540.htm","text":"Purpose  Retrieves a reference for an object from a reference subset fact. The value of a reference subset fact is a list of references for the current object's associated objects.   Evaluation of an nth expression results in Null if the <integer-expression> is greater than the number of references in the reference subset fact's list of associated objects.   first can be used as an alternative to nth( ...,1).  Returned Data Type  Reference or reference subset  Syntax  nth (<reference-subset-expression>, <integer-expression>)[<reference-expression>]  The result is a reference for the object whose ordinal position in <reference-subset-fact> is <integer-expression>.  Example  nth ([All_Issues],3).[Type].[Name]  If All_Issues is a reference subset fact in the Case class, the result is the name of the third issue type for the current case.  "},{"id":289,"title":"nullval","url":"9542.htm","text":"Purpose  Used to select the first of a series of expressions whose evaluation returns a value; that is, is not null.  The expressions are evaluated one after the other.  When the first expression returning a value is encountered, the value is retrieved.  Using nullvall is simpler than using cond for finding the first value.  Returned Data Type  All data types  Syntax  nullval (<text-expression1>[, <text-expression2> ... ])  The result is <text-expression1> if it exists; otherwise, <text-expression2>.  Example  nullval ([Business_Name], [Given_Name] + ',' +[Surname])  The result is the business name if available; otherwise, the given name and the surname, separated by a comma.  "},{"id":290,"title":"of","url":"9544.htm","text":"Purpose  Calculates percentages of integer, decimal, percent, or currency values.  Returned Data Type  Percent  Syntax  <integer-expression> of <decimal-expression>  The result is calculated as <decimal-expression> divided by <integer-expression> multiplied by 100.  Example  85 of [Total_Charge]  The result is 85% of the total charge.  "},{"id":291,"title":"ref_null","url":"9546.htm","text":"Purpose  Placeholder for an expression that cannot currently be defined; for example, in a derivation expression of a fact in the core Process Engine configuration that is to operate on objects in the custom configuration.  When the details of the custom configuration are available, it is replaced with a valid expression.  All instances of ref_null should be resolved before installation of Process Engine in a production environment.  Returned Data Type  Reference  Syntax  <class> ref_null  The result is a null value in class.  Example  <Country> ref_null  The result is a null reference in Country.  "},{"id":292,"title":"reverse","url":"55440.htm","text":"Purpose  Used with sort to order a reference subset fact's list of objects in descending order according to the values of a specified criteria expression.   When multiple criteria expressions are specified for sort, reverse must be applied to each expression individually.   Returned Data Type  Reference subset  Example  Refer to sort.  "},{"id":293,"title":"sizeof","url":"56302.htm","text":"Purpose  Returns the number of elements in the specified array or hash.  Returned Data Type  Integer  Syntax  sizeof(array?[]|hash?{})  The result (integer) is the number of elements in the array or hash.   Example  sizeof(hash?{})  If hash?{} has 9 elements, the result is 9.  "},{"id":294,"title":"sort","url":"55439.htm","text":"Purpose  Orders a reference subset according to the values returned by the criteria expressions.    After the first criteria expression, each subsequent expression defines the order of results ranked equally by the previous expression.  Valid criteria expressions types are:   text   integer   decimal   percent   currency   date-time   duration.  The order defined by each criteria expression is ascending, unless the expression is preceded by reverse. For backward compatibility, reverse can be used before sort when only one criteria expression is specified.   Syntax  sort (<reference-subset-expression>, [reverse] <criteria-expression1> [, [reverse] <criteria-expression2>]...)  [reverse] sort (<reference-subset-expression>, <criteria-expression1>)  Examples  sort ([All_Actions],[Action].[Due])  Sorts the action objects identified by the All_Actions reference subset fact in an ascending order of the value of the Due fact.  first(reverse sort ([All_Actions],[Action].[Due]))  If used on the Case class, the result is the Case_Action object for the last action due for the case.  sort (get all <Case> where [ContactForCase_R] = this, [Date_Closed], reverse [Date_Received])  For the contact being viewed, this search returns all the contact's cases sorted by date closed and date opened. Open cases are displayed first, with the most recently opened highest among those.   "},{"id":295,"title":"sounds like","url":"9552.htm","text":"Purpose  Compares two strings and determines whether one string character is phonetically similar to the other string character.  Returned Data Type  Boolean  Syntax  <text-expression1> sounds like <text-expression2>  The result is True when <text-expression1> and <text-expression2> sound similar.  Example  [Surname] sounds like 'kelvin'  The result is True if the surname sounds like 'kelvin'.  The surname could be kelvin, celvin, or kelwin.  "},{"id":296,"title":"starts with","url":"9554.htm","text":"Purpose  Determines whether or not one character string is the same as the start of another character string.   It can also be used to simulate like.  Returned Data Type  Boolean  Syntax  <text-expression1> starts with <text-expression2>  The result is True when:  The first characters of <text-expression1> are the same as <text-expression2>.   <text-expression1> is Null.  Example  [Description] starts with 'ACCT'  The result is True if the description has the characters ACCT at the beginning.  "},{"id":297,"title":"substring","url":"9556.htm","text":"Purpose  Retrieves the characters between two specified positions from a character string.  Returned Data Type  Text  Syntax  substring (<text-expression>, <integer-expression1>, <integer-expression2>)  The result is the string of characters from <text-expression> starting with the character in the ordinal position specified by <integer-expression1> and ending with the character in the ordinal position specified by <integer-expression2>.  The first character in <text-expression> is at position 1, not 0.  Example  substring ([State], 2, 5)  If the state is New South Wales, the result is ew S.  "},{"id":298,"title":"text","url":"9558.htm","text":"Purpose  Converts a non-text value to text.  When converting a date-time expression to text, the format is determined by the locale setting on the server.  To extract the day, month, or year from a date, use the dayofmonth, monthofyear, and year reserved words because these are not dependent on the local date format, which may change.  Returned Data Type  Text  Syntax  text (<integer-expression> | <duration-expression> | <date-time-expression>)  The result is an integer, duration, or date-time value converted to a string of left-justified characters.  text (<decimal-expression> | <percent-expression> | <currency-expression>), <integer-expression>  The result is the decimal, percent, or currency value converted to a string of left-justified characters containing integer expression characters after the decimal separator.  Examples  text ([Date_Received])  The result is the received date in text format.  cond(  Deposit_Acct_Num_ID] is not null : text([Deposit_Acct_Num_ID]),  else :  text([Primary_Acct_Num_ID])  )  If Deposit_Acct_Num_ID is available, the result is its value in text format; otherwise, the value of Primary_Acct_Num_ID in text format.  "},{"id":299,"title":"this","url":"9560.htm","text":"Purpose  Used as a reference to the current object; that is, the object that is selected. It can be read as 'this object'.    It can be used with the where, filter, or cond reserved words. Association classes are used to obtain information about the current object from classes other than the current object's class.  this must be used to compare two reference facts in the same class. It cannot be used in expressions on keyless classes because there is no primary key to compare.    Returned Data Type  Reference  Syntax  this  Examples  get max [Case_Contact.Case_Date_Received] where [Contact] = this  The result is the most recent Case from the Case_Contact class for the current contact; that is, the last time this contact had a new case recorded.  cond ([PayCurrency_R] = this.[ToAcctCur_R] : $0.00)  The result is $0.00 if the PayCurrency_R in the current object equals the ToAcctCur_R in the same object.  "},{"id":300,"title":"time","url":"9562.htm","text":"Purpose  Converts a series of comma-separated integers into a time.  Returned Data Type  Date-time  Syntax  time (<integer-constant1>, <integer-constant2>, <integer-constant3>)  The result is a time in which <integer-constant1> is converted to hours, <integer-constant2> to minutes, and <integer-constant3> to seconds.  Example  time (10, 25, 40)  The result is 10:25:40.  "},{"id":301,"title":"to_bool","url":"41902.htm","text":"Purpose  Converts an integer value to a boolean.  If the integer value is 1 or greater, it returns True.  The integer must not contain negative numbers.  Returned Data Type  boolean  Syntax  to_bool (<integer-expression>)  The result is True or False depending on the integer value.  Example  to_bool ([Has_Been_Closed])  If the value of Has_Been_Closed is:  20, the result is True.   0, the result is False.  "},{"id":302,"title":"to_currency","url":"9564.htm","text":"Purpose  Converts a text or decimal value to a currency.   It is often used with text facts mapped to Convergent Billing general fields that store an integer or a decimal.  If the text fact contains text rather than numbers, null is returned.  Returned Data Type  Currency  Syntax  to_currency (<text-expression> | <decimal-expression>)  The result is the value in the text expression or the decimal expression converted to currency.  Example  to_currency ([Price])  If Price is mapped to General_1, and General_1 contains 20.25, the result is $20.25.  The result is displayed with or without a currency symbol depending on the ShowCurrencySymbol setting (see the System Reference Guide for Singleview).  "},{"id":303,"title":"to_date","url":"9566.htm","text":"Purpose  Converts a text value to a date-time.  It is used with text facts mapped to Convergent Billing general fields that store a date-time.  If the text fact contains text rather than a date-time, null is returned.  Returned Data Type  Date-time  Syntax  to_date (<text-expression>)  The result is the value in the text expression, converted to date-time.  Example  to_date ([Due_X])  If Due_X is mapped to General_1, and General_1 contains 05-02-2009 14:54:50, the result is 05-02-2009 14:54:50.  "},{"id":304,"title":"to_integer","url":"9568.htm","text":"Purpose  Converts a text value to an integer.  It is often used with text facts mapped to Convergent Billing general fields that store an integer.  If the text fact contains text rather than numbers, null is returned.  Returned Data Type  Integer  Syntax  to_integer (<text-expression>)  The result is the values in <text-expression> converted to an integer.  Example  to_integer ([Count_X])  If Count_X is mapped to General_1, and General_1 contains 20.25, the result is 20.  "},{"id":305,"title":"to_memo","url":"41903.htm","text":"Purpose  Converts a text value to a memo.  Returned Data Type  memo  Syntax  to_memo (<text-expression>)  The result is the value in <text-expression> converted to a memo.  Example  to_memo ([Last_Name])  If Last_Name is Pine, the result is Pine.  "},{"id":306,"title":"to_percent","url":"9570.htm","text":"Purpose  Converts a text or decimal value to a percent.  It is often used with text facts mapped to Convergent Billing general fields that store an integer, or decimal.  If the text fact contains text rather than a number, null is returned.  Returned Data Type  Percent  Syntax  to_percent (<text-expression> | <decimal-expression>)  The result is the value in the <text-expression> or the <decimal-expression> converted to a percent.  Example  to_percent ([TotalCharge_X])  If TotalCharge_X contains 20, the result is 20%.   If the fact contains a decimal, the result is a percent rounded to two decimal points.  For example, if TotalCharge_S contains 20.256, the result is 20.26%.  "},{"id":307,"title":"to_period","url":"9572.htm","text":"Purpose  Converts a text or date-time value to a duration.  It is often used with text facts mapped to Convergent Billing general fields that store a duration.  If the text fact contains text rather than a number, null is returned.  Returned Data Type  Duration  Syntax  to_period (<text-expression> | <date-time-expression>)  The result is the value in <text-expression> or <date-time-expression> converted to a duration.  Example  to_period ([Time_Taken])  If Time_Taken contains 26h, the result is 1d 2h.  "},{"id":308,"title":"to_real","url":"9574.htm","text":"Purpose  Converts a text value to a decimal.  It is often used with text facts mapped to Convergent Billing general fields that store an integer or a decimal.  If the text fact contains text rather than a number, null is returned.  Returned Data Type  Decimal  Syntax  to_real (<text-expression>)  The result is the value contained in the <text-expression>, converted to a decimal.  Example  to_real ([Amount_X])  If Amount_X is mapped to General_1, and General_1 contains 20.254, the result is 20.254.  If the fact contains a whole number, the result is a whole number, unless otherwise defined in the display format (see the Configuration Workbench Tools Guide for Singleview Process Engine).  "},{"id":309,"title":"to_ref","url":"9576.htm","text":"Purpose  Converts a text value to a reference.  It is often used with Convergent Billing general fields that store a number. For example, a general field can store the reference code for a reference type and the reference code needs to be mapped to a reference fact in Process Engine.  This is done using a derivation and the to_ref expression to convert the string value into an integer for the reference fact.  It can also be used to look up Process Engine objects using the Name fact in any class.    If the string expression does not contain a value or contains text (rather than a number) that does not match anything, null is returned.  If the string expression contains a number than does not match, that number is returned.  Reference facts are only pointers to a record in another class.  Returned Data Type  Reference  Syntax  to_ref(<class> <text-expression>)  The result is a reference.  Example  to_ref(<CustListExemptions>[General1])  If General_1 contains an integer value, the result is the value stored in General1 in the CustListExemptions class converted to a reference.  to_ref(<GLCodeAcctCategory>'DEPOSIT')  If DEPOSIT is a valid reference code label, the result is the text converted to a reference.  "},{"id":310,"title":"true, false","url":"9578.htm","text":"Purpose  Specifies the corresponding boolean state; for example, to set appropriate defaults for boolean facts.  Returned Data Type  Boolean  Syntax  True|False  Example  cond(count([All_OrderedProd]) = 0 : True, else: False)  When a product has been added to an order, enable the Submit Order button in Process Engine web client.  "},{"id":311,"title":"week, day, hour, minute","url":"9580.htm","text":"Purpose  Retrieves a date-time, rounded to the first second of a week, day, hour, or minute from a specified date-time.  Returned Data Type  Date-time  Syntax  week|day|hour|minute (<date-time-expression>)  The result is a date-time rounded to the first second in the week, day, hour, or minute of <date-time-expression>.  Example  day ({Now})  The result is the date-time with the time portion beginning from the first second of today.  "},{"id":312,"title":"weeks, days, hours, minutes","url":"9582.htm","text":"Purpose  Retrieves the number of weeks, days, hours, or minutes from a specified duration.  Returned Data Type  Integer  Syntax  weeks|days|hours|minutes (<duration-expression>)  The result is the number of weeks, days, hours, or minutes in <duration-expression>.  Example  days ([TrtResolutionDueDate_T])  The result is the number of days in TrtResolutionDueDate_T.   "},{"id":313,"title":"where","url":"9584.htm","text":"Purpose  Specifies the conditions under which specified values are to be retrieved.  It can be used with exists, get, get all, count, or min, max, sum, or average.   Any expression containing where is converted to SQL and executed in the database.  All other expressions are executed directly in the Process Engine server.  Returned Data Type  Boolean  Syntax  where <boolean-expression>  The result is True, if <boolean-expression> is True.  Example  where [Type] = {This_Contact_Type}  The result is True, if Type is the same as the current contact type.  "},{"id":314,"title":"year","url":"9588.htm","text":"Purpose  Returns the year from a date-time expression.  Returned Data Type  Integer  Syntax  year (<date-time-expression>)  The result is the four-digit year from <date-time-expression>.  Example  year ([Date_Received])  If Date_Received is 2009/03/23, the result is 2009.  "},{"id":315,"title":"SQL and where","url":"9586.htm","text":"Any expression containing the where reserved word is converted to SQL and executed in the database.  All other expressions are executed in the Process Engine server.  Examples of expressions containing where are:  get max <integer-class-fact> where <boolean-expression>  get max [Case_Contact.Case_Date_Received] where [Contact] = this  get all <Status> where [RefClass] = <Class>'Case'  The boolean expression following where must contain only constructs supported by SQL; for example, and and =.  Process Engine reserved words such as sounds like and text are not SQL constructs and cannot be used in boolean expressions following where.   SQL is more efficient in handling large amounts of data, and the Process Engine server with smaller amounts.  For example, the following expressions are equivalent:   get all <Contact_Number> where [Contact] = {This_Contact} and [Type] = <Contact_Number_Type>'Email')).[Contact_Number]  filter([All_Numbers], [Type] = <Contact_Number_Type>'Email')  The get all expression is converted to SQL and executed in the database; the filter expression is executed in the Process Engine server.  For large amounts of data the get all expression is more efficient than the filter expression.  The Process Engine server always examines the latest data, even if it is not committed to the database.  SQL only examines the committed data.  Therefore, filter and get all may not return the same data.  The following Process Engine reserved words can be converted to SQL; that is, they can be used in boolean expressions following where, except where specifically stated otherwise:  +, -, *, /  =, <>, <, >, <=, >=  and, or, not  between  count (Cannot be used following the WHERE clause, and can only be used before where reserved word instead of get)  exists, not exists  in, not in  is null, is not null  length  like  max, min, sum, average, all (Cannot be used following the WHERE clause, and can only be used in conjunction with the get reserved word)  starts with (converted to like)  true, false.  "},{"id":316,"title":"Expression Language Syntax","url":"9591.htm","text":"The following table lists rules describing the syntax for expressions listed in Expression Types and Valid Expressions.  The table has the following columns:  Syntax Language  Used only for descriptive purposes; it does not necessarily reflect how elements of an expression are entered in Process Engine.  The column displays how elements are referred to in expressions in Expression Types and Valid Expressions.  Where no specific data type is used in the expression syntax description (as in <fact> or <expression>), it is replaced by the data type of the fact or expression (for example, integer).   Meaning/Action   Describes what the syntax language represents and how it is entered in Process Engine.  Expression Examples  Provides examples of how to enter the expression into Process Engine.  Expression Language Syntax  Syntax Language  Meaning/Action  Expression Examples  < ...  >  Angle brackets indicate a token (or placeholder) (for example, <class>).  //  Indicates a comment.  Comments can be inserted into an expression at any point.  A hard return indicates the end of a comment.  // sum value  [ ... ]  Square brackets in bold type indicate a group of options, one of which can be (but does not have to be) included in the expression.  A group can comprise a single option.  |  Indicates alternatives.  It is equivalent to 'or'.  .   Indicates a link between facts.  It is used when specifying the derivation of a fact's value.  The reference fact name is in square brackets, followed by a full stop, then the next fact's name in square brackets, and so on.   [Type].[Name]  get  starts with …  Reserved words.  Enter exactly as displayed.  get  starts with  <class>  Name of an unqualified object class; that is, only the class is specified.  No fact from the class is specified (as there is with <*-class-fact>).  Enclose the class name in angle brackets.  <Contact>  <Case>  <*-fact>  Name of a fact, where * defines the data type of the fact (for example, <int-fact> or <text-fact>).  Enclose the fact name in square brackets.  [Due_Date]  [Surname]  <*-class-fact>  Name of an object class and a fact, where * defines the data type of the fact (for example, <int-class-fact> or <text-class-fact>) in the object class.  It is used only after the get reserved word.  Enclose the class name, followed by a full stop, and the fact name in square brackets.  [Action.Due_Date]  [Contact.Surname]  <*-param>  Name of a parameter, where * is a data type applicable to the expression's data type (for example, <date-time-param> or <ref-param>).   Enclose the parameter name in braces.  {Now}  {User}  {This_Action}  <text-const>  Text constant.  Enclose the constant in single quotation marks.  'Close'  'Smith'  <int-const>  Integer constant.  Enter the constant.  1357  1122  <dec-const>  Decimal constant.  Enter the constant.  123.45  235.7  <date-time const>  Date-time constant in yyyy/mm/dd [hh:mm:ss] format.  The date can be followed, where required, by the time.  If time is not specified, 00:00:00 is used by default.  2001/10/11 23:30:00  1978/12/29  <duration-const>  Duration (or period) constant entered as minutes, hours, days, or weeks.  Order of entry is not important.  Enter:  'm' after a number of minutes.  'h' after a number of hours.  'd' after a number of days.  'w' after a number of weeks.  5w  2h 30m  5h 2d  <currency-const>  Currency constant.  Enter the constant.  $123.45  $235.7  <percent-const>  Percent constant.  Enter the constant.  12%  123.45%  <*-expression>  Name of an expression, where * defines the data type of the expression (for example, <integer-expression> or <text-expression>).  <expression>  Expression of any data type.  "},{"id":317,"title":"Expression Types and Valid Expressions","url":"9593.htm","text":"This section lists expression types and valid expressions for each type, using expression syntax.  "},{"id":318,"title":"Boolean Expressions","url":"9594.htm","text":"Where ... expression is displayed two or more times in a single expression below, all ... expression must be of the same type.  Valid boolean expressions are:  true  false  <bool-fact>  <bool-param>  (reference-expression).<bool-fact>  get <bool-class-fact> where (boolean-expression)  exists <class> where (boolean-expression)  (...  expression) is [not] null  (...  expression) in (< ...  const> [, <… const>] ...  )  ...  expression (= | <> | < | > | <= | >=) ...  expression  ...  expression [not] between ...  expression and ...  expression  cond ((boolean-expression) : (boolean-expression) [, (boolean-expression) : (boolean-expression) ] ... [, else : (boolean-expression)])  text-expression starts with text-expression  text-expression like text-expression  text-expression sounds like text-expression  boolean-expression (and | or) boolean-expression  not boolean-expression  (boolean-expression)  to_boolean(epm(function&(...expression)))  Examples  Examples of boolean expressions are:  [Name] sounds like 'Kleinau' or [Name] starts with 'K'  [Type].[Id] not in ('CSR', 'COMM', 'BUS') and (not [Do_Not_Survey] or {Now} > 1998/05/06)  exists [Case] where [Manager] = {User} and [Due Date] < this.[Due Date]  cond( [Type] = {it_BillingInquiry} : False)  "},{"id":319,"title":"Currency Expressions","url":"9595.htm","text":"Valid currency expressions are:  <currency-const>  -<currency-const>  <currency-fact>  <currency-param>  (reference-expression).<currency-fact>  get [max | min | sum | average] <currency-class-fact> where (boolean-expression)  (currency-expression) (+ | - ) (currency-expression)  (currency-expression) (* | / ) ((integer-expression) | (decimal-expression))  (percent-expression) of (currency-expression)  cond ((boolean-expression) : (currency-expression) [, (boolean-expression) : (currency-expression) ] ... [, else : (currency-expression)])  nullval ((currency-expression) [, (currency-expression)] ...)  (currency-expression)  if (boolean-expression, currency-expression, currency-expression)  to_currency(epm(function#(...expression)))  Examples  Examples of currency expressions are:  nullval(get [CBUser.Max_Adjustment_Amount] where [Name]={User}.[Name], $0.00)  [Adjustment_Limit] * -1  [Ref_Sel_Cust_Acct].[Credit_Limit]  ([Event_Credit_Percent] of [Event_Adj_Max_Adj_Amount])/100  "},{"id":320,"title":"Date-time Expressions","url":"9596.htm","text":"Valid date-time expressions are:  <date-const>[<time-const>]  date (<int-const>, <int-const>, <int-const>)  <date-time-fact>  <date-time-param>  (reference-expression).<date-time-fact>  get [max | min | average] <date-time-class-fact> where (boolean-expression)  (date-time-expression) (+ | -) (duration-expression)  (week | day | hour | minutes) (date-time-expression)  cond ((boolean-expression) : (date-time-expression) [, (boolean-expression) : (date-time-expression)] ... [, else : (date-time-expression)])  nullval ((date-time-expression) [, (date-time-expression)] ...)  (date-time-expression)  ceil (date-time-expression)  floor (date-time-expression)  to_date (string-expression)  if (boolean-expression, date-time-expression, date-time-expression)  epm(function~(...expression))  Examples  Examples of date-time expressions are:  get [Close Date] where [Priority] > 50  cond( [Type] in ({it_AcctInvAdj}, <br>{it_UsageAdj} ) : {Now})  cond([Status]={st_issOpen} :{Infinite_Date},Else : [Last_Modified] )  date(year({Now}), monthofyear({Now}), dayofmonth({Now}))  date(year({Now}), monthofyear({Now}), dayofmonth({Now})) + 23h + 59m + 59s  {Now}  "},{"id":321,"title":"Decimal Expressions","url":"9597.htm","text":"Valid decimal expressions are:  <decimal-const>  -<decimal-const>  <decimal-fact>  <decimal-param>  (reference-expression).<decimal-fact>  get [max | min | sum | average] <dec-class-fact> where (boolean-expression)  (decimal-expression) (+ | - | * | / ) (decimal-expression)  (decimal-expression) (+ | - | * | / ) (integer-expression)  (integer-expression) (+ | - | * | / ) (decimal-expression)  (percent-expression) of (decimal-expression)  cond ((boolean-expression) : (decimal-expression) [, (boolean-expression) : (decimal-expression)] ... [, else : (decimal-expression)])  nullval ((decimal-expression) [,(decimal-expression)] ... )  (decimal-expression)  to_real (string-expression)  ceil (decimal-expression)  floor (decimal-expression)  if (boolean-expression, decimal-expression, decimal-expression)  epm(function#(...expression))  Examples  Examples of decimal expressions are:  17/5.0  [Amount]/0.66  get average [Priority] where [Assigned To] = this  ([Integer_Fact]*1.0)/77  "},{"id":322,"title":"Duration Expressions","url":"9598.htm","text":"Valid duration expressions are:  <duration-const>  -<duration-const>  <duration-fact>  time (<integer-const>, <integer-const>, <integer-const>)  <duration-param>  (reference-expression).<duration-fact>  get [max | min | sum | average] <duration-class-fact> where (boolean-expression)  (duration-expression) (+ | -) (duration-expression)  (date-time-expression) - (date-time-expression)  cond ((boolean-expression) : (duration-expression) [, (boolean-expression) : (duration-expression)] ... [, else : (duration-expression)])  nullval ((duration-expression) [, (duration-expression) ] ...)  (duration-expression)  if (boolean-expression, duration-expression, duration-expression)  to_period (string-expression |date-time-expression)  Examples  Examples of duration expressions are:  [ClosedDateSearch_T] - [Created_Date]  {Now} - [Created_Date]  get sum [Action.WorkTime_D]<br>  where ( exists <Issue_Action><br>  where [Issue] = {This_Issue} and <br>        [Action] = {This_Action} )<br>  and [Assigned_Work_Group] = {wg_FieldServices}  "},{"id":323,"title":"Integer Expressions","url":"9599.htm","text":"Valid integer expressions are:  <integer-const>  -<integer-const>  <integer-fact>  <integer-param>  (reference-expression).<integer-fact>  get [max | min | sum | average] <int-class-fact> where (boolean-expression)  count <class> where (boolean-expression)  count ((reference subset expression))  (integer-expression) ( + | - | * | / ) (integer-expression)  (weeks | days | hours | minutes) (duration-expression)  findstring ((text-expression 1), (text-expression 2) [, integer-const] )  length (text-expression)  cond ((boolean-expression) : (integer-expression) [, (boolean-expression) : (integer-expression)] ... [, else : (integer-expression)])  nullval ((integer-expression) [, (integer-expression)] ...)  (integer-expression)  ceil (integer-expression)  floor (integer-expression)  if (boolean-expression, integer-expression, integer-expression)  to_integer (string-expression)  dayofmonth(date-time-expression)  monthofyear(date-time-expression)  year(date-time-expression)  epm(function&(...expression))  Examples  Examples of integer expressions are:  4 + 5  first(filter([All_Invoice_Event_Charge],[Selected])).[Normalised_Event_ID]  count (filter ( [All_Actions],([Action].[Type]=<Action_Type>'Send Acct/Inv Adj' ) )  days([DateOfNextStep_T] - {Now})  findstring ([Text_Fact], ':' )  "},{"id":324,"title":"Memo Expressions","url":"9600.htm","text":"Valid memo expressions are:  <memo-fact>  (reference-expression).<memo-fact>  get <memo-class-fact> where (boolean-expression)  (memo-expression) + (memo-expression)  cond ((boolean-expression) : (memo-expression) [, (boolean-expression) : (memo-expression)] ... [, else : (memo-expression)])  (memo-expression)  to_memo(epm(function$(...expression)))  Examples  Examples of memo expressions are:  [Comment]  [Comment] + [New_Comment]  "},{"id":325,"title":"Percent Expressions","url":"9601.htm","text":"Valid percent expressions are:  <percent-const>  -<percent-const>  <percent-fact>  <percent-param>  (reference-expression).<percent-fact>  get [max | min | sum | average] <percent-class-fact> where (boolean-expression)  (percent-expression) (+ | -) (percent-expression)  cond ((boolean-expression) : (percent-expression) [, (boolean-expression) : (percent-expression) ] ... [ , else : (percent-expression)])  nullval ((percent-expression) [, (percent-expression)] ...)  (percent-expression)  if (boolean-expression, percent-expression, percent-expression)  to_percent(epm(function#(...expression)))  Examples  Examples of percent expressions are:  17%  [Fact1] + 17%  "},{"id":326,"title":"Reference Expressions","url":"9603.htm","text":"Valid reference expressions are:  <class><text-const>  this  <reference-fact>  <reference-param>  (reference-expression).<reference-fact>  first ((reference subset-expression))[.(reference-expression)]  nth ((reference subset expression), (integer-exp))[.(reference-expression)]  get <class> where (boolean-expression)  get <ref-class-fact> where (boolean-expression)  cond ((boolean-expression): (reference-expression) [, (boolean-expression): (reference-expression)] ... [, else: (reference-expression)])  nullval ((reference-expression) [, (reference-expression)] ...)  (reference-expression)  if (boolean-expression, reference-expression, reference-expression)  to_ref (<class>string-expression)  epm(function@(...expression))  Examples  Examples of reference expressions are:  first( [All_Actions] ).[Action].[Assigned_User]  <Security_Group>'Default'  get [Case] where [ID] = 'C/95/102'  "},{"id":327,"title":"Reference Subset Expressions","url":"55441.htm","text":"Valid reference subset expressions are:  <reference subset-fact>  [(reference expression).]<reference subset-fact>  (reference subset expression).<reference-fact>  (reference subset expression).<reference subset-fact>  filter ((reference subset expression), (boolean expression))  sort (reference subset expression, [reverse] (orderable-expression-type) [, [reverse] (orderable-expression-type)]... )  [reverse] sort (reference subset expression, (orderable-expression-type))  get all <class> where (Boolean expression)  cond ((boolean-expression) : (reference subset-expression) [, (boolean-expression) : (reference subset-expression)] ... [, else : (reference subset-expression)])  (reference subset expression)  epm(function@[](...expression))  Examples  Examples of reference subset expressions are:  reverse sort([All_Acct_Num_Trans],[C_Trans_Seq_Num])  sort([All_Acct_Num_Trans], [Name], reverse [Description])  get all <Security_Group>  [Ref_Sel_Cust_Acct].[All_BaseProduct]  filter([All_Invoice_Event_Charge],[Dispute_Now])  [All_Issues].[All_Comment_Issue]  (get all <Case>).[Priority]  "},{"id":328,"title":"Text Expressions","url":"9604.htm","text":"Valid expressions are:  <text-const>  <text-fact>  <text-param>  (reference-expression).<text-fact>  get <text-class-fact> where (boolean-expression)  (text-expression) + (text-expression)  substring ((text-expression), (integer-expression), (integer-expression))  alias ((text-expression), (integer-expression) [, (integer-expression)])  cond ((boolean-expression): (text-expression) [, (boolean-expression): (text-expression)] ...  [, else: (text-expression]))  nullval ((text-expression) [, (text-expression)] ...)  (text-expression)  text ((integer expression | date-time expression | duration expression))  text ((decimal expression | percent expression | currency expression) integer expression)  makelist (reference subset expression, text expression,[(<text-const> | null)])  if (boolean-expression, text-expression, text-expression)  epm(function$(...expression))  Text constants (<text-const>) must be used carefully to avoid internationalisation problems. <text-const>=\" (the empty string) is a syntax error.  Examples  Examples of text expressions are:  if((4+5+6)*2 > 14, 'Fred', substring([Surname], 3, 5))  cond([Type] = [Contact].[Type]: 'Business, [Type] = [Manager].[Type]: 'Commercial', else: 'Other')  [Close Date].[Assigned To].[Surname]  text([Primary_Acct_Num_ID]) + ',' + text([Deposit_Acct_Num_ID])  "},{"id":329,"title":"Core Classes","url":"9617.htm","text":"This section describes how to identify core facts in extensible classes and Process Engine core classes.  "},{"id":330,"title":"Identifying Core Facts in Extensible Classes","url":"9618.htm","text":"Extensible core classes can contain both core and user-defined facts.  Only some attributes of core facts can be updated; for example, the Fact Name attribute cannot be updated for core facts.   To identify core facts in extensible classes:  Select the Lock option and select the fact in the Fact Tool.  If the Fact Name attribute is greyed-out, the fact is a core fact.   If the fact key (displayed in the Key field) is less than 2000, the fact is a core fact.  "},{"id":331,"title":"Extensible Core Classes","url":"9618.htm#o55539","text":"All extensible core classes can be referenced by a reference fact.  The following table lists extensible core classes.  Extensible Core Classes  Class  Contains  Database Table  Action  Actions, events, milestones, procedures, and comments.  ACTION_VAL  ACTION_BIN  Action_Classification  Action classifications (for example, campaign).   ACTION_CLASSIFICATION_VAL  ACTION_CLASSIFICATION_BIN  Audit_Log  Maintains audit log records.  AUDIT_LOG_VAL  Audit_Operation  Defines the four core operations (Create, Retrieve, Update, and Obsolete) that are selected in an audit profile.  AUDIT_OPERATION_VAL  Banner_Message  Communications banner messages.  BANNER_MESSAGE_VAL  Case  Cases.  CASE_VAL  CASE_BIN  Case_Action  Associations between cases and actions.  CASE_ACTION_VAL  CASE_ACTION_BIN  Case_Action_Type  Types of case action associations (for example, request).  CASE_ACTION_TYPE_VAL  CASE_ACTION_TYPE_BIN  Case_Contact  Associations between cases and contacts.  CASE_CONTACT_VAL  CASE_CONTACT_BIN  Case_Contact_Type  Types of case contact associations; for example, primary.  CASE_CONTACT_TYPE_VAL  CASE_CONTACT_TYPE_BIN  Case_Type  Types of cases.  CASE_TYPE_VAL  CASE_TYPE_BIN  Chart_Type  Types of chart that can be displayed in the Process Engine web client Graph gadget.  Process Engine web client ignores extensions to this class.  UDOC_VAL  Contact  Organisations, people, and users.  CONTACT_VAL  CONTACT_BIN  Contact_Action  Associations between contacts and actions.  CONTACT_ACTION_VAL  CONTACT_ACTION_BIN  Contact_Action_Type  Type of contact action associations (for example, sender).  CONTACT_ACTION_TYPE_VAL  CONTACT_ACTION_TYPE_BIN  Contact_Number  Contact methods (for example, telephone).  CONTACT_NUMBER_VAL  CONTACT_NUMBER_BIN  Contact_Number_Type  Types of contact numbers (for example, work).  CONTACT_NUMBER_TYPE_VAL  CONTACT_NUMBER_TYPE_BIN  Contact_Type  Types of contacts (for example, business).  CONTACT_TYPE_VAL  CONTACT_TYPE_BIN  Content_Types  Content types.  CONTENT_TYPES_VAL  CONTENT_TYPES_BIN  Country  Countries.  COUNTY_VAL  COUNTRY_BIN  Document  Microsoft Word document that can be automatically generated by an action type.  An action type can have document merge definitions assigned to it, and automatically generate the document when the action is triggered or created.  DOCUMENT_VAL  DOCUMENT_BIN  Document_Template  Document template  TEMPLATE_ID  External_Defn  External definitions.  This class is shared with Convergent Billing.  Process Engine definitions have a non-null PE_CLASS_ID.  EXTERNAL_DEFN_TRE_V  External_Defn_Element  External definition elements for Process Engine external definitions.  This class is shared with Convergent Billing.   EXTERNAL_DEFN_ELEMENT_TRE_V  External_Defn_<br>Namespace   External definition namespaces.  This class is shared with Convergent Billing.   EXTERNAL_DEFN_NAMESPACE_TRE_V  Gadget_Configuration  Configuration for Process Engine web client gadgets.  Process Engine web client ignores extensions to this class.  UDOC_VAL  Gadget_Configuration_<br>Type  Types of optional Process Engine web client gadgets.  Process Engine web client ignores extensions to this class.  UDOC_VAL  Gadget_URL  External Content URLs available for display in Process Engine web client gadgets.  Process Engine web client ignores extensions to this class.  GADGET_URL_VAL  GADGET_URL_BIN  Issue  Issues.  ISSUE_VAL  ISSUE_BIN  Issue_Action  Associations between issues and actions.  ISSUE_ACTION_VAL  ISSUE_ACTION_BIN  Issue_Action_Type  Types of issue action associations (for example, request).  ISSUE_ACTION_TYPE_VAL  ISSUE_ACTION_TYPE_BIN  Issue_Contact  Associations between issues and contacts.  ISSUE_CONTACT_VAL  ISSUE_CONTACT_BIN  Issue_Contact_Type  Types of issues contact associations (for example, complained about).  ISSUE_CONTACT_TYPE_VAL  ISSUE_CONTACT_TYPE_BIN  Issue_Type  Issue types (for example, troubleshooting).  ISSUE_TYPE_VAL  ISSUE_TYPE_BIN  Permission  Permissions that can be assigned to security groups.  Permission is a remote keyless class, mapped to the Convergent Billing ATLANTA_PROFILE_GROUP_MAP table.  Permissions are maintained in Convergent Billing.  ATLANTA_PROFILE_GROUP_MAP  Priority  Priorities (for example, urgent).  PRIORITY_VAL  PRIORITY_BIN  Report  Objects stored every time a report is run.  REPORT_VAL  REPORT_BIN  Report_Definition  All reports, which can be run using the pe_report server utility.  REPORT_DEFINITION_VAL  REPORT_DEFINITION_BIN  Role_Work_Group  Associations between work groups and profiles.  Work groups and profiles are maintained in Convergent Billing.  ATLANTA_PROFILE_WF_MAP  Sex  Sex of users and contacts.  SEX_VAL  SEX_BIN  Suffix  Suffixes (for example, Ph.D).  SUFFIX_VAL  SUFFIX_BIN  Team  Teams (for example, wireless).  TEAM_VAL  TEAM_BIN  Tenant  Tenant.  Used to support multi-tenancy in PE.  Maintained in Convergent Billing.  TENANT_TRE_V  Tenant_Status  Tenant Status.  Represents the current status of the tenant.  Maintained in Convergent Billing.  REFERENCE_CODE  Title  Titles of contacts and users (for example, Ms).  TITLE_VAL  TITLE_BIN  Transform_Names  Transform names.  TRANSFORM_NAMES_VAL  TRANSFORM_NAMES_BIN  User_Profile  Profiles.  This class is required for display purposes only and enables users to select a Convergent Billing profile when maintaining users in Process Engine.  The profiles are maintained in Convergent Billing.  PROFILE_TRE_V  User_Type  User types into which users are grouped.  USER_TYPE_VAL  USER_TYPE_BIN  Work_Group  Groups of users for assigning action types to a group (instead of individual users) (for example, customer care).  The Work_Group_Manager fact specifies a manager for the work group.  If an action is assigned to a work group but not a specific user, notifications for the assigned user are sent to the work group manager.  Only one manager can be assigned for a work group.  The Work_Group class is remote and mapped to the Convergent Billing WORK_FORCE table. Process Engine cannot create or updated objects in this class.  WORK_FORCE  "},{"id":332,"title":"Non-extensible Core Classes","url":"55517.htm","text":"The following table lists non-extensible core classes.  All non-extensible core classes can be referenced by a reference fact.  Non-extensible Core Classes  Class  Contains  Database Tables  Storage  Attribute_Type  Information relating to attribute types defining the level of data protection and field validation rules associated with a fact.   ATTRIBUTE_TYPE  Remote  Image  Images.  IMAGE_VAL  IMAGE_BIN  Local  Language  Languages supported by the Process Engine server.  When a user logs in, the session is associated with a current language.  The language is defined by the ISO code for the requested language.  At runtime, the current language is available in the Current_Language parameter.  LANGUAGE_VAL  LANGUAGE_BIN  Local  Notification  Notifications (for example, emails sent to specific people).  NOTIFICATION_VAL  NOTIFICATION_BIN  Local  Notification_<br>Method  Method by which notifications are sent (for example, pop-up message).  NOTIFICATION_METHOD_VAL  NOTIFICATION_METHOD_BIN  Local  Role  Role is a remote class, mapped to the Convergent Billing PROFILE_TRE_V view.  Process Engine cannot create or update objects in this class.  PROFILE_TRE_V  Remote  Search_<br>Classification  Search classifications (for example, specific work group actions).  SEARCH_CLASSIFICATION_VAL  SEARCH_CLASSIFICATION_BIN  Local  Skill  Skills that can be allocated to users (for example, French).  Skill is deprecated and preserved only for backward compatibility.  SKILL_VAL  SKILL_BIN  Local  Skill_Type  Skill types into which skills are grouped (for example, language).  Skill_Type is no longer used because the Skill class has been deprecated.  SKILL_TYPE_VAL  SKILL_TYPE_BIN  Local  Version_History  History of database configurations loaded using the pe_dbload server utility.  The objects in the Version_History class are maintained by the pe_dbsave and pe_dbload server utilities only; all facts are read-only.   The history (see the System Administration Guide for Singleview) is displayed on the Data tab of the Class and Data Tool.  VERSION_HISTORY_VAL  VERSION_HISTORY_BIN  Local  "},{"id":333,"title":"Non-extensible Configuration Classes","url":"55541.htm","text":"Configuration classes are usually non-extensible core classes.  Unlike other non-extensible classes, configuration classes have additional data or objects defined using a dedicated configuration tool.  For example, additional objects can be added to the Business_Rule class using the Business Rule Tool.  The Ref column contains Yes if the class can be referenced by a reference fact.  The following table lists Process Engine non-extensible configuration classes.  Non-extensible Configuration Classes  Class  Contains  Database Table  Ref  Storage  Action_Hierarchy  Associations between the action types making up an action group as defined in the Action Groups tab of the Workflow Tool.  ACTION_HIERARCHY  Local  Action_Type  Action types and action groups defined in the Workflow Tool.  ACTION_TYPE_VAL  ACTION_TYPE_BIN  Yes  Local  Archive_Type  Archive types used with the pe_archive server utility.  PE_ARCHIVE_TYPE  PE_ARCHIVE_TYPE_TABLE_LIST  Local  Assoc_Tree_<br>Node_Defn  Definition of layout class supporting Association Tree view layout groups.  ASSOC_TREE_NODE_DEFN_VAL  ASSOC_TREE_NODE_DEFN_BIN  Yes  Local  Audit_Fact  Defines a fact to be audited, and the operations to be audited for that fact.  AUDIT_FACT_VAL  Yes  Local  Audit_Group  Defines the set of auditing rules for facts, and operations for a class to be audited.  AUDIT_GROUP_VAL  AUDIT_GROUP_BIN  Yes  Local  Audit_Profile  Defines a set of classes and fact operations to be audited.   AUDIT_PROFILE_VAL  AUDIT_PROFILE_BIN  Yes  Local  Base_Tab  Base tab definition.  BASE_TAB_VAL  BASE_TAB_BIN  Yes  Local  Base_View  Base view definition.  BASE_VIEW_VAL  BASE_VIEW_BIN  Yes  Local  Business_Rule  Business rules defined in the Business Rule Tool.  BUSINESS_RULE  Local  Calendar  Working time calendars defined in the Calendar Tool.  CALENDAR_CONFIG  CALENDAR_PERIOD  Yes  Local  Category  Categories assigned to objects in static and admin static classes.  CATEGORY_VAL  CATEGORY_BIN  Yes  Local  CB_Message  Messages defined in the Convergent Billing Message Definition form (see the Configuration Fundamentals Guide for Singleview Convergent Billing).  ERROR_MESSAGE  Yes  Remote  Class  Classes defined in the Class and Data Tool.  CLASS_CONFIG  Local  Configuration  Global configuration items defined in the Configuration tab of the Interface Design Tool.  CONFIG_ITEM  Local  Cross_<br>Validations  Cross validation rules defined in the Validation Tool.  CROSS_VALIDATION_INFO  CROSS_VALIDATION_FACTS  CROSS_VALIDATION_DATA  Local  CSR_Prompts  User prompts defined in the User Prompt Tool.  PROMPT_CONFIG  Local  Epm_Function  EPM functions.  FUNCTION_TRE_V  Yes  Remote  Escalation  Escalation policies defined in the Escalation Tool.  ESCALATION_VAL  ESCALATION_BIN  Yes  Local  External_<br>Services  External services defined in the External Services worksheet of the Microsoft Excel spreadsheet delivered with Process Engine.  External services are deprecated.  CSG International recommends that the TempObjectSet&() function be used instead.  SERVICE_CONFIG  SERVICE_FIELD  Local  Fact  Facts defined in the Fact Tool.  FACT_CONFIG  Local  Fact_State  Details of facts that have been selected for fact state changes, for each class defined in the Status Tool.  STATUS_FACT_STATE  Local  Function_Role  Function roles defined in the Convergent Billing Function Role Definition form (see the Security and Auditing Configuration Guide for Singleview).  FUNCTION_ROLE_TRE_V  Yes  Remote  Icon  Icons defined in the Icon Tool.  ICON_VAL  ICON_BIN  Yes  Local  Import_Export_<br>Maps  Import and export maps defined in the Import/Export Map Tool.  MAP_CONFIG  MAP_FIELD  Local  Layout_Fact_<br>Template  Facts in the fact layout template.  LAYOUT_FACT_TEMPLATE_VAL  LAYOUT_FACT_TEMPLATE_BIN  Yes  Local  Layout_Group_<br>New  Facts specific to each layout group.  LAYOUT_GROUP_NEW_VAL  LAYOUT_GROUP_NEW_BIN  Yes  Local  Layout_Group_<br>Template  Facts in the layout group template.   LAYOUT_GROUP_TEMPLATE_VAL  LAYOUT_GROUP_TEMPLATE_BIN  Yes  Local  Layout Manager  Available layout panels.  LAYOUT_MANAGER_VAL  LAYOUT_MANAGER_BIN  Yes  Local  Layout_New  Screen layout definitions.  LAYOUT_NEW_VAL  LAYOUT_NEW_BIN  Yes  Local  List_Col  List section column configuration.  LIST_COL_VAL  LIST_COL_BIN  Yes  Local  Menu_Item  Main menu and custom search menu items defined in the Menu Tool.  MENU_ITEM_VAL  MENU_ITEM_BIN  Yes  Local  Message  Text strings used in Process Engine web client, Configuration Workbench, and Administration Tool (for example, text displayed in Process Engine system-generated messages).  MESSAGE_VAL  MESSAGE_BIN  Yes  Local  Message_<br>Parameter  Placeholders used in messages, which are replaced at runtime.  For example, {FactKey} and {FactName} are replaced by the fact key and fact name in the following message:  Failed to construct fact clause for search SQL. Fact={FactKey} ({FactName})  MESSAGE_PARAMETER_VAL  MESSAGE_PARAMETER_BIN  Yes  Local  Message_Group  Message groups to which messages belong.  For example, Core_BusinessRule contains messages referenced by core business rules.  MESSAGE_GROUP_VAL  MESSAGE_GROUP_BIN  Yes  Local  Node  Script nodes defined in the Scripting Tool.  NODE_VAL  NODE_BIN  Yes  Local  Node_Chain  Details of how the script nodes are linked as defined in the Scripting Tool.  NODE_CHAIN_VAL  NODE_CHAIN_BIN  Yes  Local  Notification_Type  Notification types defined in the Notification Tool.  NOTIFICATION_TYPE_VAL  NOTIFICATION_TYPE_BIN  Yes  Local  Operation  The (non-triggered) operations that can be assigned to toolbars and menu items.  OPERATION_VAL  OPERATION_BIN  Yes  Local  Parameter  Parameters defined in the Parameter Tool.  PARAMETER_CONFIG  Local  Script  User scripts defined in the Scripting Tool.  SCRIPT_VAL  SCRIPT_BIN  Yes  Local  Search  Custom searches defined in the Search Tool.  SEARCH_CONFIG  SEARCH_GROUP  SEARCH_CLAUSE  SEARCH_BINREF  Local  Security_Group  Security groups for user access to objects and facts.  Security groups are maintained in Convergent Billing.  GROUP_TRE_V  Yes  Remote  Status  Statuses defined for each class in the Status Tool.  STATUS_VAL  STATUS_BIN  Yes  Local  Template  Merge documents defined in the Merge Definition Tool.  TEMPLATE_CONFIG  TEMPLATE_ACT_TYPE  TEMPLATE_FIELDS  Local  Thesaurus  Thesaurus items, defined for keyword searching, defined in the Thesaurus worksheet of the Microsoft Excel spreadsheet delivered with Process Engine.  THESAURUS  Local  Tool_Bar  Toolbar definition.  TOOL_BAR_VAL  TOOL_BAR_BIN  Yes  Local  Tool_Bar_Button  Toolbar button definition.  TOOL_BAR_BUTTON_VAL  TOOL_BAR_BUTTON_BIN  Yes  Local  Trigger_<br>Conditions  Details of when a trigger should fire for triggers defined using the Trigger Tool.  TRIGGER_COND_INFO  TRIGGER_GP_FACTS  TIMED_TRIGGERS  Local  Triggered_<br>Operations  Details (except for the trigger condition) of each trigger defined in the Trigger Tool.  TRIGGER_OP  Local  Triggers  Names of the triggers defined using the Trigger Tool.  TRIGGERS  Yes  Local  "},{"id":334,"title":"Admin Static User Configuration Classes","url":"55515.htm","text":"Admin static user configuration classes are the exception to the general rule that configuration classes are non-extensible.  The user configuration classes are extensible and adopt the behaviour of both dynamic and static classes.  All user configuration classes can be referenced by a reference fact.   The following table lists Process Engine admin static user configuration classes.  Admin Static User Configuration Classes  Class  Contains  Database Table  Storage  User  Users defined in the User Tool or the User page in Process Engine web client.  USER_VAL  USER_BIN  OPERATOR_TRE_V  Remote  User_Role  Roles assigned to users.  This class is deprecated.  USER_ROLE_VAL  USER_ROLE_BIN  Local  User_Skill  Skills assigned to users.  This class is deprecated and preserved only for backward compatibility.  USER_SKILL_VAL  USER_SKILL_BIN  Local  User_Work_Group  Work groups assigned to users.  This class is deprecated. Use the Role_Work_Group association class that links a work group to a profile.  USER_WORK_GROUP_VAL  USER_WORK_GROUP_BIN  Local  "},{"id":335,"title":"Glossary of Terms","url":"14827.htm","text":""},{"id":336,"title":"A","url":"14829.htm","text":""},{"id":337,"title":"Abstract External Definition","url":"14829.htm#o63065","text":"External definition that is not mapped to a Convergent Billing entity or a Process Engine class.  Context:  Singleview, Convergent Billing, Configuration Studio  See also Concrete External Definition, and External Definition.  "},{"id":338,"title":"Abstract Model","url":"14829.htm#o296","text":"Defines Convergent Billing entities, their basic relationships, and characteristics.  Entity characteristics in the abstract model are defined in terms of the meta-model.  The abstract model excludes field detail (field detail can be customised by subordinate models), and focuses on the entities.  Context:  Singleview  See also Meta Model, and Unified Modelling Language (UML).  "},{"id":339,"title":"Accelerator Keys","url":"14829.htm#o297","text":"Keyboard shortcuts used to select a menu option.  Key combinations are displayed beside the appropriate menu items.  "},{"id":340,"title":"Accept","url":"14829.htm#o298","text":"To save or commit work in the current view or form.  The Process Engine Main Frame and Configuration Workbench contain Accept buttons.  Context:  Process Engine  "},{"id":341,"title":"Access Level","url":"14829.htm#o56062","text":"Security feature that determines what a user can do and what data they are permitted to access.  Security is based on form roles and security groups, which in combination, determine a user's privileges.  Each user is assigned a specific profile that defines the level of access for each role and security group.  Context:  Convergent Billing, Process Engine  See also Security Group, User, User Profile, and Form Role.  "},{"id":342,"title":"Account","url":"14829.htm#o300","text":"Unique account to which financial transactions are posted.  Each customer has at least one account (known as the primary account) and optionally one or more secondary accounts.  Each account has a unique account number by which it is identified.  See also Account Type.  "},{"id":343,"title":"Account Cache","url":"14829.htm#o301","text":"Used for caching database details associated with accounts.  Account cache fetches and updates are primarily performed by rating processes to total all of the unbilled charges for each account, and to provide a mechanism during rating to check these unbilled charges and see whether they exceed a predetermined limit.  Context:  Singleview  See also Event Rating (ERT) Process.  "},{"id":344,"title":"Account Category","url":"14829.htm#o302","text":"Category (or subclass) of one of the available account classes a Convergent Billing account belongs to.  Although account categories are extensible, Convergent Billing does not validate account categories against account classes.  The following table lists default account categories supported in Convergent Billing.  Account Category  Account Class  Receivable  Asset  Payable  Liability  Deposit  Liability  Credit  Liability  Bank  Asset  Context:  Convergent Billing  See also Account Class, Account Type, and General Ledger Account Category.  "},{"id":345,"title":"Account Class","url":"14829.htm#o303","text":"Specifies whether a Convergent Billing account is an asset or liability account.  Account classes are not extensible.  Context:  Singleview  See also Account Category, Account Type, and General Ledger Account Class.  "},{"id":346,"title":"Account Classification","url":"14829.htm#o11255","text":"General accounting term used to categorise accounts into one of the following classifications:  Asset  Liability  Equity  Revenue  Expense.  Context:  Singleview  See also Asset, Equity, Liability, Revenue, and Expense.  "},{"id":347,"title":"Account Type","url":"14829.htm#o304","text":"Specifies any defaults or entity validation for accounts specified with that type.  Account types are used in the definition of charge categories, payment types, adjustment types, and customer types to specify the type of account to which charges are applied.   Context:  Convergent Billing, Customer Management, Configuration Studio  See also Account and Charge Category.  "},{"id":348,"title":"Accounting Calendar","url":"14829.htm#o72974","text":"Entity in Convergent Billing to define the accounting timeline. Groups one or more accounting years.  Context:  Convergent Billing, Configuration Studio  See also, Accounting Year.  "},{"id":349,"title":"Accounting Period","url":"14829.htm#o11290","text":"Specified period of time for which a set of financial statements is generated.  Within an accounting year, the length of the accounting period is arbitrary and fixed, based on the reporting requirements of the company (for example, day, week, month, quarter, or year).  Context:  Convergent Billing, Configuration Studio  See also Accounting Year.  "},{"id":350,"title":"Accounting Standards","url":"14829.htm#o11248","text":"Accounting term.  Widely accepted set of rules, conventions, standards, and procedures that govern the preparation of financial statements (for example, Generally Accepted Accounting Principles (GAAP) and International Financial Reporting Standards (IFRS)).  The standards are not a specific set of laws; its principles are applied using laws in each country, and standards usually vary between countries.  Context:  Singleview  "},{"id":351,"title":"Accounting Year","url":"14829.htm#o11291","text":"Entity in Convergent Billing to define the accounting timeline, and it can be broken down into smaller accounting periods.  Accounting years and accounting periods in Convergent Billing must reflect the financial years and accounting periods of the service provider.  Context:  Convergent Billing, Configuration Studio  See also Accounting Period.  "},{"id":352,"title":"Accounts Payable (A/P)","url":"14829.htm#o11267","text":"Accounting term.  Account that records amounts owed by a company to people or business entities that arise from business transactions; for example, money owed to trade creditors for goods and services.  Accounts payable are also referred to as trade creditors.  The accounts payable account is a liability account.  Context:  Convergent Billing  See also Accounts Receivable (A/R).  "},{"id":353,"title":"Accounts Receivable (A/R)","url":"14829.htm#o305","text":"Accounting term.  Account that records amounts owed to a company by customers or business entities that arise from business transactions; for example, the sale of goods or services provided on credit.  The accounts receivable account is an asset account.  Context:  Convergent Billing  See also Accounts Payable (A/P).  "},{"id":354,"title":"Accounts Receivable Sub-ledger","url":"14829.htm#o31389","text":"Subsidiary ledger of the general ledger used to track the transaction-level detail of financial data for the Accounts Receivable account.  The financial data recorded in the Accounts Receivable Sub-ledger is aggregated into journal entries for posting to the general ledger.  Context:  Convergent Billing  See also Accounts Receivable (A/R).  "},{"id":355,"title":"Accrual","url":"14829.htm#o307","text":"Adjustment to the general ledger that reflects the expenditure incurred or revenue earned for a potential liability or asset, which is not formally acknowledged; for example, advance recurring charges such as line rental where the revenue billed in advance is earned (accrued) only on a daily basis.  Context:  Convergent Billing  "},{"id":356,"title":"Accrual Basis of Accounting","url":"14829.htm#o11253","text":"Accounting term.  Accounting method, where:  Revenue is recognised when it is earned, regardless of when cash is received.  Cash can be received for revenue that is not earned in the same period.  Expenses are recognised when they are incurred, regardless of when cash is paid.  Cash can be paid for expenses not incurred in the same period.  The accrual basis of accounting provides a more accurate representation of earnings and expenses than the cash basis of accounting during an accounting period by using a matching process (that is, associating revenues with corresponding expenses).  Singleview supports the accrual basis of accounting.  Context:  Singleview  See also Basis of Accounting and Cash Basis of Accounting.  "},{"id":357,"title":"Accrual GL Guidance Entity","url":"14829.htm#o11316","text":"GL guidance entity used for amounts earned or incurred before they are billed, and then billed at a later time (for example, post-paid usage charges that are later invoiced).  Context:  Convergent Billing, Configuration Studio  See also GL Guidance Entity, Actual GL Guidance Entity, Deferral GL Guidance Entity, and Non-billable GL Guidance Entity.  "},{"id":358,"title":"Action","url":"14829.htm#o308","text":"Activity assigned to a workgroup or user to handle a specific issue.  Actions are often preconfigured according to business processes.  Actions and action groups are usually attached to an issue.  Context:  Process Engine, Customer Management  See also Issue, Action Group, Case, and Contact.  "},{"id":359,"title":"Action Group","url":"14829.htm#o310","text":"Collection of actions organised into a hierarchy.  Actions within an action group are performed in a specific order.  An action group can contain any number of action types.  Context:  Process Engine, Customer Management  See also Action and Action Type.  "},{"id":360,"title":"Action Hierarchy","url":"14829.htm#o311","text":"Refer to Action Group.  "},{"id":361,"title":"Action Type","url":"14829.htm#o313","text":"Defined in the Process Engine Configuration Workbench, and used as a template for actions created in Customer Management.  An action type determines default values.  Context:  Customer Management, Process Engine  See also Action and Action Group.  "},{"id":362,"title":"Action View","url":"14829.htm#o314","text":"Display that uses actions as the primary object.  The List section of an action view displays details of the selected action, and the Tab section displays details of objects associated with the selected action.  Context:  Customer Management, Process Engine  See also Action and View.  "},{"id":363,"title":"Active","url":"14829.htm#o73830","text":"A Singleview instance state where the server is running and performing normal operations, including CSR connections and transactions.  Context:  Singleview, High Availability  "},{"id":364,"title":"Active Period","url":"14829.htm#o315","text":"Proportion of the charge period during which the product, tariff, and tariff/product link was active.  Charges are only incurred for the active period.  Context:  Convergent Billing  See also Charge Period, Recurring Tariff, and Rental Generation Process (RGP).  "},{"id":365,"title":"Actual GL Guidance Entity","url":"14829.htm#o11317","text":"GL guidance entity used for amounts that have been billed and completely earned or incurred (for example, prepaid usage charges, rental charges in arrears, and taxes payable on use of a service).  Context:  Convergent Billing, Configuration Studio  See also GL Guidance Entity, Accrual GL Guidance Entity, Deferral GL Guidance Entity, and Non-billable GL Guidance Entity.  "},{"id":366,"title":"Adapter","url":"14829.htm#o316","text":"Enables communication between an application and an external system or process.  An adapter provides a data translation from the external system format to the Singleview format, and vice versa.  An inbound adapter sends the transformed request to the TRE, and then the transformed response to the external system or process.  An outbound adapter sends the transformed request from the TRE to the external system or process, and then returns the transformed response to the TRE.  Context:  Singleview  See also Enterprise Application Integration (EAI).  "},{"id":367,"title":"Address Format","url":"14829.htm#o317","text":"Specifies the layout and style of the address fields, and defines a list of attribute types applied to those fields.  Address formats are specified for customer types, person types, service types, and equipment types.  Two address styles (5 line and 6 line) are provided.  Context:  Convergent Billing  See also Attribute Type.  "},{"id":368,"title":"Adjustment","url":"14829.htm#o318","text":"Transaction outside of the normal billing cycle transactions (namely, invoices and payments) that affects the outstanding balance of a customer's account.  An adjustment is recorded against a specific customer's account and optionally against one or more specified invoices.  Debit and credit notes are commonly referred to as adjustments in Convergent Billing.  Context:  Convergent Billing, Singleview  See also Adjustment Batch, Adjustment Type, Payment, Debit Note, and Credit Note.  "},{"id":369,"title":"Adjustment Batch","url":"14829.htm#o319","text":"Set of individual adjustments of the same type processed at the same time.  Each adjustment within the batch can be viewed or modified until the batch is applied (processed).  An adjustment batch can be created incrementally (one or more adjustments at a time) over a period of time.  Context:  Convergent Billing  See also Adjustment.  "},{"id":370,"title":"Adjustment Transaction","url":"14829.htm#o11308","text":"Sales and Cash Receipts Journal financial transaction generated when an adjustment is applied.  Context:  Convergent Billing, Customer Management  See also Sales and Cash Receipts Journal, Normalised Event File Transactions, Invoice Transactions, and Payment Transactions.  "},{"id":371,"title":"Adjustment Type","url":"14829.htm#o320","text":"Defines common parameters for adjustment records; for example, defaults or entity validation for adjustments or adjustment batches specified with that type.  Context:  Convergent Billing, Customer Management  See also Adjustment and Adjustment Batch.  "},{"id":372,"title":"Adobe Acrobat Reader","url":"14829.htm#o321","text":"Used to view (and subsequently print) a generated report on a client workstation.   Context:  Convergent Billing, Process Engine  See also Schedule and Task.  "},{"id":373,"title":"Advance Period","url":"14829.htm#o322","text":"Number of charge periods that must be paid in advance.  Context:  Convergent Billing  See also Charge Period and Recurring Tariff.  "},{"id":374,"title":"Advance Reporting","url":"14829.htm#o40356","text":"Recognises revenue when it is earned for billed in arrears amounts.  Context:  Singleview  "},{"id":375,"title":"Advanced Search","url":"14829.htm#o71286","text":"Search defined in the Interface Design Tool for a view.    Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":376,"title":"Aged Debt","url":"14829.htm#o31390","text":"Period of time a payment is overdue for accounts receivable customer accounts.  Aged debt is typically specified in ranges from 0 - 30 days, 31 - 60 days, 61 - 90 days, and greater than 90 days.  Context:  Convergent Billing  See also Accounts Receivable (A/R).  "},{"id":377,"title":"Aggregation","url":"14829.htm#o326","text":"Process by which individual costed data records are accumulated using a predefined aggregation method.  Typically, billing records are aggregated by charge, customer, customer node, normalised event, or service so that currency and time totals are obtained.  Rating subtotals are aggregated by customer, customer node, or service.  Billing and rating subtotals can also be global (not attached to a specific entity).  Context:  Convergent Billing  See also Aggregation Function, Automatic Aggregation, Progressive Subtotal, and Subtotal.  "},{"id":378,"title":"Aggregation Function","url":"14829.htm#o327","text":"Defines the method of aggregation performed to calculate a subtotal.  One of three aggregation methods is used:  Summation, where the value of the subtotal is calculated by summing the values of a term for each match to the record being aggregated.  Minimum, where the value of the subtotal is taken as the minimum calculated value of each eligible term.  Maximum, where the value of the subtotal is taken as the maximum calculated value of each eligible term.  Rating subtotals can be defined as read-write (master) or read-only (slave).  Slave subtotals (for example, weekly) use the aggregates of a master subtotal (for example, daily).  Context:  Convergent Billing  See also Aggregation, Automatic Aggregation, Progressive Subtotal, Subtotal, and Subtotal Term.  "},{"id":379,"title":"Alias","url":"14829.htm#o329","text":"Refers to the following two concepts in Process Engine:  Deriving a unique value for a fact in a class, based on values in other facts.  Structured classes.  A structured alias fact identifies each combination of possible values in a structured class.  Context:  Process Engine  See also Structured Alias Fact and Derived Fact.  "},{"id":380,"title":"Alpha Event","url":"14829.htm#o330","text":"Event supplied as input to the Event Normalisation (ENM) process for normalisation.  Alpha events are read by the ENM process from alpha event files or, for real-time rating, from a named pipe or a TCP/IP socket.  The term 'alpha event' does not imply a specific event format.  Reading events from a TCP/IP socket is deprecated and provided only for backward compatibility.  Alpha events are in the following formats:  Native event format 3.03, with each event consisting of data fields in a user-definable order and prefixed with a length field, each field being delimited by an ASCII 255 character.  Native event formats 4.00, 4.02, 5.00, and 5.01, similar to native format 3.03, but the ASCII 0 character (null character) is used as the delimiter.  Any format that is specified by the ASN.1 subset supported by the Data Interface Language (DIL).  Context:  Convergent Billing  See also Alpha Event File and Data Interface Language (DIL).  "},{"id":381,"title":"Alpha Event File","url":"14829.htm#o331","text":"File containing alpha events.  Context:  Convergent Billing  See also Alpha Event.  "},{"id":382,"title":"Apache Tomcat","url":"14829.htm#o72720","text":"Open source web server and servlet container developed by the Apache Software Foundation.    Context: Process Engine web client  See also See also Application, Java.  "},{"id":383,"title":"API","url":"14829.htm#o332","text":"See also Application Programming Interface (API).  "},{"id":384,"title":"Application Complex Upgrade","url":"14829.htm#o73829","text":"A planned event where:   Both instances are taken offline  A complex Singleview upgrade is performed  Both instances are restored, one in standby.  Context:  Singleview, High Availability  "},{"id":385,"title":"Application Environment","url":"14829.htm#o333","text":"Environment in which a variable or function is used.  Must be one of the following:  Any (for functions only)  Billing  Data Entry  EVS (for Entity Validation Server (EVS) functions)  GL Guidance  IGP Report  Invoicing  PE  Rating  TRE Table (unavailable for functions).  Functions with an application environment of Any can be called from Convergent Billing or Process Engine.  The PE application environment is specific to Process Engine functions and direct variables defined in Process Engine.  Functions with an application environment of PE are read-only and cannot be deleted.  All other application environments are specific to functions and variables defined in Convergent Billing.  Functions with an application environment of EVS are read-only and cannot be deleted.  They cannot be specified or updated in Convergent Billing or Process Engine.    Context:  Convergent Billing, Process Engine  See also Context and Variable.  "},{"id":386,"title":"Application Failover","url":"14829.htm#o73827","text":"An unplanned event where:  A loss of Singleview capability is detected  The active instance is taken offline  The standby instance is made active  The original active instance is repaired  The original active instance is moved to standby readiness.  Context:  Singleview, High Availability  See also Failover.  "},{"id":387,"title":"Application Programming Interface (API)","url":"14829.htm#o334","text":"Interface defined at the source code level.  Developers writing applications programs can make requests to the operating system or another application.   Context:  Convergent Billing, Process Engine  "},{"id":388,"title":"Application Switchover","url":"14829.htm#o73828","text":"A planned event where:   A minor upgrade is performed on the standby instance  The active instance is taken offline  The standby instance is made active  The original active instance is upgraded  The original active instance is moved to standby readiness.  Context:  Singleview, High Availability  See also Switchover.  "},{"id":389,"title":"Archive","url":"14829.htm#o335","text":"Contains a copy of data required to be kept for historical purposes or to comply with regulatory and statutory requirements.  Context:  Convergent Billing, Process Engine  See also Archiver.  "},{"id":390,"title":"Archive Type","url":"14829.htm#o336","text":"When archiving, specifies the tables and dependencies that make up the entity being archived.  Context:  Convergent Billing  See also Archive.  "},{"id":391,"title":"Archiver","url":"14829.htm#o337","text":"Tool that allows an administrator to load and unload selected configuration and dynamic data.  Context:  Convergent Billing, Process Engine  See also Archive.  "},{"id":392,"title":"Arithmetic Operator","url":"14829.htm#o338","text":"Operator used in normal arithmetic, such as addition, division, multiplication, or subtraction.  Context:  Convergent Billing, Process Engine  "},{"id":393,"title":"Asset","url":"14829.htm#o11256","text":"Accounting term.  Type of account that records assets owned by a company, which contribute to the company's ability to earn revenue.  For example, cash at bank, handset inventory, buildings, office equipment, network switches, and vehicles are all assets.  Context:  Convergent Billing  See also Account Classifications, Equity, Liability, Revenue, and Expense.  "},{"id":394,"title":"Association Class","url":"14829.htm#o339","text":"Class that stores information relating to more than one logical record.  Class associations are either simple or complex.  Context:  Process Engine  See also Class.  "},{"id":395,"title":"Asynchronous Function","url":"14829.htm#o340","text":"Function executed as a background task.  Asynchronous functions do not require the user to wait for completion.  The user is notified if the function is called successfully.  Context:  Convergent Billing, Process Engine  See also Built-in Function, Function, Queued Function, and Synchronous Function.  "},{"id":396,"title":"Attribute Type","url":"14829.htm#o342","text":"Controls the representation of an entity's attributes.   For users of Singleview Convergent Billing, an attribute type defines the format, characteristics, and validation rules for a form field.   Attribute types are the major components for entity validation.  Based on a reference type, they also define the representation of an entity's attributes externally, allowing the entity's data model to be tailored for integration with external systems.  They can also define additional non-stored attributes that are derived from an entity's stored attributes.   Attribute types are defined independently of the data entry fields to which they relate, which allows the same attribute type to be used for multiple fields.  Context:  Convergent Billing, Process Engine  See also Derived Attribute, Derived Non-Stored Attribute, and Reference Type.  "},{"id":397,"title":"Audit","url":"14829.htm#o44255","text":"Process for tracking additions, updates, or deletions from fields.  An audit identifies the user making the change, date-time of the change, and changed content.  Context: Singleview, Process Engine web client  "},{"id":398,"title":"Audit Class","url":"14829.htm#o42155","text":"Class that is selected to be audited.  Context:  Process Engine  See also Audit Profile and Audited Fact.  "},{"id":399,"title":"Audit Group","url":"14829.htm#o42158","text":"Group configured with operations and facts applied to an audited class.  Context:  Process Engine  See also Audited Class and Audited Fact.  "},{"id":400,"title":"Audit Log","url":"14829.htm#o42152","text":"Set of records of audited changes.  Context:  Process Engine  See also Audit Log Record.  "},{"id":401,"title":"Audit Log Record","url":"14829.htm#o42154","text":"Object in the Audit Log class.  Context:  Process Engine  "},{"id":402,"title":"Audit Profile","url":"14829.htm#o42153","text":"Set of configured audit groups for determining what is recorded in audit log records.  Context:  Process Engine  See also Audit Log Record, Audit Class, and Audit Group.  "},{"id":403,"title":"Audited Class","url":"14829.htm#o42156","text":"Object in the Auditing Tool Object List Box. It is displayed at a level below the Audit Profile object and created when the Audit Profile object is created.  Context:  Process Engine  See also Audit Log Record.  "},{"id":404,"title":"Audited Fact","url":"14829.htm#o42157","text":"Fact configured for auditing in the Auditing Tool.  Context:  Process Engine  See also Audit Class.  "},{"id":405,"title":"Authentication Server","url":"14829.htm#o343","text":"Tuxedo server (authsvr) responsible for authenticating requests to connect to Singleview.   The Authentication server also verifies the validity and usage level of a Singleview licence.  The server monitors the active workload, and issues warnings as the maximum permitted level for each entity (user, customer, customer node, or service) is approached.  Context:  Convergent Billing, Process Engine  See also Transaction Engine and Tuxedo Service.  "},{"id":406,"title":"Automatic Aggregation","url":"14829.htm#o345","text":"Process in which all numeric direct variables for costed event records are automatically aggregated using the summation aggregation function.  The resulting aggregations are used in expressions associated with tariffs, subtotals, and derived attributes, but are not stored unless defined in subtotals.  Rating subtotals have the option of being manually aggregated.  Context:  Convergent Billing  See also Aggregation, Aggregation Function, Progressive Subtotal, and Subtotal.  "},{"id":407,"title":"B","url":"14831.htm","text":""},{"id":408,"title":"Backend Monitor Process (BMP)","url":"14831.htm#o347","text":"Server process responsible for controlling and monitoring the Event Rating Broker (BKR) process, the server processes that control scheduling, namely, Scheduled Task Dispatcher (STD) process, and Task Launch and Monitor (TLM) process.  The BMP monitors the status of each process and restarts any that have failed.  The BMP also listens on a TCP/IP socket for connections, and subsequent commands, from the Expression Control Program (ECP).  Context:  Convergent Billing  See also Expression Control Program (ECP), Event Rating Broker (BKR) Process, Expression, Scheduled Task Dispatcher (STD) Process, Task Launch and Monitor (TLM) Process, and TRE API.  "},{"id":409,"title":"Backup","url":"14831.htm#o73833","text":"An instance state used in multi-instance clusters. This state may differ in detail from the standby state, hence the separate terms.  Context:  Singleview, High Availability  See also Standby.  "},{"id":410,"title":"Balance Forward","url":"14831.htm#o348","text":"Accounting term.  Accounting method used to track outstanding balances, issue invoices and statements, and apply adjustments on customer accounts in the general ledger by maintaining a single on-going balance of a customer's account.  The balance is modified by the posting of transactions to the account.  Context:  Convergent Billing  See also Open Item Accounting.  "},{"id":411,"title":"Balance Management","url":"14831.htm#o349","text":"Process in which customer credit balances are maintained in real time, using a reservations system, for account balance management and event authorisation.  Context:  Convergent Billing  See also Commerce Engine and Reservation.  "},{"id":412,"title":"Base64","url":"14831.htm#o73013","text":"An encoding scheme used to represent binary data in an ASCII format. This encoding scheme is useful when transferring encoded binary data over media that deals with textual data.  Base64 is commonly used in email using MIME, and when storing complex data in XML.  Context:  Convergent Billing  See also MIME and XML Schema.  "},{"id":413,"title":"Base Product","url":"14831.htm#o350","text":"Combination of service types, equipment types, tariffs, subtotals, facility groups, and derived attributes required to deliver a competitive product offering.  A product is the only entity sold to a customer.  Context:  Convergent Billing, Configuration Studio  See also Base Product Compatibility, Companion Product, and Companion Product Compatibility.  "},{"id":414,"title":"Base Product Compatibility","url":"14831.htm#o351","text":"Determines whether a:  Base product can be used to replace (upgrade) the current base product.  Companion product can be added to the current base product.  Context:  Convergent Billing  See also Base Product, Companion Product, and Companion Product Compatibility.  "},{"id":415,"title":"Basis of Accounting","url":"14831.htm#o11249","text":"Accounting term.  Accounting method used to determine when expenses and revenue are recognised in the accounts for accounting purposes.  The two bases of accounting methods are:   Cash  Accrual.  Context:  Singleview  See also Cash Basis of Accounting and Accrual Basis of Accounting.  "},{"id":416,"title":"Batch Extractor","url":"14831.htm#o57300","text":"A component of batch file processing that extracts Singleview data to a file.  Context:  Convergent Billing, Singleview  See also Batch File Processing.  "},{"id":417,"title":"Batch File Processing","url":"14831.htm#o55269","text":"File processing that includes batch extraction and batch loading of files from and into Singleview.    Context:  Convergent Billing, Singleview  See also File Processing Manager (FPM), Batch Extractor, and Batch Loader.  "},{"id":418,"title":"Batch Loader","url":"14831.htm#o57649","text":"A component of batch file processing that loads files into Singleview.  Context:  Convergent Billing, Singleview  See also Batch File Processing.  "},{"id":419,"title":"Batch Processing","url":"14831.htm#o435","text":"Processing initiated by Convergent Billing processes such as batch billing, report generation, and one-off tasks.  Batch processing does not require a real-time response to external systems.  Batch processing can interact with external systems.  Context:  Convergent Billing  "},{"id":420,"title":"Bcc","url":"14831.htm#o58193","text":"Method of sending an email without revealing the recipient's address to other recipients of an email. It is a field in the email where the addresses of hidden recipients are entered.  Context:  Process Engine web client, Customer Management  See also Cc  "},{"id":421,"title":"BGP","url":"14831.htm#o352","text":"Refer to Bill Generation Process (BGP).  "},{"id":422,"title":"Bill Cycle","url":"14831.htm#o357","text":"Period between individual bill runs.  The billing cycle determines the frequency at which invoices (or statements) are sent to customers.  Context:  Convergent Billing  See also Billing Process Cycle.  "},{"id":423,"title":"Bill Generation Process (BGP)","url":"14831.htm#o353","text":"TRE server (trebgp) that generates billing data based on the costed event records output from the rating engine and customer details extracted from the database.  During this process, the BGP aggregates (accumulates) the costed event records and applies tariffs to the aggregated data before generating billing data records.  The tariffs applied to the aggregated data are generally discount tariffs rather than charge tariffs.  Like the rating engine, the BGP supports parallel tariffing.  Context:  Convergent Billing  See also Costed Event Record, Invoice Generation Process (IGP), Parallel Tariffing, Rating Engine, and Transaction Engine.  "},{"id":424,"title":"Bill Run","url":"14831.htm#o354","text":"Process of applying events to a customer record to generate an invoice or a statement.  The two possible operation modes for a bill run are single stream and pipeline.  Single stream is used to process a single customer, pipeline is used to process multiple customers.  Context:  Convergent Billing  See also Bill Run Type, Billing, and Schedule.  "},{"id":425,"title":"Bill Run Type","url":"14831.htm#o355","text":"Specifies any defaults or entity validation for bill runs specified with that type.  Context:  Convergent Billing, Configuration Studio  See also Bill Run, Billing, and Schedule.  "},{"id":426,"title":"Billing","url":"14831.htm#o356","text":"Stage in the billing process cycle where the costed event records (from the rating engine) are aggregated and any applicable tariffs (typically discount tariffs) are applied.  The output from this stage is a set of invoice data records.  Typically, these records include billed data records, invoice subtotals, and invoice totals.  Context:  Convergent Billing  See also Billing Process Cycle and Rating Engine.  "},{"id":427,"title":"Billing Engine","url":"14831.htm#o358","text":"Refer to Bill Generation Process (BGP).  "},{"id":428,"title":"Billing Error","url":"14831.htm#o31393","text":"Occurs during a bill cycle process.  Errors are a result of incomplete or incorrect customer and service data; for example, when tariffs are entered incorrectly, the wrong termination date is placed on a pricing discount, or when customer accounts and services are delayed by provisioning and final posting.  Context:  Convergent Billing  See also Bill Cycle.  "},{"id":429,"title":"Billing Process Cycle","url":"14831.htm#o359","text":"Full normalisation, rating, billing, and invoice generation cycle for a set of event records input to, and generated by Convergent Billing.  Context:  Convergent Billing  See also Bill Cycle.  "},{"id":430,"title":"Billing Reconciliation","url":"14831.htm#o31394","text":"Describes the actions and processes required when two separate data streams represent the same physical or financial conditions.  Billing reconciliation can be a simple process of reporting on expected inputs compared to actual outputs.  Context:  Convergent Billing  "},{"id":431,"title":"BKR","url":"14831.htm#o360","text":"Refer to Event Rating Broker (BKR) Process.  "},{"id":432,"title":"BLOB","url":"14831.htm#o361","text":"Binary Large Object.  A data type used in Singleview.  Context:  Singleview  "},{"id":433,"title":"Blocked Action","url":"14831.htm#o363","text":"Action that cannot be started because it is dependent on the completion of another action.  Context:  Process Engine, Customer Management  See also Action and Action Group.  "},{"id":434,"title":"BLOCKTIME","url":"14831.htm#o362","text":"Controls how long a Tuxedo message can block before it times out.  SCANUNIT * BLOCKTIME must not exceed 32,767.  The default is such that SCANUNIT * BLOCKTIME is approximately 60 seconds.  SCANUNIT controls the granularity of check intervals and timeouts.  Context:  Convergent Billing  "},{"id":435,"title":"BMP","url":"14831.htm#o364","text":"Refer to Backend Monitor Process (BMP).  "},{"id":436,"title":"BOM","url":"14831.htm#o56315","text":"Refer to Byte-Order Marker (BOM).  "},{"id":437,"title":"Boolean Fact","url":"14831.htm#o365","text":"Fact with an attribute type with a value of Boolean.  Boolean facts used in layouts are displayed as check boxes.  A Boolean value is either Yes or No.  Context:  Process Engine, Customer Management  See also Fact.  "},{"id":438,"title":"Boolean Operator","url":"14831.htm#o366","text":"Operator used in Boolean expressions.  Valid Boolean operators are AND, OR, and NOT.  Context:  Process Engine, Customer Management  "},{"id":439,"title":"BP","url":"14831.htm#o75208","text":"Refer to WS-I Basic Profiles (BP).   "},{"id":440,"title":"BPMN","url":"14831.htm#o69448","text":"See Business Process Model and Notation (BPMN).  "},{"id":441,"title":"BPMN Editor","url":"14831.htm#o70734","text":"Graphical modelling tool that allows creation and editing of BPMN diagrams.  It is an optional Configuration Studio plug-in.  Context:  Singleview  See also Business Process, Business Process Model and Notation (BPMN), and JBoss Business Process Management (jBPM).  "},{"id":442,"title":"Breadcrumb Navigation Path","url":"14831.htm#o45972","text":"Location of the current page in relation to the Process Engine web client page hierarchy.  The page links in the navigation path represent pages visited to reach the current page.  The links can be used to navigate back to a previous page in the path.  Context: Process Engine web client, Customer Management  See also Details Page  "},{"id":443,"title":"BuildStaticInterface Tool","url":"14831.htm#o368","text":"Static interface creation tool that can be run from the command line and used to create a Java source file with method definitions for Convergent Billing remote functions.  The tool uses the Java Interface to extract data from the billing database to generate corresponding Java function call stubs.  Context:  Convergent Billing  "},{"id":444,"title":"Built-in Class","url":"14831.htm#o369","text":"Built-in classes are included in Process Engine core software.  Context:  Process Engine  See also Process Engine, Process Engine Business Solutions, and Core Class.  "},{"id":445,"title":"Built-in Function","url":"14831.htm#o370","text":"Refer to Function Type.  "},{"id":446,"title":"Business Process","url":"14831.htm#o69435","text":"Sequence of activities, performed by users or systems, to complete a business goal.  When modelled using Business Process Model and Notation (BPMN), the process is represented by a flowchart.  Context:  Singleview  See also Business Process Model and Notation (BPMN).  "},{"id":447,"title":"Business Process Model and Notation (BPMN)","url":"14831.htm#o69436","text":"Graphical representation for specifying business processes in a business process model.  Context:  Singleview  See also Business Process, and JBoss Business Process Management (jBPM).  "},{"id":448,"title":"Byte-Order Marker (BOM)","url":"14831.htm#o56313","text":"The starting bytes of a Unicode file that represent the byte ordering (for example, little endian and big endian).  Context:  Convergent Billing, Singleview  "},{"id":449,"title":"C","url":"14832.htm","text":""},{"id":450,"title":"Cache","url":"14832.htm#o59035","text":"Segment of memory that holds data and is designed to speed up subsequent access to that same data. A cache might belong to a specific process or be available to multiple processes in shared memory.  Context:  Singleview  "},{"id":451,"title":"Cached Class","url":"14832.htm#o373","text":"Class whose data is contained in the cache memory on the Process Engine client workstation.  The data from cached classes is obtained from the database when a user connects to the Process Engine server, and is updated as required.  Context:  Process Engine  See also Dynamic Class.  "},{"id":452,"title":"Calendar Category","url":"14832.htm#o375","text":"Division of time used in the weekly calendar.  The following entries are defined:  1. Sunday<br>2. Monday<br>3. Tuesday<br>4. Wednesday<br>5. Thursday<br>6. Friday<br>7. Saturday<br>8. Non-working time (public holidays and so on)<br>9. Working time (non-standard working time, such as overtime).  Context:  Process Engine  See also Calendar.  "},{"id":453,"title":"Calendar Tool","url":"14832.htm#o374","text":"Calendars in Process Engine are used to:  Define standard working time periods, and periods where overtime work and no work is performed.    Calculate dates and times associated with actions.  One or more calendars can be defined in each Process Engine configuration.  For example, if one work group works different hours from another work group, different standard working hours must be defined for each group.  Context:  Process Engine  See also Calendar Category.  "},{"id":454,"title":"Call Detail Record (CDR)","url":"14832.htm#o377","text":"Log records for phone calls captured by a telephone switch.  The CDR includes such information as where the call originated, what the start time was, to whom the call was made, what time the call ended and the call type.  This information is passed onto a billing system for event rating and billing.  Context:  Convergent Billing  See also Event File.  "},{"id":455,"title":"Call Usage","url":"14832.htm#o378","text":"Calls or other events applied to a customer's account.  Context:  Convergent Billing  "},{"id":456,"title":"Case","url":"14832.htm#o379","text":"Collection of information about contacts, actions, issues, and other related data.  A case is opened when the user wants to record an instance of customer interaction.  For example, a case could be created when a contact calls the customer service centre and raises an issue.  Context:  Process Engine, Customer Management  See also Calendar Category, Contact, and Issue.  "},{"id":457,"title":"Case View","url":"14832.htm#o380","text":"Displays cases as the primary object.  The List section displays a list of cases, the Detail section displays details of the selected case, and the Tab section displays details of objects associated with the selected case (for example, issues).  Context:  Process Engine, Customer Management  See also View.  "},{"id":458,"title":"Cash Basis of Accounting","url":"14832.htm#o11251","text":"Accounting term.  Accounting method, where:  Revenue is recognised when cash is received.  Credit for sales or services is not recognised as revenue (and only becomes revenue when the cash is received).  Expenses are recognised when cash is paid.  When cash is not paid, expenses are not recognised as incurred for the cost of sales or services, until the cash is paid.  The implication of the cash basis of accounting is that expenses directly relating to earning income may not be recognised in the same accounting period.    Context:  Singleview  See also Basis of Accounting and Accrual Basis of Accounting.  "},{"id":459,"title":"Cash Receipts Journal","url":"14832.htm#o11277","text":"Accounting term.  Journal used to record the receipts of cash against customer accounts.  See also Sales and Cash Receipts Journal.  "},{"id":460,"title":"Category","url":"14832.htm#o55553","text":"Grouping of entities (for example, classes, facts, objects) which facilitates easy transfer, filtering and general manipulation of the group.  Categories are only available in Convergent Billing to users with access to Process Engine.  Context:  Convergent Billing,  Customer Management, Process Engine  "},{"id":461,"title":"CBF","url":"14832.htm#o384","text":"Refer to Composite Business Functions (CBF).  "},{"id":462,"title":"Cc","url":"14832.htm#o58192","text":"Method of copying an email to additional recipients. It is a field in the email where the addresses of the additional recipients are entered.  Context:  Process Engine web client, Customer Management  See also Bcc.  "},{"id":463,"title":"CDR","url":"14832.htm#o386","text":"Refer to Call Detail Record (CDR).  "},{"id":464,"title":"Character Set","url":"14832.htm#o387","text":"Maps a series of characters (represented by integers in a character encoding system such as Unicode) to a series of byte strings.  Example character sets are ASCII and Big5 (Traditional Chinese).  Context:  Convergent Billing, Process Engine  See also Unicode Transformation Format (UTF) and Unicode.  "},{"id":465,"title":"Charge","url":"14832.htm#o388","text":"Charge associated with a specific event when it is rated.  The charge may be for a positive amount (for example, for a billable event) or for a negative amount (for example, a bonus or benefit).  Context:  Convergent Billing  See also Event and Tariff.  "},{"id":466,"title":"Charge Category","url":"14832.htm#o389","text":"Identifies the default account type to which a calculated tariff charge or benefit is posted (allocated).  For services, the charge category also identifies a specific account number.  The association between a tariff and a charge category is specified when the tariff is defined and is referred to as the tariff/charge category pair.  By default, the charge category associated with a tariff is used each time that tariff is used.  However, the charge category can be overridden when defining a customer type, service type, customer node, or service.  Context:  Convergent Billing, Configuration Studio  See also Account Type and Tariff.  "},{"id":467,"title":"Charge Expression","url":"14832.htm#o390","text":"Expression used to calculate the value of a tariff.  The values for inclusion in the expression are defined in the tariff table.  Context:  Convergent Billing  See also Default Charge Expression and Tariff Table.  "},{"id":468,"title":"Charge Group","url":"14832.htm#o391","text":"Used to group charges based on their common characteristics.  A charge group can contain other charge groups to form a hierarchy and can also be date ranged.  Context:  Convergent Billing  See also Default Charge Expression and Tariff Table.  "},{"id":469,"title":"Charge Output Definition","url":"14832.htm#o392","text":"Defines the order and values being stored for each charge record output by an Event Rating (ERT) process and passed into a real-time rating output feed.  Context:  Convergent Billing, Configuration Studio  See also Event Rating (ERT) Process and Real-time Rating (RTR).  "},{"id":470,"title":"Charge Period","url":"14832.htm#o393","text":"Period on which a recurring charge is based.  The charge period is calculated from the billing cycle, recurring tariff cycle, advance period (if specified), and prorating period (if specified).  Context:  Convergent Billing  See also Active Period, Advance Period, Bill Cycle, Prorating, and Recurring Tariff Cycle.  "},{"id":471,"title":"Charge Record","url":"14832.htm#o394","text":"Data record generated by the Event Rating (ERT) process that contains the charge (or cost) of a normalised event.  Any number of charge records can be generated for a single normalised event.  Context:  Convergent Billing  See also Event Rating (ERT) Process and Normalised Event.  "},{"id":472,"title":"Charge Start Date","url":"14832.htm#o396","text":"Date the event was created before it is rated by Convergent Billing to determine the period the aggregate falls under.  Context:  Convergent Billing  See also Process Start Date.  "},{"id":473,"title":"Charge Type","url":"14832.htm#o395","text":"Defines the behaviour of a charge.  For example, it can be a positive or negative charge type.  Context:  Convergent Billing  "},{"id":474,"title":"Chart of Accounts (COA)","url":"14832.htm#o11270","text":"Accounting term.  Complete set of accounts in a company's general ledger.   Context:  Convergent Billing  See also General Ledger and General Ledger (GL) Code.  "},{"id":475,"title":"Checksum","url":"14832.htm#o55821","text":"An error detection method used in data transmission to detect if the data was transmitted successfully.   Context:  Convergent Billing, Singleview  "},{"id":476,"title":"Child Action","url":"14832.htm#o397","text":"Action, within an action group, with a related parent action.  If the child action is not itself a parent action, the action represents a task that must be completed before its parent action can be completed.  Context:  Process Engine, Customer Management  See also Action, Action Group, and Parent Action.  "},{"id":477,"title":"Child Attribute Type","url":"14832.htm#o398","text":"Attribute type used to override or modify an attribute type associated with a field.  The override may change the properties of the existing field or display a new field.  Context:  Convergent Billing  See also Attribute Type, Child Reference Type, Entity Validation, and Reference Type.  "},{"id":478,"title":"Child Customer Node","url":"14832.htm#o399","text":"Node that is a direct subordinate (or child) of a node (referred to as a parent customer node) located at the next highest level of the customer hierarchy.   Context:  Convergent Billing, Customer Management  A child customer node can also be the parent customer node of a node (or nodes) located at a lower level in a customer hierarchy.  See also Customer Hierarchy, Parent Customer Node, and Root Customer Node.  "},{"id":479,"title":"Child Reference Type","url":"14832.htm#o400","text":"Overrides the reference list specified in an attribute type associated with a field.  Context:  Convergent Billing  See also Attribute Type, Entity Validation, and Reference Type.  "},{"id":480,"title":"Class","url":"14832.htm#o401","text":"Method of grouping objects according to a defined set of attributes and facts.  A class is used as a template for the objects in the class.  A class is similar to a database table.  Context:  Singleview  See also Fact.  "},{"id":481,"title":"Class Attribute","url":"14832.htm#o402","text":"Characteristic of an object class.  For example, the security group of the class is a class attribute.  Context:  Process Engine  "},{"id":482,"title":"Client","url":"14832.htm#o605","text":"Graphical user interface used by users to enter, view, and query data in the database.  Also used to maintain and control Singleview and its associated client and server processes.  The term client is also commonly used to describe any Windows-based application.  Context:  Convergent Billing, Process Engine  "},{"id":483,"title":"Client Cache","url":"14832.htm#o405","text":"Memory location on the client workstation reserved for objects in cached classes.  Client caching increases the speed for some types of processing (for example, obtaining items required for a drop-down list).  Context:  Process Engine, Convergent Billing  See also Cached Class.  "},{"id":484,"title":"CLOB","url":"14832.htm#o58678","text":"Character Large Object.  Data type used in Singleview.  Context: Singleview  "},{"id":485,"title":"Cluster","url":"14832.htm#o406","text":"Two or more nodes connected so that they behave like a single computer which enables high availability and load balancing.   Context:  Convergent Billing, High Availability  See also Convergent Billing Cluster, Singleview Cluster, Distributed Environment, Node, and RAC Cluster.  "},{"id":486,"title":"Cluster Management Software","url":"14832.htm#o407","text":"Integrated fault management software that can be included in a cluster to detect failures and manage the recovery process automatically.  Context:  Convergent Billing, High Availability  See also Cluster.  "},{"id":487,"title":"COA","url":"14832.htm#o11304","text":"Refer to Chart of Accounts (COA).  "},{"id":488,"title":"Code Point","url":"14832.htm#o408","text":"Unicode number used to represent a character in a language.   Unicode code points are represented in the format 'U+' format; for example, the English letter 'A' is represented as 'U+0041'.  Code points are grouped into code blocks for convenience and to represent different languages.  Context:  Singleview  See also Unicode.  "},{"id":489,"title":"Comma Separated Values (CSV)","url":"14832.htm#o31397","text":"Delimited data format that has fields or columns separated by the comma character and records or rows separated by new lines.  Context:  Convergent Billing, Process Engine  "},{"id":490,"title":"Commerce Engine","url":"14832.htm#o410","text":"Functionality that works with Convergent Billing to enable authorisation and rating, before and during an event.   Context:  Convergent Billing, High Availability  See also Balance Management and Instance.  "},{"id":491,"title":"Commit","url":"14832.htm#o9902","text":"See Accept.   "},{"id":492,"title":"Companion Product","url":"14832.htm#o411","text":"Product used to add tariffs, subtotals, and derived attributes to a base product.  Allows an alternative costing regime to be applied to an existing product.  A companion product cannot exist in isolation; it must be associated with an existing base product.  Context:  Convergent Billing, Customer Management  See also Base Product, Base Product Compatibility, Companion Product Compatibility and Feature.  "},{"id":493,"title":"Companion Product Compatibility","url":"14832.htm#o412","text":"Determines whether a companion product can be used with each of the other companion products (if any) added to the base product.  Context:  Convergent Billing, Customer Management  See also Base Product, Base Product Compatibility, and Companion Product.  "},{"id":494,"title":"Comparative Tariff","url":"14832.htm#o413","text":"Tariff that calculates the amount that a customer would have been charged if they used an alternative rating program such as a special volume usage program or a competitor's product.  Context:  Convergent Billing  See also Tariff.  "},{"id":495,"title":"Complex Search","url":"14832.htm#o415","text":"Refer to Custom Search.  "},{"id":496,"title":"Composite Business Functions (CBF)","url":"14832.htm#o414","text":"Encapsulates the core logic used to search for, create, and update Convergent Billing entities in succinct business functions.  CBF helps with easy integration of external third party systems with Convergent Billing by simplifying the interface.   Context:  Convergent Billing, Customer Management, Process Engine  "},{"id":497,"title":"Computer Telephony Integration (CTI)","url":"14832.htm#o46123","text":"The CTI links the Process Engine web client to the telephone system and enables users to accept, transfer, and hang up calls with a click of a button.  Context:  Customer Management, Process Engine web client  "},{"id":498,"title":"Concrete External Definition","url":"14832.htm#o63066","text":"External definition that is mapped to a Convergent Billing entity or a Process Engine class.  Context:  Singleview, Convergent Billing  See also Abstract External Definition and External Definition.  "},{"id":499,"title":"Conditional Expression: Multiple Values Returned","url":"14832.htm#o418","text":"Evaluation type used to derive the value of a derived attribute.  Returns the value of the expression associated with each conditional expression that evaluates to TRUE.  The returned values are concatenated, separated by commas.  Context:  Convergent Billing  See also Derived Attribute and Evaluation Type.  "},{"id":500,"title":"Conditional Expression: Single Value Returned","url":"14832.htm#o419","text":"Evaluation type used to derive the value of a derived attribute.  Returns the value of the expression corresponding to the first conditional expression that evaluates to TRUE.  If none of the conditions evaluate to TRUE, the value of the specified default expression is returned.  Context:  Convergent Billing  See also Derived Attribute and Evaluation Type.  "},{"id":501,"title":"Configuration Item","url":"14832.htm#o420","text":"Used to specify which server processes are started and maintained, and to define attributes for each process.  Configuration items are also used to define checks performed to enforce licensing conditions, define Oracle triggers for database auditing, and set up system-wide defaults used in entity validation.  Context:  Convergent Billing  "},{"id":502,"title":"Configuration Item Type","url":"14832.htm#o421","text":"Defines attributes and default values for configuration items specified with that type.  Context:  Convergent Billing  "},{"id":503,"title":"Configuration Security Group","url":"14832.htm#o55554","text":"Security group associated with configuration data, inherited from the profile of the user who created or modified it.  Context:  Convergent Billing, Process Engine, Configuration Studio  See also Security Group, Primary Security Group, Access Level, User Profile, and Form Role.  "},{"id":504,"title":"Contact","url":"14832.htm#o427","text":"Person, position, or organisation recorded in Singleview that may need to be contacted.  A contact can have multiple accounts, addresses, or other details.  Context:  Convergent Billing, Customer Management, Process Engine  See also Customer, Customer Contact, Primary Contact, and Secondary Contact.  "},{"id":505,"title":"Contact Type","url":"14832.htm#o61703","text":"Type of contact (for example, Residential and Business).  Context:  Customer Management, Process Engine web client  See also Contact and Person Type.  "},{"id":506,"title":"Contact View","url":"14832.htm#o428","text":"Displays a contact as the primary object.  The List section displays a list of contacts, the Detail section displays details of the selected contact, and the Tab section displays details of objects associated with the selected contact.  Context:  Customer Management, Process Engine  "},{"id":507,"title":"Content Model","url":"14832.htm#o57420","text":"A content model is the representation of any data that can be contained inside an element.  It is a description of the structure and permissible content of an element.  Four different content models exist in Convergent Billing:  Simple, which means that external definitions configured as simple content models inherit the attributes and restrictions of elements that reference them.   Sequence, which means that all the content model's children can appear in an instance of the XML schema. They must, however, appear in the order they are listed in the content model unless overridden by Sequence Number field.   Choice, which means that only one of the content model's children can appear in an instance of the XML schema.   All, which means that all of the content model's children can appear once or not at all, and they can appear in any order. If this option is selected, all of the contents model's children must be individual elements and no element in the content model can appear more than once.  Context:  Convergent Billing  See also External Definition and XML Schema.  "},{"id":508,"title":"Context","url":"14832.htm#o429","text":"Type of data being accessed by a variable; that is, the context in which the variable is used.  Must be one of the following:  Any  Customer  Customer node  Service  Normalised event.  Context:  Convergent Billing  See also Application Environment and Variable.  "},{"id":509,"title":"Context Bar","url":"14832.htm#o45974","text":"Tool bar on Process Engine web client that displays buttons, menus, and links that relate to the current page.  Context: Process Engine web client  See also Details Page.  "},{"id":510,"title":"Context-sensitive Help","url":"14832.htm#o430","text":"Help displayed for each form and each form component (fields, buttons, check boxes, and options).  Help is accessed by focusing on a form and pressing F1 (Convergent Billing also allows field or control input focus).  Context-sensitive information is displayed in a separate pop-up window.  Context:  Convergent Billing, Process Engine  See also Form Help.  "},{"id":511,"title":"Continuous Availability","url":"14832.htm#o431","text":"Highly available system that includes support for both planned and unplanned outages without interrupting service to the customer.  Continuous availability of Commerce Engine components is supported in Convergent Billing.  It is not provided for user access, transactional services, or billing operations.  Context:  Convergent Billing, High Availability  See also High Availability.  "},{"id":512,"title":"Control Expression","url":"14832.htm#o434","text":"Expression used to control the flow of processing using conditions.  A condition is an expression that returns 0 or 0.0 when the condition is FALSE, or a non-zero number if the condition is TRUE.  The condition need not be a conditional expression, formed by using conditional operators.  The following control expressions can be used:  if-then-else  if  while  try-except  for.  Context:  Convergent Billing, Process Engine  See also Expression and Expression Type.  "},{"id":513,"title":"Control File","url":"14832.htm#o55780","text":"A file used by Singleview to indicate the successful completion of a batch process.   Context:  Convergent Billing, Singleview  "},{"id":514,"title":"Convergent Billing Cluster","url":"14832.htm#o438","text":"Full set of Convergent Billing instances that operates over the same logical database.  Context:  Convergent Billing  See also Convergent Billing Instance, and Singleview Cluster.  "},{"id":515,"title":"Convergent Billing Instance","url":"14832.htm#o439","text":"Set of Convergent Billing processes that operate on a single node.  A Convergent Billing instance does not include the database.  Context:  Convergent Billing  See also Node.  "},{"id":516,"title":"Core Class","url":"14832.htm#o440","text":"Required for the Process Engine Configuration Workbench to operate.  Core classes are delivered as part of the Process Engine core software.  Context:  Process Engine  See also Process Engine and Process Engine Configuration Workbench.  "},{"id":517,"title":"Core Fact","url":"14832.htm#o441","text":"Required for the Process Engine Configuration Workbench to operate.  Core facts are delivered as part of the Process Engine core software.  Context:  Process Engine  See also Process Engine.  "},{"id":518,"title":"Corrupted Event","url":"14832.htm#o442","text":"Alpha event that cannot be decoded or interpreted by the Event Normalisation (ENM) process.  Corrupted events contain one or more corrupted data fields; for example, letters may be detected in a numeric field.  Context:  Convergent Billing  See also Alpha Event and Event Normalisation (ENM) Process.  "},{"id":519,"title":"Costed Event Record","url":"14832.htm#o443","text":"Event record output by the rating engine after being rated (costed).  Context:  Convergent Billing  See also Event Record and Rating Engine.  "},{"id":520,"title":"Create Permission","url":"14832.htm#o444","text":"Permission attribute that gives the user the authority to create items.  Context:  Process Engine  "},{"id":521,"title":"Credit Note","url":"14832.htm#o11296","text":"Accounting term.  Document issued to indicate an amount credited to the receiver of the note by the issuer.  Context:  Convergent Billing, Customer Management  See also Debit Note.  "},{"id":522,"title":"CSV","url":"14832.htm#o31399","text":"Refer to Comma Separated Values (CSV).  "},{"id":523,"title":"CTI","url":"14832.htm#o447","text":"Refer to Computer Telephony Integration.  "},{"id":524,"title":"Currency","url":"14832.htm#o448","text":"Currency in which tariffs and accounts are calculated.  The currency can be monetary, or points such as Frequent Flyer, Fly-Buys, or Barter points.  See also Currency Conversion.  "},{"id":525,"title":"Currency Conversion","url":"14832.htm#o450","text":"Process in which amounts are converted from one currency to another.  Currency conversion occurs in Convergent Billing during:  Rating, if real-time account aggregation is being used.  Billing, when various totals calculated by the Bill Generation Process (BGP) for an invoice are stored in the database in the currency of the customer's account.  Sales Journal posting, GL upload, and GL extract processes.  Context:  Convergent Billing  See also Rating Engine, Bill Generation Process (BGP), Sales Journal Posting Process, GL Upload Process, GL Extract Process, and Currency.  "},{"id":526,"title":"Currency Fact","url":"14832.htm#o451","text":"Fact with a type attribute with a value of currency.  When a layout includes a currency fact, the fields are displayed normally and only accept decimal values.  Context:  Process Engine  See also Fact.  "},{"id":527,"title":"Current Record","url":"14832.htm#o452","text":"Record having a start date before or equal to today, and an end date equal to or after today.  Context:  Convergent Billing, Customer Management, Process Engine  See also Future Record and Historical Record.  "},{"id":528,"title":"Custom Configuration","url":"14832.htm#o453","text":"Configuration layer that is an extension of a Process Engine business solution and ultimately replaces it.  During an implementation process, the Process Engine business solution is customised to suit the business requirements of the customer.  When customisation is complete, the custom configuration layer includes all configuration data required for the implementation.  Context:  Customer Management, Process Engine  See also Process Engine and Process Engine Business Solutions.  "},{"id":529,"title":"Custom Search","url":"14832.htm#o71285","text":"Search defined in the Search Tool or Process Engine web client with configurable search criteria.  Criteria can include values, relational operators, arithmetic operators, Boolean operators, and expressions.  Context:  Customer Management, Process Engine  See also Advanced Search, Public Search, Private Search.  "},{"id":530,"title":"Customer","url":"14832.htm#o60121","text":"Person or organisation using one or more products.  Each customer is given a unique primary account against which invoices are raised.  Context:  Convergent Billing, Customer Management  See also Account, Contact, Customer Node, Customer Type, Product, and Product Offer.  "},{"id":531,"title":"Customer Contact","url":"14832.htm#o455","text":"Person assigned as a contact for a customer and who can be contacted about the customer's account or services.  The contact person can be the customer, or a person working within an organisation.  At least one contact person (referred to as the primary contact) is required per customer, but more than one contact can be recorded.  Context:  Convergent Billing, Customer Management  See also Customer, Primary Contact, and Secondary Contact.  "},{"id":532,"title":"Customer Hierarchy","url":"14832.htm#o456","text":"Representation of a customer's hierarchical or billing structure.  The customer hierarchy consists of one or more customer nodes, each representing a customer account to which charges can be accrued.  Context:  Convergent Billing, Customer Management  See also Customer Node.  "},{"id":533,"title":"Customer Node","url":"14832.htm#o457","text":"Point in a customer hierarchy that represents a customer's primary account to which charges can be accrued.  Product instances and associated services can be created for each node.  Associated with each customer node is a reporting level, which determines whether that node receives an invoice, a statement, or neither.  For example, if an account is required for each division in a multi-national company, a separate customer node is used to represent each division&#8217;s account.  Customer nodes in the customer hierarchy are organised into a structure (usually mirroring the company&#8217;s organisational structure) that is similar to a family tree.  A family tree displays the relationship between members of a specific family.  Like a family tree, a customer hierarchy displays the relationship between customer nodes.  Context:  Convergent Billing, Customer Management  See also Child Customer Node, Customer Hierarchy, Customer, Customer Type, Parent Customer Node, Reporting Level, and Root Customer Node.  "},{"id":534,"title":"Customer Node Cache","url":"14832.htm#o458","text":"Used to cache database details associated with customer nodes.  The two customer node caches are:  CustomerNode, a configurable set of columns from the CUSTOMER_NODE_CACHE_V database view.  CustomerNodeDA, a cache of derived attributes from the CUSTOMER_NODE_DA_ARRAY table.  Context:  Convergent Billing  See also Customer Node and Customer.  "},{"id":535,"title":"Customer Query Type","url":"14832.htm#o459","text":"Specifies any defaults or entity validation for customer queries specified with that type.   Context:  Convergent Billing  See also Query.  "},{"id":536,"title":"Customer Type","url":"14832.htm#o461","text":"Specifies any defaults or entity validation for customers specified with that type.  If required, an icon can be specified to identify each customer type.  Context:  Convergent Billing, Customer Management  See also Customer and Icon.  "},{"id":537,"title":"D","url":"14833.htm","text":""},{"id":538,"title":"Data Block","url":"14833.htm#o464","text":"Used by Oracle to store data.  A data block is the smallest unit of I/O used by the database; the block size can be configured using Oracle initialisation parameters.    One data block corresponds to a specific number of bytes of physical database space on disk.  Contiguous data blocks are held in extents.  Context:  Convergent Billing  See also Extent and Oracle.  "},{"id":539,"title":"Data Interface Language (DIL)","url":"14833.htm#o470","text":"Defines the composition of the event records that may be processed by the Event Normalisation (ENM) process and an implicit algorithm that allows the event record to be decoded by the interpreter.  Context:  Convergent Billing  See also Alpha Event and Event Normalisation (ENM) Process.  "},{"id":540,"title":"Data Manipulation Language (DML)","url":"14833.htm#o475","text":"Set of statements used to store, retrieve, modify, and erase data from a database.  The two types of DML are:  Procedural, in which the user specifies what data is required and how to get it  Nonprocedural, in which the user specifies only what data is required.  Context:  Convergent Billing  "},{"id":541,"title":"Data Model","url":"14833.htm#o471","text":"Map or diagrammatic description that represents the entities of a database and their relationships.  Context:  Convergent Billing, Process Engine  See also Abstract Model, Meta Model, and Unified Modelling Language (UML).  "},{"id":542,"title":"Data Protection","url":"14833.htm#o39836","text":"Method of securing data from unauthorised access using encryption or masking.  Context:  Convergent Billing  See also Masked Data/Field and Encrypted Data/Field.  "},{"id":543,"title":"Data Type","url":"14833.htm#o472","text":"Context:  Convergent Billing  Type of value that a variable can contain.  Must be one of the following:  Array []  Date and Time (~)  Hash {}  Integer (&)  Real (#)  String ($)  Unknown (?).  The data type suffix ([], ~, {}, &, #, $, or ?) can be included as part of the variable name.  If no data type suffix is included, a data type of real is assumed.  Context:  Process Engine  Classifies the value that a fact can contain.  A fact type can have one of the following values: reference, text memo, integer, decimal, percent, currency, date-time, duration, Boolean, image, and reference subset.  See also Fact and Variable.  "},{"id":544,"title":"Data Validation","url":"14833.htm#o473","text":"Method for validating entries in a field.  For example, a Process Engine configurer can specify a list of valid combinations of values used to validate data entered by the user.  Data validations are also known as cross validations.  Context:  Convergent Billing, Process Engine  "},{"id":545,"title":"Database Failure Auto-Detection","url":"14833.htm#o61826","text":"Database Failure Auto-Detection is a Commerce Engine feature that allows Convergent Billing to detect database outages and move Commerce Engine processes to non-database mode.  Context:  Convergent Billing, Commerce Engine, High Availability  See also Transparent Application Failover.  "},{"id":546,"title":"Database Read-only Server","url":"14833.htm#o467","text":"TRE server (trerodb) that provides database services, which read data from the database.   Context:  Convergent Billing  See also Transaction Engine and Tuxedo Service.  "},{"id":547,"title":"Database Validation Process (DVP)","url":"14833.htm#o468","text":"Tool provided for validation and integrity checking of the Convergent Billing database.  The DVP identifies problems of data consistency.  The DVP can be run either from the client workstation, using the scheduled task dispatcher, or from the UNIX command line.   Context:  Convergent Billing  "},{"id":548,"title":"Datafile","url":"14833.htm#o465","text":"Oracle databases physically store data in datafiles, which conform to the system's operating system on which Oracle is running.  Oracle manages the storage space in datafiles using segments, extents, and data blocks.   Context:  Convergent Billing, Process Engine  See also Data Block, Extent, Oracle, and Segment.  "},{"id":549,"title":"Date Range Update","url":"14833.htm#o476","text":"Update that allows the date range of historical records to be modified; that is, allows the start and end dates of the record to be moved.  Context:  Convergent Billing, Customer Management  See also Current Record, Direct Update, Future Record, Historical Record, and Normal Update.  "},{"id":550,"title":"Date Range Update Privilege","url":"14833.htm#o477","text":"Security privilege (defined by the access level of the user's form role) required to perform a date range update.  Context:  Convergent Billing  See also Access Level, Date Range Update, Profile, and Form Role.  "},{"id":551,"title":"Date Ranging","url":"14833.htm#o478","text":"Mechanism for recording period-specific entity data.  A date range represents a period of time bounded by an effective start date and an effective end date.  A date ranged entity is an entity with data that can change over time, and the data is recorded for the date range that the data is valid.  The time span of the entity is defined by contiguous date ranges that specify historical, current, and future versions of the data.  Context:  Convergent Billing, Customer Management, Process Engine  See also Effective Date.  "},{"id":552,"title":"Date Time Fact","url":"14833.htm#o479","text":"Fact with an attribute type of Date Time.  When a layout includes a Date Time fact, the fields are displayed according to the client locale for date-time and only accept date-time values.  Context:  Process Engine  See also Fact.  "},{"id":553,"title":"Debit Note","url":"14833.htm#o11297","text":"Accounting term.  Document issued to indicate an amount owed by the receiver to the issuer of the note.  Unlike an invoice, a debit note is not associated with the provision of services by the issuer.  Context:  Convergent Billing, Customer Management  See also Credit Note.  "},{"id":554,"title":"Decimal Fact","url":"14833.htm#o480","text":"Fact with a type attribute with a value of decimal.  When a layout includes a decimal fact, the fields are displayed according to the client locale for decimal values and only accept decimal values.  Context:  Process Engine  See also Fact.  "},{"id":555,"title":"Default","url":"14833.htm#o481","text":"Initial value or automatically assigned process.  Context:  Convergent Billing, Customer Management, Process Engine  "},{"id":556,"title":"Default Charge Expression","url":"14833.htm#o482","text":"Calculates the value of a tariff if the charge expression cannot be evaluated.  Typically, the default charge expression is used when none of the conditions in a tariff table match the tariff's associated conditional expressions or when the charge expression is not configured.  Context:  Convergent Billing  See also Charge Expression and Tariff Table.  "},{"id":557,"title":"Default Derivation","url":"14833.htm#o483","text":"Evaluated when the object is first created and whenever the value of the fact is null.  Context:  Process Engine  "},{"id":558,"title":"Deferral GL Guidance Entity","url":"14833.htm#o11318","text":"Used for amounts that have been billed but not completely earned (for example, rental charges in advance, and usage of free units).  Context:  Convergent Billing, Configuration Studio  See also GL Guidance Entity, Accrual GL Guidance Entity, Actual GL Guidance Entity, and Non-billable GL Guidance Entity.  "},{"id":559,"title":"Deferred","url":"14833.htm#o74558","text":"Derived facts can be configured to be deferred. When a fact is in deferred state, the derivation of this fact does not occur unless explicitly requested.  Context:  Process Engine  See also Initial State and Fact.  "},{"id":560,"title":"Delete Permission","url":"14833.htm#o484","text":"Permission attribute that allows the user to delete items.  Context:  Process Engine  "},{"id":561,"title":"Dependent Schedule","url":"14833.htm#o486","text":"A schedule that requires another schedule's tasks to execute before the execution of the dependent schedule's tasks.  For example, if schedule D is dependent on schedule P, tasks on schedule P must execute before tasks on schedule D.   Context:  Convergent Billing  See also Dependent Task, Prerequisite Schedule, and Schedule.  "},{"id":562,"title":"Dependent Task","url":"14833.htm#o485","text":"A task that requires another task to execute before the dependent task's execution.  For example, if task P must execute before task D, task D is considered a dependent task to task P and task P is considered a prerequisite to task D.  Context:  Convergent Billing  See also Dependent Schedule, Prerequisite Task, and Task.  "},{"id":563,"title":"Derivation","url":"14833.htm#o487","text":"Attributes of a derived fact that specify how the value of the fact is to be calculated.  Context:  Process Engine  "},{"id":564,"title":"Derived Attribute","url":"14833.htm#o488","text":"Facility for deriving a new variable based on the values of other variables, which can be achieved by:  Using a simple expression  Conditional evaluation (similar to functions)  List evaluation type  Table look-up based on single, multiple, searching, or range indexes.  Context:  Convergent Billing  See also Evaluation Type, Master Derived Attribute, Product Definition, Slave Derived Attribute, Keyed Derived Attribute, and Variable.  "},{"id":565,"title":"Derived Attribute Cache","url":"14833.htm#o489","text":"Global derived attribute cache for storing derived attributes in shared memory.  Context:  Convergent Billing  "},{"id":566,"title":"Derived Fact","url":"14833.htm#o490","text":"Fact that obtains its value from another fact.  Context:  Process Engine  See also Fact.  "},{"id":567,"title":"Derived Non-Stored Attribute","url":"14833.htm#o50100","text":"Attribute type that defines an additional attribute for a Convergent Billing entity that is derived from the entity's stored attributes.  Derived non-stored attributes are not associated with a database column.  To external systems using the Entity Validation Server, a derived non-stored attribute appears the same as an entity's stored attributes.  A derived non-stored attribute can be fetched, inserted, or displayed in a generated view.   Derived non-stored attributes allow the data model of a Convergent Billing entity to be tailored for integration with external systems.  Context:  Convergent Billing  See also Attribute Type.  "},{"id":568,"title":"Detail Fact","url":"14833.htm#o491","text":"Fact with a usage attribute of Detail and that can be used in the Detail or Tab sections of a view.  Context:  Process Engine  See also Detail Section, Fact, and Tab Section.  "},{"id":569,"title":"Detail Section","url":"14833.htm#o492","text":"Section of the Process Engine Main Frame that displays details of the object selected in the List section of a view.  The user can control whether the section is displayed.  Context:  Customer Management, Process Engine  See also Process Engine Client, Fact, and Tab Section.  "},{"id":570,"title":"Details Page","url":"14833.htm#o46234","text":"Page with details of the item that a user needs to edit, create, or view.  Context: Process Engine web client  "},{"id":571,"title":"Direct Update","url":"14833.htm#o494","text":"Special type of update that allows the details of the current record to be changed, but does not allow the start and end dates of the record to be changed.  Direct updates do not create any new physical records.  If auditing is turned on, the fact that the record was changed is recorded.  Context:  Convergent Billing  See also Current Record, Date Range Update, and Normal Update.  "},{"id":572,"title":"Direct Variable","url":"14833.htm#o495","text":"Variable mapped to data held in a database table or to a column in a database view.  The value of the variable is determined by the context in which the variable is used.  For example, each field of a normalised event record is mapped to a direct variable.  Direct variables are used in expressions to calculate values and used as the basis for deriving other variables.  Context:  Convergent Billing  See also Context and Variable.  "},{"id":573,"title":"Disabled Field","url":"14833.htm#o496","text":"Data entry field that cannot be edited at the current time.  A disabled field has its label greyed-out (faded).  Changing the form mode may allow editing if a user has sufficient privileges.  Context:  Convergent Billing, Customer Management, Process Engine  See also Form and View-only Field.  "},{"id":574,"title":"Discount Tariff","url":"14833.htm#o497","text":"Tariff that reduces the amount owed by a customer.  Discount tariffs are usually aimed at fostering customer loyalty.  Context:  Convergent Billing  See also Tariff.  "},{"id":575,"title":"Distributed Environment","url":"14833.htm#o500","text":"Configuration of hardware and software that is physically and geographically dispersed but networked for communication.  Context:  Singleview  See also Distribution, Cluster, and Node.  "},{"id":576,"title":"Distribution","url":"14833.htm#o501","text":"Ability of an application to use more than one node in a cluster.  Distributed applications can use the resources of more than one node.  Context:  Convergent Billing, High Availability  See also Cluster, Distributed Environment, and Node.  "},{"id":577,"title":"DLL","url":"14833.htm#o502","text":"Refer to Dynamic Link Library (DLL).  "},{"id":578,"title":"DML","url":"14833.htm#o503","text":"Refer to Data Manipulation Language (DML).  "},{"id":579,"title":"DNS","url":"14833.htm#o504","text":"Refer to Domain Name System (DNS).  "},{"id":580,"title":"Document","url":"14833.htm#o40980","text":"Collective term for invoices and statements, debit and credit notes, and dunning letters.     Context:  Convergent Billing, Singleview  See also Invoice, Statement, Credit Note, and Debit Note  "},{"id":581,"title":"Domain Name System (DNS)","url":"14833.htm#o505","text":"Used for translating domain hostnames to an Internet Protocol (IP) address.  A domain hostname should be an appropriate and easily remembered name for an Internet address.  Context:  Convergent Billing, High Availability  See also Internet Protocol (IP).  "},{"id":582,"title":"Double-entry Bookkeeping","url":"14833.htm#o11284","text":"Accounting term.  Accounting system where each transaction is recorded using two or more credit and debit entries.  The total of debit entries balances the total of credit entries.  Because the debit entries always have corresponding credit entries, the general ledger always balances.  Most accounting systems and processes follow the double-entry system of accounting and bookkeeping.  Context:  Convergent Billing  See also Single-entry Bookkeeping and T-accounts.  "},{"id":583,"title":"Duration Fact","url":"14833.htm#o508","text":"Fact with a type attribute with a value of duration.  When a layout includes a duration fact, the fields are displayed normally and only accept duration values.  Context:  Process Engine  See also Fact.  "},{"id":584,"title":"DVP","url":"14833.htm#o509","text":"Refer to Database Validation Process (DVP).  "},{"id":585,"title":"Dynamic Class","url":"14833.htm#o510","text":"Class whose objects can be created by Process Engine client users.  Objects in dynamic classes typically contain information about business interactions with a specific customer.  Examples of dynamic classes in Customer Management are Action and Contact.  Dynamic classes are not cached in the client.  Context:  Customer Management, Process Engine  See also Class and Static Class.  "},{"id":586,"title":"Dynamic Forms","url":"14833.htm#o511","text":"Forms created dynamically from simple form-based scripts.  Dynamic forms can display information and accept input from users.  With captions, labels, and buttons, information is input and output using simple text, HTML text, fields, or grids.  Context:  Convergent Billing  See also Dynamic Menu Items.  "},{"id":587,"title":"Dynamic Link Library (DLL)","url":"14833.htm#o466","text":"Library of executable functions or data that can be used by a Windows application.  Typically, a DLL provides one or more specific functions and a program accesses the functions by creating either a static or dynamic link to the DLL.  A static link remains constant during program execution while a dynamic link is created by the program as required.  DLLs can contain data only.  DLL files usually end with the extension .dll, .exe, .drv, or .fon.  Context:  Convergent Billing, Process Engine  "},{"id":588,"title":"Dynamic Menu Item","url":"14833.htm#o512","text":"Menu items controlled by configuration rather than core code.  Most menu items in Convergent Billing are implemented as core code.  Dynamic menu items are created (based on configuration in configuration items and derived attributes), and selecting an item invokes a specific EPM function.    Context:  Convergent Billing  See also Dynamic Forms and EPM.  "},{"id":589,"title":"E","url":"14834.htm","text":""},{"id":590,"title":"EAI","url":"14834.htm#o513","text":"Refer to Enterprise Application Integration (EAI).  "},{"id":591,"title":"Eclipse","url":"14834.htm#o69439","text":"Multi-language Integrated Development Environment (IDE).  The underlying infrastructure (Eclipse platform) can be extended using plug-ins.  For example, Configuration Studio is a plug-in written for the Eclipse platform.   Context:  Singleview  See also Integrated Development Environment (IDE).  "},{"id":592,"title":"ECP","url":"14834.htm#o514","text":"Refer to Expression Control Program (ECP).  "},{"id":593,"title":"Effective Date","url":"14834.htm#o517","text":"Date used as the basis for retrieving information.  For date ranged entities, the effective date (for example, the effective date of a bill run) identifies which version of each entity's data is used.  The version selected has a date range that spans the specified effective date and contains the data that defines the entity at the effective date.  If date-time granularity is enabled for an entity, the effective date can contain a user-specifiable time; otherwise, the time defaults to 00:00:00.  The effective start and end dates, and date fields associated with these values (for example, active date), contain a user-specifiable time; otherwise, the time component is not visible to the user and defaults to 00:00:00 for start dates and 23:59:59 for end dates.   Effective date is sometimes used to mean either the date that data for an entity becomes, or ceases to be, effective; that is, the effective start date or effective end date respectively.  Context:  Convergent Billing, Customer Management, Process Engine  See also Date Ranging, Issue Date, Schedule, and Task.  "},{"id":594,"title":"Effective End Date","url":"14834.htm#o14811","text":"Part of the mechanism that implements date ranging.  The last date when the data in a date ranged record of an entity is effective.  Context:  Convergent Billing, Customer Management, Process Engine  See also Effective Start Date, Effective Date, and Date Ranging.  "},{"id":595,"title":"Effective Start Date","url":"14834.htm#o14810","text":"Part of the mechanism that implements date ranging.  The date when the data in a date ranged record of an entity becomes effective.  Context:  Convergent Billing, Customer Management, Process Engine  See also Effective End Date, Effective Date, and Date Ranging.  "},{"id":596,"title":"EJI","url":"14834.htm#o516","text":"Refer to Enterprise Java Interface (EJI).  "},{"id":597,"title":"Element","url":"14834.htm#o53456","text":"Elements used in external definitions are XML elements, as defined in XML Schema 1.0.    Context:  Singleview, Convergent Billing, Configuration Studio  See also Extensible Markup Language (XML) and External Definition   "},{"id":598,"title":"Eligibility Criteria","url":"14834.htm#o518","text":"Criteria (or expressions) that determine whether an eligible item is applied to a process.  Eligibility criteria are typically used to determine whether a tariff should be applied to the event record being processed by the rating engine, or applied to the aggregation being processed by the billing engine.  Eligibility expressions are not supported for rating subtotals.  However, aggregation eligibility can be configured using the terms of these subtotals.  Context:  Convergent Billing  See also Aggregation, Invoice Template, and Tariff.  "},{"id":599,"title":"Encrypted Data/Field","url":"14834.htm#o39643","text":"Data or field encrypted in the database.  Encrypted data is displayed as a row of asterisks if the user does not have the security group privileges to view the unencrypted data.  Context:  Convergent Billing  See also Masked Data/Field.  "},{"id":600,"title":"Encrypted Fact","url":"14834.htm#o58033","text":"Fact with encryption applied so that the fact value cannot be viewed as text, but is displayed as asterisks.   Context:  Process Engine  See Also Stored Fact  "},{"id":601,"title":"ENM","url":"14834.htm#o519","text":"Refer to Event Normalisation (ENM) Process.  "},{"id":602,"title":"Enterprise Application Integration (EAI)","url":"14834.htm#o53067","text":"Methodology and middleware used to make automated integration between application components in an enterprise easier.  Application components include application programs, databases, and legacy systems.  Singleview supports configurable EAI adapters.  Context:  Convergent Billing  See also Adapter.  "},{"id":603,"title":"Enterprise Data Model","url":"14834.htm#o521","text":"Consistent definition of all data common to a business, from a high-level business view to a generic logical data design, including links to the physical data designs of individual applications.  Context:  Convergent Billing  See also Data Model.  "},{"id":604,"title":"Enterprise Java Interface (EJI)","url":"14834.htm#o523","text":"Java Transaction Engine API, a call interface to the Transaction Engine (TRE) for Java and used by client and server processes.  Context:  Convergent Billing  See also Transaction Engine.  "},{"id":605,"title":"Entitlement Allocation","url":"14834.htm#o59552","text":"Costing component of an entitlement that is consumed by a customer.  An entitlement allocation is created each time an entity (that is, an entitlement with a context of Service, Customer Node, or Customer) is eligible for an entitlement.   Context:  Singleview  See also Entitlements.  "},{"id":606,"title":"Entitlements","url":"14834.htm#o59350","text":"Time-based method of assessing charges for products. Entitlements are applied to companion products used in product offers.  They can be one-off, recurring or dynamic.   Entitlements are used by real-time charging, and are particularly useful for pre-paid or post-paid accounts with credit limits.  Context:  Singleview  See also Temporal Entitlement Cache, Entitlement Allocation.  "},{"id":607,"title":"Entity Validation","url":"14834.htm#o524","text":"Used to customise fields, add fields to generic forms, validate fields and forms, and add field security.  It can also be used to customise an entity's data model using derived non-stored attribute types, attribute display labels, attribute interface labels, and custom key field functions.   Entity validation is used in conjunction with reference types, attribute types, lookup functions and context-sensitive help.  Context:  Convergent Billing  See also Attribute Type and Reference Type.  "},{"id":608,"title":"Entity Validation Variable","url":"14834.htm#o525","text":"Predefined variable available for use in entity validation expressions for configuring Convergent Billing.  Unlike direct variables, which are associated with specific database views, entity validation variables are associated with forms.  Each variable maps to a specific form field and is assigned a value that is stored in the database.  Context:  Convergent Billing  See also Entity Validation and Variable.  "},{"id":609,"title":"EPM","url":"14834.htm#o526","text":"Refer to Expression Parser Module (EPM).  "},{"id":610,"title":"EPM Built-in Function","url":"14834.htm#o14872","text":"Refer to Function Type.  "},{"id":611,"title":"EPM Callback Function","url":"14834.htm#o14871","text":"Refer to Function Type.  "},{"id":612,"title":"Equipment","url":"14834.htm#o527","text":"Physical components required to provide a service; for example, modem, leased line, or mobile phone.  Equipment information is stored for information purposes only, but can also be used to allocate service numbers.  Context:  Convergent Billing, Customer Management  See also Service.  "},{"id":613,"title":"Equipment Type","url":"14834.htm#o528","text":"Specifies any defaults or entity validation for equipment specified with that type.  If required, an icon can be specified to identify each equipment type.  Context:  Convergent Billing, Customer Management, Configuration Studio  See also Equipment, Service, Service Type, and Icon.  "},{"id":614,"title":"Equity","url":"14834.htm#o11258","text":"Accounting term.  Measure of the value or worth of a company; also known as owner's equity and represents net assets (assets minus liabilities over time).  Context:  Singleview  See also Account Classifications, Asset, Liability, Revenue, and Expense.  "},{"id":615,"title":"ERB","url":"14834.htm#o529","text":"Refer to Event Rating Broker (BKR) Process.  "},{"id":616,"title":"ERO","url":"14834.htm#o530","text":"Refer to Event Rating Output (ERO) Process.  "},{"id":617,"title":"ERP","url":"14834.htm#o531","text":"Refer to Event Rating Protocol (ERP).  "},{"id":618,"title":"Error Event","url":"14834.htm#o532","text":"Events that error during rating and are written to the NORMALISED_EVENT_ERROR table.  Context:  Convergent Billing, High Availability  See also Event File, Rental Generation Process (RGP), and Event Normalisation.  "},{"id":619,"title":"Error Message","url":"14834.htm#o533","text":"See Message.  "},{"id":620,"title":"ERT","url":"14834.htm#o534","text":"Refer to Event Rating (ERT) Process.  "},{"id":621,"title":"Escalation","url":"14834.htm#o535","text":"Each action can be given an escalation policy that defines operations to be performed as a deadline approaches.  Escalation operations can include reassignment of the task and change in priority.  Escalation operations can be notified in the same way as the actions themselves.  Context:  Customer Management, Process Engine  See also Action.  "},{"id":622,"title":"Evaluation Type","url":"14834.htm#o538","text":"Specifies the mechanism used to derive the value returned by a derived attribute.  The value of the attribute is derived by evaluating one or more expressions, or by looking up the value in a predefined table of values.  If no value is derived, the value of a predefined default expression is used.  One of the following evaluation types can be specified:  Conditional:  Single Value Returned  Conditional:  Multiple Values Returned  List  Simple Expression  Table Lookup by Best Match  Table Lookup by Multiple (1-10) Keys  Table Lookup by Searching  Table Lookup by Single Range.  Context:  Convergent Billing  See also Derived Attribute, Conditional: Single Value Returned, Conditional: Multiple Values Returned, Lists, Simple Expression, Table Lookup by Best Match, Table Lookup by Multiple (1-10) Keys, and Table Lookup by Searching.  "},{"id":623,"title":"Event","url":"14834.htm#o539","text":"Any activity, such as a phone call, query, rental payment, fault, or work order, that can create an associated charge or have an impact on a customer's account.  An event can be a one-off activity or a periodic activity.  Typically, events are generated outside the system, and imported as event records; however, events can also be generated by the Rental Generation Process (RGP).  Context:  Convergent Billing, Customer Management, High Availability  See also CDR, Event Record, and Rental Generation Process (RGP).  "},{"id":624,"title":"Event Cache","url":"14834.htm#o540","text":"Used by the BKR process to monitor and pass external commands onto the rating processes (ENM, ERT, or ERO).   Context:  Convergent Billing  See also Event Record and Rental Generation Process (RGP).  "},{"id":625,"title":"Event File","url":"14834.htm#o541","text":"Database record that ties a set of processed rated and event errors.  The event file represents either a physical file generated for batch rating or a virtual/logical file created through real-time rating processes.  Context:  Convergent Billing, Commerce Engine  See also CDR, Event, Error Event, and Event Normalisation.  "},{"id":626,"title":"Event Normalisation","url":"14834.htm#o542","text":"Process in which raw event data is input and subsequently converted into a standard record format.  The output from this stage is a set of normalised event records.  Context:  Convergent Billing  See also Normalised Event File Record.  "},{"id":627,"title":"Event Normalisation (ENM) Process","url":"14834.htm#o543","text":"Server process responsible for reading event records (raw event data) from nominated input files, normalising those records, and forwarding the resulting normalised events records to the Event Rating (ERT) process for rating.  Event records that cannot be normalised are sent directly to the Event Rating Output (ERO) process for loading into an error table in the database.  Context:  Convergent Billing  See also Event Normalisation, Event Rating (ERT) Process, Event Rating Output (ERO) Process, and Server Process.  "},{"id":628,"title":"Event Rating","url":"14834.htm#o544","text":"Process in which normalised event records are costed, the cost being calculated by applying one or more tariffs.  More than one charge can therefore be output for each normalised event rated.  Because of this process, each normalised event rated is output with each of its associated costed event records.   Context:  Convergent Billing  See also Charge, Costed Event Record, Normalised Event File Record, and Parallel Tariffing.  "},{"id":629,"title":"Event Rating (ERT) Process","url":"14834.htm#o547","text":"Server process that receives normalised events from the Event Normalisation (ENM) process and rates the events to generate charges that are passed to the Event Rating Output (ERO) process for output.  Context:  Convergent Billing  See also Event Rating, Event Rating Output (ERO) Process, Rating Engine, and Server Process.  "},{"id":630,"title":"Event Rating Broker (BKR) Process","url":"14834.htm#o545","text":"Controls the rating process and monitors the server processes during event rating (Event Normalisation (ENM), Event Rating (ERT), and Event Rating Output (ERO) processes).  Also manages shared memory for database cache and inter-process communication.  Context:  Convergent Billing  See also Server Process.  "},{"id":631,"title":"Event Rating Output (ERO) Process","url":"14834.htm#o546","text":"Server process that outputs charges, normalised events, normalised event errors, rating subtotals, account balances, and file information from the rating engine.  The Event Rating Output (ERO) process outputs this data directly to database tables, or to text files for later insertion by the SQL*Loader utility into the database tables, or to a remote system using a TCP/IP socket connection.  Outputting to a remote host using a TCP/IP socket or to SQL*Loader files is deprecated and only provided for backward compatibility.  SQL*Loader is not supported for rating events that perform real-time account updates or use rating subtotals.  Context:  Convergent Billing  See also Server Process, Rating Engine, and SQL*Loader Utility.  "},{"id":632,"title":"Event Rating Protocol (ERP)","url":"14834.htm#o548","text":"Communication protocol used between the rating engine and a remote host.  The protocol consists of exchanges of data messages and acknowledgments.  Context:  Convergent Billing  See also Real-time Rating (RTR).  "},{"id":633,"title":"Event Record","url":"14834.htm#o549","text":"Record input containing information about an event that can result in a charge or benefit being passed on to a customer.  Context:  Convergent Billing  See also Costed Event Record and Event.  "},{"id":634,"title":"Expense","url":"14834.htm#o11260","text":"Accounting term.  Type of account that measures costs incurred by an organisation in operating a business.  Expenses can be either of:  Fixed costs (that is, expenses independent of the amount of business activity undertaken)  Variable costs (that is, expenses dependent on the amount of business activity undertaken).  Context:  Singleview  See also Account Classifications, Asset, Equity, Liability, and Revenue.  "},{"id":635,"title":"Expression","url":"14834.htm#o551","text":"Combinations of operators (arithmetic and relational) and variables that return a single value when evaluated.  Variables used in an expression depend on the variable type, and the context and application environment in which the expression is being used.  Use of direct variables in expressions also depends on the defined database view.  Expressions are used in client and server processes.  In Process Engine, expressions can be used in searches, rule validations, parameters, and derivations; they can also be used to conditionally trigger the execution of EPM scripts.  Context:  Convergent Billing, Process Engine  See also Expression Block, Expression Parser Module (EPM), Expression Type, and Variable.  "},{"id":636,"title":"Expression Block","url":"14834.htm#o552","text":"Sequence of one or more expressions, each expression within the block being terminated with a semicolon (;).  The expression block is enclosed in braces ({}).  Expression blocks can be nested within other expression blocks to any level.  Context:  Convergent Billing, Process Engine  See also Expression, Expression Parser Module (EPM), Expression Type, and Variable.  "},{"id":637,"title":"Expression Clause","url":"14834.htm#o553","text":"Clause defined using an expression and used in custom search operations.  Context:  Process Engine  See also Custom Search.  "},{"id":638,"title":"Expression Control Program (ECP)","url":"14834.htm#o554","text":"Provides a command-line driven interface for controlling the Backend Monitor Process (BMP) and its child processes (Event Rating Broker (BKR), Scheduled Task Dispatcher (STD), Task Launch and Monitor (TLM), and Transaction Engine Application Programming Interface (TRE API)).  Context:  Convergent Billing  See also Backend Monitor Process (BMP), Event Rating Broker (BKR) Process, Scheduled Task Dispatcher (STD) Process, Task Launch and Monitor (TLM) Process, and TRE API.  "},{"id":639,"title":"Expression Parser Module (EPM)","url":"14834.htm#o555","text":"Parses and executes expressions.  Used to make comparisons, validate input, and calculate values.  The EPM provides built-in functions, including mathematical, type conversion, string processing, date functions, subtotal history, invoice data, and form automation.  Context:  Convergent Billing, Process Engine  See also Built-in Function, Expression, and Form Automation.  "},{"id":640,"title":"Expression Type","url":"14834.htm#o556","text":"Types of expressions that can be used only with corresponding data types.  The data type of the expression's result determines the set of valid syntax for any expression.   Context:  Process Engine  See also Data Type and Expression.  "},{"id":641,"title":"eXtensible Business Reporting (XBRL)","url":"14834.htm#o11329","text":"XML-based format used to transfer financial data between systems.  Context:  Convergent Billing  See also GL Extract Process.  "},{"id":642,"title":"Extensible Class","url":"14834.htm#o557","text":"Type of class that permits facts to be added.  Extensible classes can be adapted to business requirements by the Process Engine configurer.  Context:  Process Engine  "},{"id":643,"title":"Extensible Markup Language (XML)","url":"14834.htm#o558","text":"Markup language that allows information and data to be structured in a predefined manner.  The data can then be used by third party applications or displayed in a web browser using additional formatting information.  Convergent Billing can be set up to use XML when generating invoices.  When the invoice template is described in XML, the data presentation aspect is removed from the invoice presentation so that the invoice data can be sent electronically to a third party.  The third party uses the XML tags to identify data components for display on the invoice.  Convergent Billing can also accept XML for some events and for integration with other systems.  Context:  Convergent Billing, Process Engine  "},{"id":644,"title":"Extensible Stylesheet Language (XSL)","url":"14834.htm#o31409","text":"Language for specifying style sheets for XML documents.  XSL Transformation (XSLT) is used with XSL to describe how an XML document is transformed into another document.   Context:  Convergent Billing  See also Extensible Stylesheet Language Transformation (XSLT).  "},{"id":645,"title":"Extensible Stylesheet Language Transformation (XSLT)","url":"14834.htm#o31410","text":"Standard that uses XSL style sheets to transform XML documents into other XML or HTML documents.  Context:  Convergent Billing  See also Extensible Stylesheet Language (XSL).  "},{"id":646,"title":"Extent","url":"14834.htm#o559","text":"In Oracle databases, an extent is a logical unit of database storage and is a specific number of contiguous data blocks allocated for storing a specific type of information.   A segment consists of multiple extents.  Extents are physically located in datafiles.  Extents can only contain data from one datafile.  Context:  Convergent Billing, Process Engine, High Availability  See also Data Block, Datafile, Oracle, and Segment.  "},{"id":647,"title":"External Authentication","url":"14834.htm#o42379","text":"User access controlled by a third party authentication server when a user logs in to a Singleview client.  Single sign-on is a form of external authentication.   Context:  Singleview  See also Internal Authentication, Single Sign-on, and Pluggable Authentication Module (PAM).  "},{"id":648,"title":"External Definition","url":"14834.htm#o51671","text":"Definition of the structure and fields that must be supplied to or from a remote system, and their mapping to Singleview entities and fields.   Context:  Singleview, Convergent Billing, Configuration Studio  "},{"id":649,"title":"External Definition Namespace","url":"14834.htm#o52464","text":"XML namespace used to create a context for grouping related external definitions.  The context guarantees that all external definitions that are members of the group are uniquely identifiable.   Context:  Singleview, Convergent Billing, Configuration Studio  "},{"id":650,"title":"F","url":"14835.htm","text":""},{"id":651,"title":"Fact","url":"14835.htm#o563","text":"Placeholder for an item of data in an object.  Each fact-based object class has a list of facts that may contain data (the fact value) recorded about each object in that class.   A fact is similar to a column in a table, where each object represents a row in the table and the table structure itself represents the class.  A field included in a display is a visual representation of a fact.  Context:  Process Engine  See also Class.  "},{"id":652,"title":"Fact Group","url":"14835.htm#o565","text":"List of facts associated with a business rule, data validation, or trigger.  When focus shifts from a fact within a fact group to a fact not in the fact group, the associated business rule, data validation, or trigger is evaluated.  Context:  Process Engine  See also Fact.  "},{"id":653,"title":"Fact Type","url":"14835.htm#o567","text":"Type attribute of a fact.  The fact type specifies the type of data that the fact can contain (for example, decimal, date and time, or text).  The Process Engine configurer specifies the fact type when a fact is created.  Context:  Process Engine  See also Fact and Type.  "},{"id":654,"title":"Fact-based Class","url":"14835.htm#o564","text":"Has a list of facts that can contain data (the fact value) recorded about each object in that class.  The Case class in Customer Management is an example of a fact-based class.  A fact-based class is extensible; that is, new facts can be added to the object class by the Process Engine configurer.  Context:  Customer Management, Process Engine  See also Fact, Non-fact Based Class, and Class.  "},{"id":655,"title":"FAD","url":"14835.htm#o61825","text":"See Database Failure Auto-Detection.  "},{"id":656,"title":"Failover","url":"14835.htm#o568","text":"A mechanism to recover from an unplanned failure in one Singleview instance by making the failed instance inactive, and making another Singleview instance active. This excludes planned outages (switchovers). Failovers can be triggered automatically (where supported by configuration).  If Singleview is configured using Oracle RAC, database connections can fail over to an alternate Oracle RAC instance.  High availability failover improves system availability, not only for unplanned outages, but also for planned downtime.  If a system manager needs to carry out maintenance on the master server, the backup server can take over the operations until the master server is operational again.  Context:  Singleview, Commerce Engine, High Availability  See also Node, Transparent Application Failover, Tuxedo Domain, and Tuxedo Gateway.  "},{"id":657,"title":"Failure","url":"14835.htm#o569","text":"Loss of service.  A fault that is externally visible.  Context:  Singleview  See also Fault.  "},{"id":658,"title":"Fault","url":"14835.htm#o570","text":"Deviation from the expected behaviour of Singleview.  A fault may not be externally visible.  Reasons for faults include:  Human error  Design error  Hardware, software, or network failure  Overloading of system resources.   Faults can be visible or transparent to the user.  Context:  Singleview  "},{"id":659,"title":"Feature","url":"14835.htm#o65121","text":"Tariffs and value-added services included in a product offer.  A feature cannot exist in isolation; it must be associated with a product offer.  Context:  Customer Management  See also Companion Product.  "},{"id":660,"title":"Field Help","url":"14835.htm#o572","text":"Context-sensitive information provided for each data entry field and control (options and buttons) on each form.  Field help is accessed by giving a field or control input focus and pressing F1.  Context-sensitive information about the field or control is displayed in a separate pop-up window.  Context:  Convergent Billing  See also Form Help and Input Focus.  "},{"id":661,"title":"Field Security","url":"14835.htm#o573","text":"Optional security defined for each data entry field.  Each field can be set up with the following security characteristics:  Visible/invisible  Enabled/not enabled  Updateable/not updateable.   Field security is defined within attribute types and entity validation.  Field security can be set up identically for all users.  For example, if a generic field is not required, it can be made invisible to all users.  Alternatively, field security can be set up according to the security privileges the user is assigned.  For example, a field can be set up so that it can be updated only by users having delete privileges.  Context:  Convergent Billing  See also Attribute Type, Entity Validation, and Security.  "},{"id":662,"title":"File Processing Manager (FPM)","url":"14835.htm#o55085","text":"File processing management system responsible for maintaining files that are received into or generated by Singleview.    Context:  Convergent Billing, Singleview  See also Batch File Processing.  "},{"id":663,"title":"File Processing Register (FPR)","url":"14835.htm#o55143","text":"A register of files that have been processed, or are waiting to be processed by the FPM.   Context:  Convergent Billing, Singleview  See also File Processing Manager (FPM).  "},{"id":664,"title":"Filter Expression","url":"14835.htm#o574","text":"Expression attached to a reference fact and used to retrieve values for display in the drop-down list associated with the reference fact.  Context:  Process Engine  "},{"id":665,"title":"Filter Search","url":"14835.htm#o575","text":"Search attached to a reference fact.  A filter search is used to retrieve values for display in the drop-down list associated with the reference fact.  Context:  Process Engine  "},{"id":666,"title":"Financial Statements","url":"14835.htm#o11301","text":"Accounting term.  Reports that communicate information indicating the financial position of a company.  They are prepared using information from the general ledger accounts.  Examples of financial statements are:  Profit and Loss Statement (also known as Income Statement)  Statement of Retained Earnings  Balance Sheet  Cash Flow Statement.  Context:  Singleview  "},{"id":667,"title":"for Expression","url":"14835.htm#o578","text":"Used to repeat an expression or expression block for a defined number of times.  The for expression takes the form:  for (<expression>;<expression>;<expression>) [do] <expression>;  Example:  for (count& := 0; count& < 10; count& := count& + 1)  {  \tprint (to_string(count&));  }  Context:  Convergent Billing, Process Engine  "},{"id":668,"title":"Foreign Reference","url":"14835.htm#o579","text":"Reference to an object in a different class.  Context:  Process Engine  "},{"id":669,"title":"Form","url":"14835.htm#o580","text":"Window that allows data to be entered into the database and to display information held in the database.  Forms contain fields in which data is entered or displayed, and one or more controls such as function buttons for access to other forms, or for performing specific operations.   A form is displayed in one of three modes:  View Only  Insert  Update.  Context:  Convergent Billing  See also Form Help, Form Mode, Input Focus, and Tab.  "},{"id":670,"title":"Form Automation","url":"14835.htm#o581","text":"Mechanism that allows form functionality to be controlled using other windows programs or EPM Automation functions.  Form functionality is made available outside Convergent Billing using the OLE Automation Interface.  Context:  Convergent Billing  See also Expression Parser Module (EPM) and OLE Automation Interface.  "},{"id":671,"title":"Form Help","url":"14835.htm#o582","text":"Context-sensitive information provided for each form.  Form help is accessed by giving a form input focus and clicking the Help button on the toolbar.  Context-sensitive information about the form is displayed in a separate pop-up window.  Context:  Convergent Billing  See also Field Help and Form.  "},{"id":672,"title":"Form Mode","url":"14835.htm#o583","text":"Mode in which a form is displayed:  View Only, for information to be displayed but not updated.  Insert, for new information to be entered.  Update, for information to be updated.  Context:  Convergent Billing  See also Form.  "},{"id":673,"title":"Form Role","url":"14835.htm#o584","text":"One of the security features that, in combination with groups, determines the access level a user has to information.  A form role determines which menu items and forms a user can view or access.  Like groups, form roles are assigned to a user using a user profile.  Context:  Convergent Billing, Configuration Studio  See also Access Level, Group, and User Profile.  "},{"id":674,"title":"FPM","url":"14835.htm#o55086","text":"Refer to File Processing Manager (FPM).  "},{"id":675,"title":"FPR","url":"14835.htm#o55199","text":"Refer to File Processing Register (FPR).  "},{"id":676,"title":"Frame","url":"14835.htm#o586","text":"Backdrop for views in the Process Engine client.  Context:  Customer Management, Process Engine  "},{"id":677,"title":"Free Units","url":"14835.htm#o45978","text":"Blocks of free usage offered as an incentive to buy a subscription to a service or package.  Context: Singleview, Process Engine web client  "},{"id":678,"title":"Function","url":"14835.htm#o587","text":"Variable that takes zero or more parameters as inputs and returns a single value as output.  Has the same basic properties as other variables, but also includes properties specific to functions such as a function definitions.  A function can be executed locally or within a Tuxedo service by the Transaction Engine (TRE), and can be built-in or user-defined.  Context:  Convergent Billing, Process Engine, High Availability  See also Function Definition and Function Type.  "},{"id":679,"title":"Function Definition","url":"14835.htm#o588","text":"Defines the input parameters used by the function, and an expression block evaluated to determine the value of the function.  The expression block contains one of the following:  A guarded expression  One or more control expressions.  Context:  Convergent Billing, Process Engine  See also Control Expression, Guarded Expression, and Function.  "},{"id":680,"title":"Function Role","url":"14835.htm#o589","text":"One of the security features in Convergent Billing that, in combination with profiles, determines the access level a user has to functions.  The function role determines which functions, or set of functions, a user can access.  Function roles are assigned using a user profile.  Context:  Convergent Billing, Process Engine, Configuration Studio  See also Access Level, Function, and User Profile.  "},{"id":681,"title":"Function Type","url":"14835.htm#o590","text":"The following table lists function types.  Type  Description  EPM built-in  Intrinsic part of EPM (for example, abs()).  Built-in functions are executed by the EPM parser within the current process.  EPM callback  EPM extensions built into processes and TRE servers.  Callback functions execute locally within specified server or client processes, if they are available in those processes.  User-defined  Written using EPM. User-defined functions can be supplied with Convergent Billing or created by a user.  Context:  Convergent Billing, Process Engine  See also Function and Function Definition.  "},{"id":682,"title":"Future Record","url":"14835.htm#o591","text":"Record having a start date in the future.  Context:  Convergent Billing, Customer Management  See also Current Record and Historical Record.  "},{"id":683,"title":"G","url":"14836.htm","text":""},{"id":684,"title":"Gadget","url":"14836.htm#o46237","text":"Object located on the Home page to enable the user to access customer-related items.  Context: Process Engine web client  See also Home Page  "},{"id":685,"title":"General Ledger","url":"14836.htm#o11269","text":"Accounting term.  System that contains all summary-level accounting transactions of a company's business activities.  The general ledger is a summary of every transaction as recorded in the books of original entry or journals, and the source application or system for all financial reports.  Context:  Convergent Billing  See also Chart of Accounts, Journals, Sub-ledgers, and General Ledger (GL) Code.  "},{"id":686,"title":"General Ledger (GL) Cache","url":"14836.htm#o592","text":"Stores GL code, GL guidance, and reporting entity details.  The cache is primarily used by the ERT, rating servers, and the BGP when validating and storing GL guidance details for charges in the database.  There is one general ledger cache per process; it is not a shared memory cache.  Context:  Convergent Billing  "},{"id":687,"title":"General Ledger (GL) Code","url":"14836.htm#o593","text":"ID that each account in a general ledger is identified by, and sometimes known as an account code.  GL codes are used to map transactions in Singleview to the appropriate account in the external general ledger system.  Context:  Convergent Billing  See also Adjustment Type and Payment Type.  "},{"id":688,"title":"General Ledger Account Category","url":"14836.htm#o9625","text":"Specifies which category, or subclass, a GL code belongs to.  General ledger account category codes are extensible.  The following default account categories are included with Convergent Billing:  Receivable  Payable  Deposit  Credit  Bank (Cash)  Revenue  Expense.  Context:  Convergent Billing  See also General Ledger Account Class and Account Category.  "},{"id":689,"title":"General Ledger Account Class","url":"14836.htm#o9627","text":"Determines whether a GL code account is an asset, liability, revenue, or expense account.  General ledger account classes for GL codes are not extensible.  Context:  Convergent Billing  See also General Ledger Account Category and Account Class.  "},{"id":690,"title":"General Ledger Guidance Entity","url":"14836.htm#o8664","text":"Entity that maps charges associated with transactions to the affected GL codes in the Sales Journal.  GL guidance entities define the GL codes affected by a specific type of transaction.  The GL codes defined depend on the type of transaction and whether the transaction results in accrued, deferred, non-billable, or earned revenue.   Context:  Convergent Billing, Configuration Studio  See also GL Guidance, Sales and Cash Receipts Journal, Accrual GL Guidance Entity, Actual GL Guidance Entity, Deferral GL Guidance Entity, and Non-billable GL Guidance Entity.  "},{"id":691,"title":"General Output Process (GOP)","url":"14836.htm#o594","text":"Server process that manages the printing of images (usually invoices) generated by tasks associated with a specified schedule.  Controls the selection, sorting, and output of images.  Context:  Convergent Billing  See also Invoice Generation Process (IGP).  "},{"id":692,"title":"General Public Licence (GPL)","url":"14836.htm#o595","text":"Licence used by the Free Software Foundation and GNU projects to ensure the freedom to share and modify free software.  Context:  Singleview  "},{"id":693,"title":"Generic Security Services Application Program Interface","url":"14836.htm#o63058","text":"API for accessing security services.  Context:  Customer Management, Singleview  "},{"id":694,"title":"Ghostscript","url":"14836.htm#o597","text":"Third party product that converts PostScript files to PDF and vice versa.  Ghostscript can also convert PostScript language files and Portable Document Format (PDF) files to other formats for display and printing.  Ghostscript is used to display and generate invoices from the TEX format.  Context:  Convergent Billing  See also TEX, TEX Format, and TEX Template.  "},{"id":695,"title":"GL Code","url":"14836.htm#o598","text":"Refer to General Ledger (GL) Code.  "},{"id":696,"title":"GL Extract Process","url":"14836.htm#o9631","text":"Process that creates the physical GL extract files for transfer to external financial systems (for example, to Oracle General Ledger).  Convergent Billing provides support to extract the GL upload using the eXtensible Business Reporting (XBRL) General Ledger Taxonomy XML schema.  Context:  Convergent Billing  See also eXtensible Business Reporting Language (XBRL) and GL Upload Process.  "},{"id":697,"title":"GL Guidance","url":"14836.htm#o11313","text":"Term used in Convergent Billing to describe the process of determining which GL codes (and thereby which accounts in the external GL system) are affected by a transaction to allow revenue recognition over time.  GL guidance allows the GL codes affected by a transaction to be determined when the Sales Journal posting process is run.  GL guidance is only used for normalised event and invoice transactions and not for payment and adjustment transactions.  Context:  Convergent Billing  See also General Ledger Guidance Entity, Sales and Cash Receipts Journal, Normalised Event File Transactions, and Invoice Transactions.  "},{"id":698,"title":"GL Guidance Entity","url":"14836.htm#o9459","text":"Refer to General Ledger Guidance Entity.  "},{"id":699,"title":"GL Upload Process","url":"14836.htm#o9630","text":"Process that aggregates debit and credit entries in the Sales Journal and stores the data in the Convergent Billing database for later extraction to an external GL system.  Context:  Convergent Billing  See also Sales and Cash Receipts Journal, Sales Journal Posting Process, and GL Extract Process.  "},{"id":700,"title":"Global Bar","url":"14836.htm#o45979","text":"Tool bar on Process Engine web client that displays buttons and links.  It is displayed on all pages of the Process Engine web client.  Context: Process Engine web client  See also Home Page  "},{"id":701,"title":"GOP","url":"14836.htm#o599","text":"Refer to General Output Process (GOP).  "},{"id":702,"title":"GPL","url":"14836.htm#o1432","text":"Refer to General Public Licence (GPL).  "},{"id":703,"title":"Grid","url":"14836.htm#o600","text":"Display of objects in tabular form.  In the Process Engine client, a grid is used in the List section of views, and can also be used in the Detail and Tab sections, to display objects in tabular form.    Process Engine configurers can define the columns and content in the initial display.  Users can then adapt the display and content as required.  Context:  Convergent Billing, Process Engine  "},{"id":704,"title":"Grid Fact Groups","url":"14836.htm#o601","text":"Specified facts displayed as a grid for tabular information in Process Engine layouts.  Context:  Process Engine  "},{"id":705,"title":"Group","url":"14836.htm#o45980","text":"Collection of fields logically and visually separated from other fields on a tab.  A group is displayed as a grid, panel, or hierarchy tree.   A tab can consist of multiple groups.  Each group is defined with a unique caption.  Context: Singleview, Process Engine web client  "},{"id":706,"title":"GSS API","url":"14836.htm#o63057","text":"Refer to Generic Security Services Application Program Interface.  "},{"id":707,"title":"Guarded Expression","url":"14836.htm#o604","text":"Block of zero or more expression pairs, followed by a single (default) expression used as a function definition.  The first expression in each expression pair returns a value and the second expression is a condition.  When the function is called, the conditional expression for the first expression pair is evaluated; if it returns TRUE, the associated value expression is evaluated and returned as the function's result.  If the conditional expression returns FALSE, the next conditional expression is evaluated.  If no conditional expression evaluates to TRUE, the value of the default expression is returned as the function's result.  Context:  Convergent Billing  See also Expression, Function, and Function Definition.  "},{"id":708,"title":"H","url":"14837.htm","text":""},{"id":709,"title":"H2 Database","url":"14837.htm#o58833","text":"Relational Java SQL database management system written in Java.  Context:  Process Engine web client  "},{"id":710,"title":"Hierarchy","url":"14837.htm#o606","text":"Group of related items that exist in a structured relationship.  Context:  Convergent Billing, Customer Management  "},{"id":711,"title":"High Availability","url":"14837.htm#o607","text":"Status of a system if it rarely suffers degradation or interruption in its service to the customer (as a consequence of failures of one or more of its parts).  A system is usually made highly available using redundancy (that is, the duplication of parts so that if one part fails, another can take its place).  Context:  Convergent Billing, Commerce Engine  See also Database Failure Auto-Detection and Transparent Application Failover.  "},{"id":712,"title":"Hint Text","url":"14837.htm#o609","text":"Brief (one-line) explanatory text associated with a data entry field that is displayed when the mouse cursor is placed over the field.  Context:  Convergent Billing  See also Field Help.  "},{"id":713,"title":"Historical Record","url":"14837.htm#o610","text":"Record having an end date before today.  Context:  Convergent Billing  See also Current Record and Future Record.  "},{"id":714,"title":"Historical Update Privilege","url":"14837.htm#o611","text":"Security privilege (or access level) that allows historical records to be updated, and allows updates to the record to be backdated.  Context:  Convergent Billing  See also Date Range Update Privilege, Direct Update, and Update Privilege.  "},{"id":715,"title":"History Action","url":"14837.htm#o612","text":"Record of activity that a user completes by following normal business processes.  For example, when a user creates a billing enquiry to provide an account balance to a customer, they provide the customer with the information about the phone, and no follow-up activity is required.   A history action can be created as a record of the user's activity in resolving the case.  A history action is configured with a duration of zero so that it is automatically marked as complete when created.  Context:  Customer Management  See also Action.  "},{"id":716,"title":"Home Page","url":"14837.htm#o46236","text":"First page displayed after logging in to the Process Engine web client, and is used as the starting point for performing any user-related activities.  Context: Process Engine web client  "},{"id":717,"title":"Horizontal Scalability","url":"14837.htm#o613","text":"Scalability achieved by the addition of more nodes to a cluster.  The application itself can be distributed in various ways across a cluster.  Context:  Convergent Billing  See also Cluster, Node, Scalable, System, and Vertical Scalability.  "},{"id":718,"title":"HTML","url":"14837.htm#o614","text":"See Hypertext Markup Language (HTML).  "},{"id":719,"title":"Hypertext Markup Language (HTML)","url":"14837.htm#o616","text":"Hypertext Markup Language (HTML) is an authoring software language used to create web pages.  HTML is the language used to tag various parts of a Web document so browsing software knows how to display that document's links, text, graphics, and attached media.  Context:  Singleview  "},{"id":720,"title":"I","url":"14838.htm","text":""},{"id":721,"title":"Icon","url":"14838.htm#o617","text":"Bitmap image that is 20 pixels wide by 20 pixels high.  In Convergent Billing, icons are used to identify customer types, person types, products, service types, and equipment types.  In Customer Management, icons are used to identify objects in hierarchy trees, grids, and search results.    Context:  Convergent Billing, Process Engine, Customer Management, Configuration Studio  "},{"id":722,"title":"IDE","url":"14838.htm#o70177","text":"See Integrated Development Environment (IDE).  "},{"id":723,"title":"IDL","url":"14838.htm#o618","text":"Refer to Interface Description Language (IDL).  "},{"id":724,"title":"IDTTeX","url":"14838.htm#o42592","text":"Processor that converts TeX files to AFP, TeX, text, or Postscript output files.  IDTTeX supports UTF-8 input files.    IDTTeX commands can be used in the Invoice Design Tool (IDT) and during the Invoice Generation Process (IGP) to output documents for display or printing.   Context:  Singleview  See also TeX, Invoice Generation Process (IGP), Invoice Design Tool (IDT), TeX Format, and TeX Template.  "},{"id":725,"title":"if Expression","url":"14838.htm#o620","text":"More restrictive than an if-then-else expression, in that it controls only one expression.  The if expression takes the form:  <expression> if <single expressions>;        In this case, the conditional expression follows the expression being evaluated if the condition is TRUE.  Example:  output$ = 'Finished' if count& = 5;  Context:  Convergent Billing, Process Engine  "},{"id":726,"title":"if-then-else Expression","url":"14838.htm#o621","text":"Takes the form:  if <single expression> then  \t<expression> <br>\t[else  \t\t<expression>] ;  An else must be used if a single expression is used as this expression should always return a value.    Example:  if count& = 5 then  \toutput$ := 'Finished'  else output$ = 'More to Come';  if count& then  \t'non zero'  else  \t'zero';  Context:  Convergent Billing, Process Engine  "},{"id":727,"title":"IGP","url":"14838.htm#o619","text":"Refer to Invoice Generation Process (IGP).  "},{"id":728,"title":"Image Fact","url":"14838.htm#o622","text":"Fact with an attribute type of Image.  When included in layouts, image facts are displayed as graphics.  Context:  Process Engine  "},{"id":729,"title":"Import/Export","url":"14838.htm#o623","text":"Transfer of data in a specified format between Convergent Billing or a Process Engine business solution and an external system.  In a Process Engine business solution, a text file can be used as an intermediary.  Context:  Convergent Billing, Process Engine  "},{"id":730,"title":"In Place Search","url":"14838.htm#o629","text":"Refer to Advanced Search.  "},{"id":731,"title":"Index Expression","url":"14838.htm#o624","text":"Evaluated to determine an input value to a derived attribute.  An attempt is then made to match the input value to one or more predefined index values held in a lookup table.  The method by which matching is performed is determined by the specified evaluation type.  Context:  Convergent Billing  See also Derived Attribute, Evaluation Type, Index Value, Lookup Table, and Result Value.  "},{"id":732,"title":"Index Value","url":"14838.htm#o625","text":"Held in a look-up table and used as the basis for determining a result value for a derived attribute given a specific input value (calculated from the index expression).  Context:  Convergent Billing  See also Derived Attribute, Evaluation Type, Index Expression, Lookup Table, and Result Value.  "},{"id":733,"title":"Indicator Fact","url":"14838.htm#o626","text":"Displays the count of the results of a search as a button.  Clicking the button displays the objects returned by the search if the value is equal to or greater than the indicator fact threshold.  Context:  Process Engine  See also Fact.  "},{"id":734,"title":"Initial Derivation","url":"14838.htm#o627","text":"Type of derivation on a fact that is only evaluated once when the object is created.  Context:  Process Engine  "},{"id":735,"title":"Initial State","url":"14838.htm#o628","text":"Facts can have the following initial states:  Optional and editable  Optional and read-only  Not allowed and read-only  Mandatory and editable  Mandatory and read-only.  Deferred  Optional, mandatory, and not allowed states apply to fact values.  Read-only and editable states apply to fields representing facts.    Deferred state is applicable to derived facts. When a derived fact has a state of deferred, it is not re-derived unless explicitly requested.   Other factors can be applied to the initial state of a fact to calculate its current state.   Context:  Process Engine  "},{"id":736,"title":"Inline Attachments","url":"14838.htm#o58194","text":"Attachments made directly into the body of an email. Only graphics are usually allowed as inline attachments.   Context:  Process Engine web client, Customer Management  "},{"id":737,"title":"Input Focus","url":"14838.htm#o630","text":"Characteristic of the active form or data entry field indicating that any actions performed by the user will be carried out on that form or data entry field.  A form is said to have input focus when that form is made active.  A data entry field is said to have input focus when the cursor is moved into that field.  Clicking on to another enabled field or using the Tab and Shift-Tab keys moves the input focus.  Context:  Convergent Billing  See also Form.  "},{"id":738,"title":"Input Parameter","url":"14838.htm#o631","text":"Parameter used with saved custom searches.  A value is entered by the user when the search is run.  Context:  Customer Management, Process Engine  See also Custom Search.  "},{"id":739,"title":"Instance","url":"14838.htm#o632","text":"One-off, unique copy of an entity that is customised independently of the entity's definition.  An instance is not affected by changes made to the definition after the instance is created.   A Singleview instance is a single portion of Singleview that is configured to run on a server.  An instance only runs on one physical machine; however, multiple instances of Singleview can be installed on one physical server.  For example, the Commerce Engine can be considered to be an instance of Singleview and multiple instances are required to support replication.  In a Convergent Billing clustered environment, Convergent Billing instances typically map to an individual site within a Tuxedo MP instance.  Context:  Convergent Billing, Process Engine  See also Commerce Engine, Convergent Billing Instance, Product Definition, Product Instance, and RAC Instance.  "},{"id":740,"title":"Instance Name","url":"14838.htm#o633","text":"Logical name of an instance.  The name of the instance is used as the Tuxedo LMID (Logical Machine ID) for the instance.  The instance name is fixed to the specific instance and does not change because of failover.  Possible instance names are MASTER and BACKUP.  Context:  Convergent Billing  See also Cluster and Instance.  "},{"id":741,"title":"Instruments","url":"14838.htm#o58394","text":"See Performance Instrumentation.  "},{"id":742,"title":"Integer Fact","url":"14838.htm#o634","text":"Fact with an attribute type of integer.  When included in layouts, Integer facts are displayed as normal fields and accept integer values only.  Context:  Process Engine  "},{"id":743,"title":"Integrated Development Environment (IDE)","url":"14838.htm#o70175","text":"Software application that provides comprehensive facilities to computer programmers for software development.  Also known as Interactive Development Environment, IDE usually consists of a source code editor, build automation tools, and a debugger.  Context:  Convergent Billing, Process Engine, Singleview  "},{"id":744,"title":"Intelligent Defaulting","url":"14838.htm#o635","text":"Technique of configuring a field so that its initial value is defaulted automatically based on the data entered in a separate field.  Context:  Convergent Billing  See also Attribute Type, Entity Validation, and Reference Type.  "},{"id":745,"title":"Interactive Voice Response (IVR)","url":"14838.htm#o636","text":"Telecommunications system using a pre-recorded database of voice messages for providing options to a user, typically over telephone lines.  User input is retrieved using tone key presses.  Context:  Convergent Billing, Customer Management  "},{"id":746,"title":"Interface Description Language (IDL)","url":"14838.htm#o637","text":"Language used to describe the OLE Automation Interface.  The Interface Description Language describes the interface, independent of programming languages used for writing OLE Automation Controllers.  Context:  Convergent Billing  See also OLE Automation Interface.  "},{"id":747,"title":"Interface Definition","url":"14838.htm#o57254","text":"Instance of an interface template. It stores interface details in the database.  Context:  Convergent Billing, Configuration Studio  See also Interface Type and Interface Template.  "},{"id":748,"title":"Interface Template","url":"14838.htm#o57253","text":"Instance of an interface type. An interface template provides static data that defines the fundamental functionality of an interface, and operational data for the operation of an interface.  Context:  Convergent Billing, Configuration Studio  See also Interface Type and Interface Definition.  "},{"id":749,"title":"Interface Type","url":"14838.htm#o57252","text":"Defines the format, characteristics, and details required to configure an interface. An interface type determines the tabs and fields displayed on an interface template and definition, including default values.  Context:  Convergent Billing, Configuration Studio  See also Interface Template and Interface Definition.  "},{"id":750,"title":"Interim Invoice","url":"14838.htm#o639","text":"Generated at times other than the regular invoice cycle and includes charges defined as 'interim'.  Interim invoices are typically used for activation tariffs (when the service provider wants to charge the installation or activation fees as soon as the service is installed or requested).  Context:  Convergent Billing  See also Invoice, Invoice Cycle, and Tariff.  "},{"id":751,"title":"Internal Authentication","url":"14838.htm#o42378","text":"User access controlled by Singleview.  When logging in to a client, the user must enter a client-specific user name and password.  Context:  Singleview  See also External Authentication, Single Sign-on, and Pluggable Authentication Module (PAM).  "},{"id":752,"title":"Internal Parameter","url":"14838.htm#o638","text":"Used with custom searches or expressions where a default value is automatically assigned when a task is executed.  Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":753,"title":"Internet Protocol (IP)","url":"14838.htm#o640","text":"Method or protocol by which data is sent from one computer to another on the internet.  Each computer (known as a host) on the internet has at least one IP address that identifies it from all other computers on the internet.  Context:  Convergent Billing, Process Engine  See also Domain Name System (DNS).  "},{"id":754,"title":"In-transaction Expression","url":"14838.htm#o51646","text":"In entity validation, an expression to perform actions when the active form is saved as part of in-transaction processing.  The expressions are evaluated after data is applied but before it is committed to the database.  If an error occurs, the applied updates are automatically rolled back.  Context:  Convergent Billing  See also Entity Validation, Pre-commit Validation, Row Validation, and Post-commit Expression.  "},{"id":755,"title":"Invisible Index","url":"14838.htm#o70329","text":"Type of table index that is ignored by the optimiser in an Oracle database. It can be used to improve performance for specific processes (for example, purging old records from a date-ranged table).  Context:  Singleview, Oracle SE.  "},{"id":756,"title":"Invoice","url":"14838.htm#o641","text":"Legal document itemising charges (and possibly credits) accrued against that customer's account for services used by, or supplied to, that customer over a specified period.  Accrued charges for a customer node in a customer hierarchy can be 'rolled up' into the invoice for a node higher in the customer hierarchy.  Context:  Convergent Billing  See also Customer Hierarchy, Customer Node, Reporting Level, and Statement.  "},{"id":757,"title":"Invoice Cycle","url":"14838.htm#o642","text":"Identifies the billing cycle to be used to generate invoices for a specified customer; for example, a customer may request invoices to be generated on a weekly, monthly, or quarterly basis.  Context:  Convergent Billing  See also Bill Cycle.  "},{"id":758,"title":"Invoice Design Tool","url":"14838.htm#o643","text":"Graphical User Interface application for creating and updating the templates that comprise a document format.  The Invoice Design Tool is an option that requires a separate licence.  Context:  Convergent Billing  See also Document, Invoice Format, Invoice Template, and Template.  "},{"id":759,"title":"Invoice Format","url":"14838.htm#o644","text":"Specifies the format of generated invoices.  The format specified determines which invoice template is used during the Invoice Generation Process (IGP).  Can be specified on a per customer node basis.  Context:  Convergent Billing, Configuration Studio  See also Invoice Generation Process (IGP) and Invoice Template.  "},{"id":760,"title":"Invoice Generation Process (IGP)","url":"14838.htm#o645","text":"TRE server (treigp) that handles the formatting of customer documents by using format scripts in conjunction with Expression Parser Module (EPM) operations.  The IGP substitutes data records into a template to generate a set of documents, each displayed in a predefined format.   The IGP handles the generation of invoices and statements, debit and credit notes, and dunning letters.  Context:  Convergent Billing  See also Bill Generation Process (BGP), Document, General Output Process (GOP), Invoice Template, Template, and Transaction Engine.  "},{"id":761,"title":"Invoice Message","url":"14838.htm#o646","text":"Defines messages to display on invoices.  Field entries in the message definition specify the invoices on which the message is displayed.  Invoices can be selected by invoice format, schedule, task ID, account type, or customer name.  Context:  Convergent Billing, Configuration Studio  "},{"id":762,"title":"Invoice Node","url":"14838.htm#o647","text":"Customer node having a reporting level of Invoice.  Context:  Convergent Billing  See also Customer Node, Reporting Level, and Statement Node.  "},{"id":763,"title":"Invoice Point","url":"14838.htm#o648","text":"Point in the customer node hierarchy where the report level is 'Invoice'.  Context:  Convergent Billing  See also Customer Hierarchy and Invoice.  "},{"id":764,"title":"Invoice Receivable Type History Records","url":"14838.htm#o9635","text":"Records created during billing based on the aggregate amounts posted to accounts receivable GL codes for each customer node.  Invoice receivable type histories for all accounts receivable accounts (that is, their account type has an account class of Asset and an account category of Receivable), make up the accounts receivable sub-ledger.  The records can be reconciled against the balances of the accounts receivable amounts uploaded to an external GL system.  Context:  Convergent Billing  "},{"id":765,"title":"Invoice Template","url":"14838.htm#o649","text":"Template associated with the specified invoice format.  Billing data records are inserted into the template by substitution.  Invoice templates can be nested; that is, one template can call one or more other templates.  Context:  Convergent Billing, Configuration Studio  See also Invoice Format, Post-eligibility Expression, and Pre-eligibility Expression.  "},{"id":766,"title":"Invoice Transaction","url":"14838.htm#o11306","text":"Sales and Cash Receipts Journal financial transaction generated during billing when billing charges are generated and rating charges are processed, to record the change in state of transactions.  Context:  Convergent Billing  See also Sales and Cash Receipts Journal, Normalised Event File Transactions, Payment Transactions, and Adjustment Transactions.  "},{"id":767,"title":"Invoice Type","url":"14838.htm#o650","text":"Specifies any defaults or entity validation for invoices specified with that type.  Context:  Convergent Billing, Configuration Studio  See also Invoice.  "},{"id":768,"title":"IP","url":"14838.htm#o651","text":"Refer to Internet Protocol (IP).  "},{"id":769,"title":"Issue","url":"14838.htm#o652","text":"Representation of the subject of a case.  Several issues can be raised for a specific case.  Context:  Customer Management  See also Case.  "},{"id":770,"title":"Issue Date","url":"14838.htm#o653","text":"Date an invoice is issued to a customer.  Issue dates differ from effective dates because invoice generation is calculated from the effective date, and invoice aging is calculated using the issue date.  A separate issue date and effective date allows for invoice verification and delivery without customers receiving effective invoices that have aged a week or more in delivery.  Context:  Convergent Billing  See also Effective Date.  "},{"id":771,"title":"IVR","url":"14838.htm#o654","text":"Refer to Interactive Voice Response (IVR).  "},{"id":772,"title":"J","url":"14839.htm","text":""},{"id":773,"title":"JATZ","url":"14839.htm#o69457","text":"See Java API for TRE Zwei (JATZ).  "},{"id":774,"title":"Java","url":"14839.htm#o33154","text":"Object-oriented application programming language developed by Sun Microsystems.  Context:  Convergent Billing  "},{"id":775,"title":"Java API for TRE Zwei (JATZ)","url":"14839.htm#o69456","text":"Java API that wraps the Enterprise Java Interface (EJI) in a user friendly interface, provides additional connection pooling functionality, and insulates client applications from differences between EJI versions.  Context:  Singleview  See also Enterprise Java Interface (EJI), and Java.  "},{"id":776,"title":"Java Bytecode","url":"14839.htm#o58604","text":"Form of Java instructions that can be executed by Java Virtual Machines.  Context: Process Engine web client  "},{"id":777,"title":"Java Naming and Directory Interface (JNDI)","url":"14839.htm#o58472","text":"Java API that provides Java-based applications with a unified interface to multiple naming and directory services for looking up data and objects.  Context:  Singleview, Process Engine web client  "},{"id":778,"title":"Java Virtual Machine","url":"14839.htm#o58601","text":"Software implemented on virtual and non-virtual hardware, and standard operating systems to execute Java bytecode.  Context:  Process Engine web client, Singleview  See also Java and JVM.  "},{"id":779,"title":"JBoss BRMS","url":"14839.htm#o69455","text":"See JBoss Business Rules Management System (BRMS).  "},{"id":780,"title":"JBoss Business Process Management (jBPM)","url":"14839.htm#o69447","text":"Workflow engine used to execute business processes defined using Business Process Model and Notation (BPMN).    Context:  Singleview  See also Business Process, Business Process Model and Notation (BPMN), and Business Rules Management System (BRMS).  "},{"id":781,"title":"JBoss Business Rules Management System (BRMS)","url":"14839.htm#o69452","text":"Software system used to define, deploy, execute, monitor, and maintain an organisation's business rules.  Context:  Singleview  See also JBoss Business Process Management (jBPM).  "},{"id":782,"title":"jBPM","url":"14839.htm#o69449","text":"See JBoss Business Process Management (jBPM).  "},{"id":783,"title":"JNDI","url":"14839.htm#o58469","text":"See Java Naming and Directory Interface.  "},{"id":784,"title":"Journal","url":"14839.htm#o11273","text":"Accounting term.  Record of transactions that have accounting policies applied before they are aggregated and posted to the general ledger.  Journals are referred to as the book of original entry.  Journals provide a complete list of transactions as they occur, in chronological order.  Periodically, the entries in journals are posted to the general ledger.  Convergent Billing provides a Sales and Cash Receipts Journal.  Context:  Convergent Billing  See also General Ledger, Sales Journal, Cash Receipts Journal, and Sales and Cash Receipts Journal.  "},{"id":785,"title":"JVM","url":"14839.htm#o58600","text":"See Java Virtual Machine.  "},{"id":786,"title":"K","url":"14840.htm","text":""},{"id":787,"title":"Keyed Derived Attribute","url":"14840.htm#o659","text":"Derived attribute with a data type of array or hash, allowing multiple values to be contained in a single derived attribute.  A key or index is used to reference the values in the derived attribute.  Keyed derived attributes are used in conjunction with keyed subtotals and keyed tariffs to offer a series of related products.  Context:  Convergent Billing  See also Derived Attribute, Keyed Subtotal, and Keyed Tariff.  "},{"id":788,"title":"Keyed Subtotal","url":"14840.htm#o661","text":"Subtotal with a data type of array or hash.  A value is calculated for each value of the key in the aggregation set, so that multiple values are returned for a single subtotal.  Keyed subtotals are often used in conjunction with keyed tariffs and keyed derived attributes, to provide tiered discounts, or aggregation for related products.  Context:  Convergent Billing  See also Aggregation, Subtotal, Keyed Tariff, and Subtotal Term.  "},{"id":789,"title":"Keyed Tariff","url":"14840.htm#o660","text":"Tariff with a data type of array or hash.  Keyed tariffs allow Convergent Billing to group tariffs so that multiple values are applied for a single event.  In this way, a single tariff can replace multiple individual tariffs of the same type or generate multiple charges.  Keyed tariffs are often used in conjunction with keyed subtotals and keyed derived attributes.  Context:  Convergent Billing  See also Tariff, Keyed Subtotal, and Keyed Derived Attribute.  "},{"id":790,"title":"Keyword Fact","url":"14840.htm#o662","text":"Fact with a usage of keyword.  Keyword facts are only applicable to facts that have a type of Text or Memo.  Context:  Process Engine, Customer Management  "},{"id":791,"title":"Keyword List","url":"14840.htm#o663","text":"List of words that can be used as selection criteria in keyword searches.  The keyword list is generated automatically from entries made in keyword facts.  Context:  Process Engine, Customer Management  "},{"id":792,"title":"Keyword Search","url":"14840.htm#o664","text":"Custom search that finds specified keywords within an object.  Results are returned for objects that have keyword facts.  Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":793,"title":"L","url":"14841.htm","text":""},{"id":794,"title":"Latency","url":"14841.htm#o665","text":"Period of time it takes a component, or the whole system, to process a request.  Context:  Convergent Billing  "},{"id":795,"title":"Layout","url":"14841.htm#o666","text":"Used in the Detail and Tab sections of a view in the Process Engine client.  Layouts control which fact groups are included in a display.  Context:  Process Engine  See also View and Process Engine Client.  "},{"id":796,"title":"Lexicographical Comparison","url":"14841.htm#o667","text":"Native and base comparison made with an ordinary dictionary order within a single language as a prerequisite to ordering.  Context:  Convergent Billing  See also Lexicographical Ordering.  "},{"id":797,"title":"Lexicographical Ordering","url":"14841.htm#o668","text":"Method of ordering characters requiring spaces to be positioned before other characters, symbols before alphanumeric characters, and the remaining characters in alphanumeric order.  Lexicographical ordering is used in dictionaries.  The lexicographical order is dependent on the language for which Convergent Billing is configured.  Context:  Convergent Billing  See also Lexicographical Comparison.  "},{"id":798,"title":"Liability","url":"14841.htm#o11257","text":"Accounting term.  Type of account that records liabilities owed by the company to another party (for example, taxes, prepayments, and prepaid phone top-ups).  Context:  Convergent Billing  See also Account Classifications, Asset, Equity, Revenue, and Expense.  "},{"id":799,"title":"Licence Module","url":"14841.htm#o669","text":"Licence module is used for licence information checks and licence entity recalculation.  Context:  Convergent Billing  "},{"id":800,"title":"List Section","url":"14841.htm#o671","text":"Area of a view that displays the list of objects retrieved from the most recent search in the Process Engine client.  The List section can also display data from an object that is being created.  The Process Engine configurer can define the columns and content of the display.  The user controls the display of the section.  Context:  Process Engine, Customer Management  "},{"id":801,"title":"Lists","url":"14841.htm#o672","text":"Derived attribute, with an evaluation type of List, can be used as a component of a product definition, customer type, or service type that defines the type of information to be held in an associated list.  The list defines a set of values that identify items having similar properties or uses (for example, frequently called numbers).  The values stored in the list are added in response to information obtained from the customer.  Generally this type of derived attribute is defined for special tariffs to be applied if one or more of the list items are matched during the rating process.  Context:  Convergent Billing  See also Derived Attribute and Evaluation Type.  "},{"id":802,"title":"Load Balancing","url":"14841.htm#o673","text":"Dynamic mechanism used to achieve scalability by spreading the workload across a cluster or within a node.  Load balancing is important for networks where it is difficult to predict the number of requests that will be issued to a server.  If one server starts to become overloaded, requests are forwarded to another server with more capacity.  Context:  Convergent Billing, High Availability  See also Cluster, Node, and Scalable.  "},{"id":803,"title":"Load Distribution","url":"14841.htm#o674","text":"Static form of load balancing.  For example, configuring different bill runs to execute on separate instances at the same time.  Context:  Convergent Billing  See also Bill Run and Load Balancing.  "},{"id":804,"title":"Local Function","url":"14841.htm#o14874","text":"Function that executes locally; that is, within the context of, or local to, the function caller (for example, the client or a TRE server).   Context:  Convergent Billing, Process Engine  See also Function and Function Type.  "},{"id":805,"title":"Local Stored Fact","url":"14841.htm#o58032","text":"Fact that is stored in a Process Engine database.  Context:  Process Engine  See Also Stored Fact  "},{"id":806,"title":"Local Variable","url":"14841.htm#o678","text":"Variable with scope limited to:  The current block of expressions or current function; these variables are defined using the reserved keyword var.  An expression; these variables are prefixed with the @ symbol.  Context:  Convergent Billing, Process Engine  See also Expression and Variable.  "},{"id":807,"title":"Localisation","url":"14841.htm#o679","text":"Process of producing a version of a software solution specific to a region or locale.  Localisation includes using the local language, character set, date, and currency formats in Singleview and documentation.  Context:  Convergent Billing, Process Engine  "},{"id":808,"title":"Logical Record","url":"14841.htm#o680","text":"Series of related facts from one or more objects displayed together.  For example, a logical record for a case in Customer Management can consist of data items from objects of several object classes (for example, case, contact, and address).  Context:  Customer Management, Process Engine  "},{"id":809,"title":"Lookup Fact","url":"14841.htm#o681","text":"Fact used to retrieve values from a foreign reference.  A lookup fact retrieves the value from a specified fact of a specified object.  Context:  Process Engine  "},{"id":810,"title":"Lookup Table","url":"14841.htm#o682","text":"Table of values containing index values and associated result values.  The table is used to look-up the result value based on an index value that is calculated using an associated index expression.  Context:  Convergent Billing  See also Index Expression, Index Value, and Result Value.  "},{"id":811,"title":"M","url":"14842.htm","text":""},{"id":812,"title":"Main Menu","url":"14842.htm#o45983","text":"Drop-down menu on the Context bar that lists operations available for the current page.  Context: Process Engine web client  See also Search Result Page and Details Page.  "},{"id":813,"title":"Management Information Base (MIB)","url":"14842.htm#o685","text":"Structured objects representing 'interesting' entities (not Convergent Billing entities) that are managed.  Such entities can be the number of network cards in a router, number of times a device is reset, or notification messages (traps) that may be sent.  A MIB file is a text file that contains the MIB definitions for a specified SNMP agent.  Context:  Convergent Billing  See also Simple Network Management Protocol (SNMP), Trap, and Notification Generator and Receiver.  "},{"id":814,"title":"Mandatory and Editable","url":"14842.htm#o686","text":"Initial state for a fact that requires a value to be entered.  Mandatory and editable fields allow the user to directly edit the value of the fact.  Context:  Process Engine  See also Initial State and Fact.  "},{"id":815,"title":"Mandatory and Read-only","url":"14842.htm#o687","text":"Initial state for a fact that requires a value to be derived automatically.  Mandatory and read-only fields do not allow users to directly edit the values displayed in the fields.  A value must be provided by the fact's derivation.  Context:  Process Engine  See also Initial State and Fact.  "},{"id":816,"title":"Mandatory Fields","url":"14842.htm#o45984","text":"Fields that must be populated before saving.  They are usually displayed with a yellow background.  Context: Singleview, Process Engine web client  "},{"id":817,"title":"Masked Data/Field","url":"14842.htm#o39644","text":"Data or field hidden by a mask, which fully or partially obscures the field's contents.  For example, to hide all but the last digits of a credit card number.  Masked data is not data with an edit mask applied.  It refers to data with a mask applied to its display.  Edit masks control data input.  Context:  Convergent Billing  See also Encrypted Data/Field.  "},{"id":818,"title":"Master Derived Attribute","url":"14842.htm#o689","text":"Derived attribute referenced by one or more derived attributes (referred to as slave derived attributes).  Allows the same look-up table to be used to derive more than one derived attribute.  Context:  Convergent Billing  See also Derived Attribute, Lookup Table, and Slave Derived Attribute.  "},{"id":819,"title":"Memo Fact","url":"14842.htm#o691","text":"Fact with an attribute type of Memo.  When a memo fact is included in a layout, the memo fact accepts all printable characters and specific formatting codes.  Context:  Process Engine  "},{"id":820,"title":"Merge Definition","url":"14842.htm#o692","text":"Links multiple Process Engine facts to a Microsoft Word document.  The values of the facts included in merge definitions are used in creating a standard word processing document.  Context:  Process Engine  "},{"id":821,"title":"Message","url":"14842.htm#o693","text":"Displayed to Singleview users, drawing attention to some form of operational variance.  The severity level of an error message can vary (depending on the contents).  Context:  Convergent Billing, Customer Management, Process Engine  See also Message Group.  "},{"id":822,"title":"Message Group","url":"14842.htm#o694","text":"Groups similar messages in a specified ID range.  Context:  Convergent Billing, Process Engine  See also Message.  "},{"id":823,"title":"Meta Model","url":"14842.htm#o696","text":"Defines common characteristics of Convergent Billing entities that can be defined independently of the entities.  Context:  Convergent Billing  See also Unified Modelling Language (UML) and Abstract Model.  "},{"id":824,"title":"MIB","url":"14842.htm#o697","text":"Refer to Management Information Base (MIB).  "},{"id":825,"title":"Middleware","url":"14842.htm#o698","text":"Software that connects two otherwise separate applications or products and passes data between them.  Context:  Singleview  "},{"id":826,"title":"MIME","url":"14842.htm#o57962","text":"Internet standard that extends the format of email to support:  Text in character sets other than ASCII  Non-text attachments  Message bodies with multiple parts  Header information in non-ASCII character sets.  Context:  Convergent Billing, Process Engine web client, Customer Management   See also POP3, SMTP, SSMTP, and TNEF.  "},{"id":827,"title":"MMS","url":"14842.htm#o45985","text":"Acronym for Multimedia Messaging Service.  "},{"id":828,"title":"Model–view–controller","url":"14842.htm#o77629","text":"Model&#8211;view&#8211;controller (MVC) is a software architectural pattern for implementing user interfaces on computers. It divides a given software application into three interconnected parts, separating internal representations of information from the ways that information is presented to or accepted from the user.   Traditionally used for desktop graphical user interfaces (GUIs), this architecture has become extremely popular for designing web applications.  Context: Customer Management, Process Engine  "},{"id":829,"title":"Modal Window","url":"14842.htm#o699","text":"Window that contains static visual components and one or more buttons for a user response.  When a modal window is open, users cannot interact with other windows.   Context:  Convergent Billing, Customer Management, Process Engine  "},{"id":830,"title":"MVEL","url":"14842.htm#o70414","text":"See MVFLEX Expression Language (MVEL).  "},{"id":831,"title":"MVFLEX Expression Language (MVEL)","url":"14842.htm#o70413","text":"Hybrid, dynamic Java expression language for the Java platform.  It can be embedded.   Context:  Singleview  See also Java.  "},{"id":832,"title":"N","url":"14843.htm","text":""},{"id":833,"title":"Named Configuration","url":"14843.htm#o59487","text":"Collection of configuration information and parameters identified by a unique name in a Tomcat instance.   Context:  Process Engine web client  See also Tomcat Instance.  "},{"id":834,"title":"Namespace","url":"14843.htm#o52463","text":"Namespace is used in XML to provide uniquely named elements and attributes in a group.  In Convergent Billing, namespaces are used to create a context for grouping related external definitions.  The context guarantees that all external definitions that are members of the group are uniquely identifiable.   Context:  Singleview, Convergent Billing, Configuration Studio  See also External Definition Namespace.  "},{"id":835,"title":"Node","url":"14843.htm#o703","text":"Item in a hierarchy or network.  It can refer to a customer node, or a server or machine.  See also Instance, Customer Node, Child Customer Node, Parent Customer Node, Root Customer Node, and Customer Hierarchy.  Context:  Singleview  "},{"id":836,"title":"Non-billable GL Guidance Entity","url":"14843.htm#o11319","text":"GL guidance entity used for amounts not included on an invoice (for example, prepaid charges).   Context:  Convergent Billing, Configuration Studio  See also GL Guidance Entity, Accrual GL Guidance Entity, Actual GL Guidance Entity, and Deferral GL Guidance Entity.  "},{"id":837,"title":"Non-cached Class","url":"14843.htm#o704","text":"Class that is not cached on the Process Engine client PC.  Data in non-cached classes are stored only on the Process Engine server and are downloaded to the client PC when required.  Context:  Process Engine  See also Process Engine Client, Cached Class, and Static Class.  "},{"id":838,"title":"Non-fact Based Class","url":"14843.htm#o706","text":"Class that does not have a fact-based structure.  A non-fact based class is not extensible and is maintained using a class-specific maintenance tool.  The Calendar class is an example of a non-fact-based class.  Context:  Process Engine  "},{"id":839,"title":"Non-stored Fact","url":"14843.htm#o57980","text":"Fact that is held temporarily in cache memory.  Context:  Singleview  See also Fact and Stored Fact.  "},{"id":840,"title":"Non-tenantable","url":"14843.htm#o75957","text":"An entity that is always untenanted, regardless of whether or not the Singleview implementation it is used in is tenanted.   Context:  Convergent Billing  See also Tenant, Tenanted, Untenanted, and Tenantable.  "},{"id":841,"title":"Normal Update","url":"14843.htm#o707","text":"Method of updating a data record in which the record is saved for future reference, and any changes are made to a copy of the data record.  Normal updates allow the history of the data record to be maintained.  A normal update made to a record on the same day that a record is created does not create a new record; the record is merely revised.  Context:  Convergent Billing  See also Date Range Update and Direct Update.  "},{"id":842,"title":"Normalisation","url":"14843.htm#o708","text":"Refer to Event Normalisation.  "},{"id":843,"title":"Normalised Error Event","url":"14843.htm#o709","text":"Type of event output when either of the following conditions occurs:  If an Event Normalisation (ENM) process successfully normalises an alpha event, but does not evaluate all normalised event file type expressions for that event, the event is output as a normalised error event.  Normalised error events are sent only to an Event Rating Output (ERO) process for output; they are not sent to any Event Rating (ERT) process, and so are not rated.  If a normalised event is sent to one or more ERT processes, but no charges are generated for the event, the ERO process outputs the event as a normalised error event.  Context:  Convergent Billing  See also Alpha Event, Event Normalisation (ENM) Process, Event Rating Output (ERO) Process, and Normalisation.  "},{"id":844,"title":"Normalised Event","url":"14843.htm#o710","text":"Raw event data record converted into a standard record format.  The conversion is performed using the Event Normalisation (ENM) process.  Context:  Convergent Billing  See also Event Normalisation.  "},{"id":845,"title":"Normalised Event File","url":"14843.htm#o711","text":"File (either physical or logical) from which a group of normalised events were processed.  Context:  Convergent Billing  See also Normalised Event and Normalised Event Type.  "},{"id":846,"title":"Normalised Event File Record","url":"14843.htm#o712","text":"Record constructed by the Event Normalisation (ENM) process for each file it processes.  The file record includes information such as the file name, unique file ID, exchange name, file type, normalised event type, and start and end time of processing.  Context:  Convergent Billing  See also Event Normalisation (ENM) Process and Normalised Event File.  "},{"id":847,"title":"Normalised Event File Transaction","url":"14843.htm#o11305","text":"Sales and Cash Receipts Journal financial transaction generated during rating when usage normalised events are rated and rating charges are generated.  Context:  Convergent Billing  See also Sales and Cash Receipts Journal, Invoice Transactions, Payment Transactions, and Adjustment Transactions.  "},{"id":848,"title":"Normalised Event File Type","url":"14843.htm#o713","text":"Defines how events are decoded and normalised by an Event Normalisation (ENM) process.  Each file (either physical or logical) processed by an ENM has an associated file type.  Context:  Convergent Billing, Configuration Studio  See also Data Interface Language (DIL), Event File, Event Normalisation (ENM) Process, Normalised Event File, and Normalised Event Type.  "},{"id":849,"title":"Normalised Event Type","url":"14843.htm#o714","text":"Specifies the type of normalised event used to generate normalised events based on transactions occurring in Convergent Billing.  An event type is also used to derive additional information about a normalised event from the information supplied by external systems.   Context:  Convergent Billing  See also Normalised Event and Normalised Event File Type.  "},{"id":850,"title":"Notification Generator and Receiver","url":"14843.htm#o716","text":"Device that sends SNMP trap notifications.  The tresnmp server is a notification generator.   A notification receiver is a device that receives SNMP trap notifications.  Receivers are typically computers running network management software such as HP OpenView.  Context:  Convergent Billing  See also Simple Network Management Protocol (SNMP) and Trap.  "},{"id":851,"title":"Null Fact","url":"14843.htm#o717","text":"Fact with no assigned value is null.  Context:  Process Engine  "},{"id":852,"title":"O","url":"14844.htm","text":""},{"id":853,"title":"Object Details Box","url":"14844.htm#o719","text":"Right-hand area of the Process Engine Configuration Workbench tool, where details of the object selected in the object list box on the left are displayed.  Context:  Process Engine  See also Object List Box.  "},{"id":854,"title":"Object List Box","url":"14844.htm#o720","text":"Left-hand area of the Process Engine Configuration Workbench tool, where a list of items relevant to the current operation are displayed.  When an object is selected, the details are displayed in the object details box.  Context:  Process Engine  See also Object Details Box.  "},{"id":855,"title":"Obsolete Date","url":"14844.htm#o721","text":"Date that an item became (or will become) obsolete.  An obsolete item can be restored.  Context:  Process Engine  "},{"id":856,"title":"Obsolete Items","url":"14844.htm#o722","text":"Items no longer in use.  Obsolete items must be restored before they can be used again.  Context:  Process Engine  "},{"id":857,"title":"Obsolete Tab","url":"14844.htm#o723","text":"Tab in the object list box of the Process Engine Configuration Workbench used to list all obsolete items maintained by a specific maintenance tool.  Context:  Process Engine  See also Process Engine Configuration Workbench.  "},{"id":858,"title":"OCS-CDR","url":"14844.htm#o51884","text":"Refer to Online Charging System-Charging Data Record (OCS-CDR).  "},{"id":859,"title":"OLE Automation Interface","url":"14844.htm#o724","text":"Mechanism for other processes to use Convergent Billing Form Automation features.  A similar interface is provided for internal expressions using the EPM.  Context:  Convergent Billing  See also Form Automation, Expression Parser Module (EPM), and Interface Description Language (IDL).  "},{"id":860,"title":"Online Charging System","url":"14844.htm#o51501","text":"Charging system where account balances are charged and used to authorise service provision in real time.  Commonly used to administer prepaid services.  Context:  Convergent Billing  "},{"id":861,"title":"Online Charging System-Charging Data Record (OCS-CDR)","url":"14844.htm#o51886","text":"Data records specific to an online charging system.  The OCS-CDR includes such information as, time of call setup, duration of the call and amount of data transferred.  This information is passed onto a post processing system for event rating.  Context:  Convergent Billing  See also Online Charging System.  "},{"id":862,"title":"Online Transaction Processing (OLTP)","url":"14844.htm#o725","text":"Generic term used to refer to any interaction with a system that requires a response within a specified time.  When used in the context of Convergent Billing, OLTP refers to interactions that:  Are initiated externally to the Convergent Billing server, from either the client or an external system.  An interaction initiated from the client requires a response based on an external requirement (for example, a user requiring information to handle a customer enquiry).  Are constrained to Convergent Billing.  Data changes or reads required to service the OLTP request do not need to include calls directed from Convergent Billing to external systems.  Require a response in a specified time.  OLTP includes payments, customer updates, database queries, and immediate, TRE-initiated bill runs for a customer.  For Singleview documentation, OLTP excludes batch billing, Commerce Engine, reports, and GL uploads.  Context:  Convergent Billing, High Availability  See also View.  "},{"id":863,"title":"Open Item Accounting","url":"14844.htm#o726","text":"Accounting term.  Accounting method used to track outstanding balances, issue invoices and statements, and apply adjustments on customer accounts in the general ledger.  The open item method defines each item as distinct throughout its financial lifecycle, and is settled independently of other items.  An item may be a call record on an invoice, a group of like items (for example, mobile call charges), or an invoice.  Context:  Singleview  See also Balance Forward.  "},{"id":864,"title":"Operation","url":"14844.htm#o9905","text":"Represents processing performed automatically by Process Engine when processing is activated by, for example, clicking on a button or selecting a menu option.  The operations represented by buttons in the Process Engine client are specified by the Process Engine configurer from a group of available operations (for example, to create an object).   Context:  Process Engine  "},{"id":865,"title":"Operational Parameter","url":"14844.htm#o56227","text":"Operational parameters are used to influence the operation of an interface. A default value can be specified when defining operational parameters in an interface template. Operational parameters can be modified in an interface definition.   Context:  Singleview  See also Static Parameter.  "},{"id":866,"title":"Operational Support System (OSS)","url":"14844.htm#o729","text":"Disparate set of systems that directly support the daily operations of the telecommunications infrastructure.  Context:  Convergent Billing, Commerce Engine  "},{"id":867,"title":"Optional and Editable","url":"14844.htm#o730","text":"Initial state for a fact that may or may not contain a value, and can be edited by the user.  Context:  Process Engine  See also Initial State and Fact.  "},{"id":868,"title":"Optional and Read-only","url":"14844.htm#o731","text":"Possible value for the initial state of a fact.  Optional and read-only facts may contain a value, and cannot be edited by the user.  Context:  Process Engine  See also Initial State and Fact.  "},{"id":869,"title":"Oracle","url":"14844.htm#o732","text":"Third party product that provides sophisticated relational database functionality used to store the data for Singleview.  Oracle is also the application server for Singleview.  See also Oracle RAC.  "},{"id":870,"title":"Oracle RAC","url":"14844.htm#o733","text":"Oracle feature allowing the simultaneous operation of instances within a cluster that use the same set of data files in a disk subsystem.  Oracle RAC can be used as part of a high availability system strategy for Singleview.  See also Oracle.  "},{"id":871,"title":"Oracle/Cache Transaction Manager Server (SVTMS)","url":"14844.htm#o58772","text":"Tuxedo server that is a transaction manager, coordinating rating subtotal, account , and temporal entitlement cache updates and Oracle database operations as a transaction.  The server ensures all database and cache updates are committed or rolled back.  Context:  Commerce Engine  "},{"id":872,"title":"OSS","url":"14844.htm#o735","text":"Refer to Operational Support System (OSS).  "},{"id":873,"title":"Output Device","url":"14844.htm#o736","text":"Defines the UNIX command used to send the output to the selected device, and other settings to control the output.  Context:  Convergent Billing, Configuration Studio  "},{"id":874,"title":"Output Method","url":"14844.htm#o737","text":"Consists of an output method type and one or more output devices.  If the output is split over two or more output devices, the output method can specify the order in which the output is printed.  Context:  Convergent Billing, Configuration Studio  See also Output Device and Output Method Type.  "},{"id":875,"title":"Output Method Type","url":"14844.htm#o738","text":"Specifies the location in the database of the query view used to retrieve the data for output and any updates to database tables made by the output process.  Context:  Convergent Billing, Configuration Studio  See also Output Method.  "},{"id":876,"title":"P","url":"14845.htm","text":""},{"id":877,"title":"Parallel Tariffing","url":"14845.htm#o739","text":"Ability to apply different tariffs to the same event record.  In the rating engine, this facility makes it possible to apply separate tariffs to a normalised event record to calculate charges to customers, commissions, taxes (such as VAT or GST), general levies, loyalty points, and competitor's comparable charges.  Parallel tariffing is also supported in the billing engine where different tariffs can be applied to the costed event records output from the rating engine.  Context:  Convergent Billing  See also Billing Engine and Rating Engine.  "},{"id":878,"title":"Parameter","url":"14845.htm#o740","text":"Placeholder for a value in the definition of a custom search, expression, or function.  Context:  Convergent Billing, Process Engine, Customer Management  "},{"id":879,"title":"Parent Action","url":"14845.htm#o741","text":"Action in an action group with sub-actions assigned.  A parent action is a consolidation of its child action activities; it does not represent an activity in its own right.  A root action is always a parent action.  Context:  Customer Management, Process Engine  See also Action and Action Group.  "},{"id":880,"title":"Parent Customer Node","url":"14845.htm#o742","text":"Node within a customer hierarchy with at least one child customer node.  A parent customer node may also be a child customer node of a node located at a higher level in a customer hierarchy.  Context:  Convergent Billing, Customer Management  See also Child Customer Node, Customer Hierarchy, and Root Customer Node.  "},{"id":881,"title":"Parent Table","url":"14845.htm#o743","text":"Contains variables that can be used in the default expression of an entity validation definition.  Context:  Convergent Billing  See also Entity Validation and Validation Table.  "},{"id":882,"title":"Partition Map","url":"14845.htm#o745","text":"Defines a partition-referenced location in a distributed database configuration.  Context:  Convergent Billing  See also Partitioning and Partition Range.  "},{"id":883,"title":"Partition Range","url":"14845.htm#o746","text":"Defines the number of table partitions and the Convergent Billing instances that can access data in the partition.  A partition range is supported only in Convergent Billing distributed database configuration.  Context:  Convergent Billing  See also Partitioning and Partition Map.  "},{"id":884,"title":"Partitioning","url":"14845.htm#o744","text":"Allows tables, indexes, and indexed organised tables to be subdivided into smaller parts, enabling these database objects to be managed and accessed at a fine level of granularity.  Context:  Convergent Billing  See also Partition Map and Partition Range.  "},{"id":885,"title":"Payment","url":"14845.htm#o747","text":"Amount paid by a customer.  The payment is recorded against a specific customer's account and optionally against one or more specified invoices.  Context:  Convergent Billing, Customer Management  See also Payment Batch and Payment Type.  "},{"id":886,"title":"Payment Batch","url":"14845.htm#o748","text":"Set of individual payments of the same type processed at the same time.  Each payment within the batch can be viewed or modified until the batch is applied (processed).  A payment batch can be created incrementally (one or more payments at a time) over a period of time.  Context:  Convergent Billing  See also Payment and Payment Type.  "},{"id":887,"title":"Payment Transaction","url":"14845.htm#o11307","text":"Sales and Cash Receipts Journal financial transaction generated when a payment is applied.  Context:  Convergent Billing  See also Sales and Cash Receipts Journal, Normalised Event File Transactions, Invoice Transactions, and Adjustment Transactions.  "},{"id":888,"title":"Payment Type","url":"14845.htm#o749","text":"Defines common parameters for payment records; for example, defaults or entity validation for payments or payment batches specified with that type.  Context:  Convergent Billing, Customer Management  See also Payment and Payment Batch.  "},{"id":889,"title":"PEM","url":"14845.htm#o55392","text":"See Privacy Enhanced Mail.  "},{"id":890,"title":"Percent Fact","url":"14845.htm#o750","text":"Fact with an attribute type of Percent.  Percent facts are displayed as normal fields in layouts, and accept decimal values.  Context:  Process Engine  "},{"id":891,"title":"Performance Instrumentation","url":"14845.htm#o58392","text":"Software used for monitoring performance of specific data or sections of code.  Context: Process Engine web client  See also Instruments.  "},{"id":892,"title":"Perl","url":"14845.htm#o752","text":"High-level script programming language that is similar in syntax to the C language.  Context:  Convergent Billing, Process Engine  "},{"id":893,"title":"Permission","url":"14845.htm#o55308","text":"Set of controls that determine how data can be manipulated by a specified user or security group. When a profile is assigned a security group, the view permission is automatically assigned. Permissions in Process Engine map to Convergent Billing access levels.  Context:  Process Engine  See also Access Level and Security Group.  "},{"id":894,"title":"Person","url":"14845.htm#o754","text":"Refer to Contact.  "},{"id":895,"title":"Person Type","url":"14845.htm#o755","text":"Specifies any defaults or entity validation for people specified with that type.  If required, an icon can be specified to identify each person type.  Context:  Convergent Billing, Customer Management  See also Contact.  "},{"id":896,"title":"Planned Outage","url":"14845.htm#o756","text":"Planned time when Singleview will not be available (normally for maintenance or an upgrade).  Context:  Convergent Billing, Commerce Engine.  "},{"id":897,"title":"Pluggable Authentication Module (PAM)","url":"14845.htm#o42505","text":"Modules that provides external authentication of users using third party authentication services.  Context:  Singleview  See also External Authentication and Internal Authentication.  "},{"id":898,"title":"POP3","url":"14845.htm#o58195","text":"Standard protocol for receiving emails.  Context:  Process Engine web client, Customer Management  See also MIME, SMTP, SSMTP, and TNEF.  "},{"id":899,"title":"Post-commit Expression","url":"14845.htm#o757","text":"In entity validation, an expression to perform actions after the active form is saved and data committed to the database.  The expressions are used to display messages or execute actions.   Context:  Convergent Billing  See also Entity Validation, Pre-commit Validation, In-transaction Expression, and Row Validation.  "},{"id":900,"title":"Post-eligibility Expression","url":"14845.htm#o758","text":"Evaluated after an invoice template is generated.  If the expression returns a value of FALSE, the template is 'rolled back' and not included in the invoice image.  Context:  Convergent Billing  See also Invoice Template and Pre-eligibility Expression.  "},{"id":901,"title":"Precedent Action","url":"14845.htm#o759","text":"Action within an action group that must be complete before the next action in a sequence can start.  Context:  Customer Management, Process Engine  See also Action and Action Group.  "},{"id":902,"title":"Pre-commit Validation","url":"14845.htm#o760","text":"In entity validation, validates user actions when the active form is saved in the order specified as part of the pre-commit process.    Context:  Convergent Billing  See also Entity Validation, Post-commit Expression, In-transaction Expression, and Row Validation.  "},{"id":903,"title":"Predictive Dialling","url":"14845.htm#o763","text":"Technology that automatically calls a telephone number based on a predefined list.  If the call is answered, it is routed to an available user.  "},{"id":904,"title":"Pre-eligibility Expression","url":"14845.htm#o764","text":"Evaluated before an invoice template being generated.  If the expression returns a value of FALSE, the template is not included in the invoice image.  Context:  Convergent Billing  See also Invoice Template and Post-eligibility Expression.  "},{"id":905,"title":"Prepaid without Statements","url":"14845.htm#o62351","text":"Customer nodes configured to be prepaid accounts that do not perform prepaid billing and invoice processes for prepaid customers.  A prepaid without statements customer allows payments and charges to be replicated by the rating processes. Statements are not generated for a prepaid without statements customer.  Context:  Convergent Billing, Customer Management  See also Child Customer Node, Customer Hierarchy, Parent Customer Node, Reporting Level, and Root Customer Node.  "},{"id":906,"title":"Prerequisite Schedule","url":"14845.htm#o765","text":"A schedule whose tasks must be executed before the execution of tasks of another schedule.  For example, if schedule P is a prerequisite to schedule D, tasks on schedule P must execute before tasks on schedule D.  A condition can be set on each prerequisite schedule.  The condition specifies the execution status of tasks belonging to the prerequisite schedule.  This condition must be met before tasks belonging to the dependent schedule are executed.  For example, 'do not execute tasks of schedule D until tasks of schedule P have completed successfully'.   Context:  Convergent Billing  See also Dependent Schedule, Prerequisite Task, and Schedule.  "},{"id":907,"title":"Prerequisite Task","url":"14845.htm#o766","text":"Task that must be executed before another task.  For example, if task P must execute before task D, task P is considered a prerequisite to task D, and task D is considered dependent on task P.   Conditions regarding the status of execution of prerequisite tasks can be set to specify the circumstances under which a dependent task is executed.  For example, 'do not execute task D until task P has completed successfully' or 'do not execute task D until task P is executing'.  Context:  Convergent Billing  See also Dependent Task, Prerequisite Schedule, and Task.  "},{"id":908,"title":"Pre-schedule Count","url":"14845.htm#o767","text":"Number of pending tasks for a specified schedule being generated and maintained by the Scheduled Task Dispatcher (STD) on its pending task queue and running queue.  New tasks are not defined until the total number of tasks in the pending and running queues is less than the pre-schedule count.  Context:  Convergent Billing  See also Schedule, Task, and Task Queue.  "},{"id":909,"title":"Primary Contact","url":"14845.htm#o768","text":"Main or initial contact associated with a customer.  If more than one contact is listed for a specific customer, one of those contacts is specified as the primary contact.  Context:  Convergent Billing, Customer Management  See also Contact and Secondary Contact.  "},{"id":910,"title":"Primary Security Group","url":"14845.htm#o55552","text":"Security group associated with operational data, inherited from the profile of the user who created it.  Context:  Convergent Billing, Process Engine, Configuration Studio  See also Security Group, Configuration Security Group, Access Level, User Profile, and Form Role.  "},{"id":911,"title":"Priority","url":"14845.htm#o769","text":"Context:  Convergent Billing  Attribute of a tariff that determines which tariff is applied in a product definition.  A tariff with a higher priority (lower numerical value) overrides a tariff with a lower priority (higher numerical value) only if they have the same type, application environment, and context.  A tariff with no priority cannot be overridden.  Context:  Process Engine  Used for cases and actions to be assigned a priority.  See also Tariff and Product Definition.  "},{"id":912,"title":"Privacy Enhanced Mail","url":"14845.htm#o55395","text":"Set of standards for adding a security overlay to emails. It is also used by openSSl for representing public and private keys and signatures.  Context: Process Engine web client  "},{"id":913,"title":"Private Search","url":"14845.htm#o770","text":"Custom search defined by a user for their own use.  Only the creator and a Process Engine configurer can access a private search.  Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":914,"title":"Process Definition","url":"14845.htm#o69446","text":"JBoss Business Process Management (jBPM) term for a business process written using Business Process Model and Notation (BPMN), graphically or otherwise.  Context:  Singleview  See also Business Process, Business Process Model and Notation (BPMN), JBoss Business Process Management (jBPM), and Process Instance.  "},{"id":915,"title":"Process Engine","url":"14845.htm#o771","text":"Process Engine is highly configurable core software that provides the foundation for the development of solutions to meet specific business requirements.  The look and feel of the end-user interface, customer-specific business logic, and triggers to drive business processes are some of the elements that can be tailored to meet business requirements using Process Engine.  Process Engine business solutions are built on the core Process Engine technology.  Process Engine consists of three applications:  Process Engine client, Process Engine Configuration Workbench, and the Process Engine Administration Tool.  Context:  Process Engine  See also Process Engine Business Solutions, Process Engine Client, Process Engine Configuration Workbench, and Process Engine Administration Tool.  "},{"id":916,"title":"Process Engine Administration Tool","url":"14845.htm#o772","text":"Set of tools used by system administrators to monitor Process Engine.  Context:  Process Engine.  See also Process Engine.  "},{"id":917,"title":"Process Engine Business Solutions","url":"14845.htm#o773","text":"Process Engine business solutions are built on the core Process Engine technology.  Examples include Customer Management, a call centre front end.  New business solutions can be developed using Process Engine, and existing Process Engine business solutions can be further configured to meet client requirements.  Context:  Customer Management, Process Engine  See also Process Engine.  "},{"id":918,"title":"Process Engine Client","url":"14845.htm#o774","text":"Desktop application on which Process Engine business solutions are run (for example, Customer Management).  Context:  Process Engine  See also Process Engine and Process Engine Business Solutions.  "},{"id":919,"title":"Process Engine Configuration Workbench","url":"14845.htm#o775","text":"Series of tools used by configurers to tailor Process Engine business solutions and Process Engine client operation.  Context:  Process Engine  See also Process Engine, Process Engine Business Solutions, and Process Engine Client.  "},{"id":920,"title":"Process Engine Configurer","url":"14845.htm#o776","text":"Person responsible for using the Process Engine Configuration Workbench to tailor and maintain the Process Engine business solution configuration.  Context:  Process Engine  "},{"id":921,"title":"Process Instance","url":"14845.htm#o69461","text":"Single execution of a process definition.  Processes are generally long running, with the process instance information being persisted.  Multiple process instances can be running at any one time.  Context:  Singleview  See also Process Definition.   "},{"id":922,"title":"Process Start Date","url":"14845.htm#o778","text":"Date the normalised event file was rated by Convergent Billing to determine the period under which the aggregate falls.  Context:  Convergent Billing  See also Charge Start Date.  "},{"id":923,"title":"Processing Context","url":"14845.htm#o777","text":"Refer to Context.  "},{"id":924,"title":"Product","url":"14845.htm#o779","text":"Refer to Base Product and Companion Product.  "},{"id":925,"title":"Product Component","url":"14845.htm#o780","text":"One of a set of component definitions that together form a product definition.  A product definition can include combinations of the following components:  Service types  Equipment types  Facility groups  Derived attributes  Tariff/charge category pairs  Subtotals.  Context:  Convergent Billing, Customer Management, Configuration Studio  See also Product Definition.  "},{"id":926,"title":"Product Definition","url":"14845.htm#o60123","text":"Combination of product components that form a specific type of product.  Individual product instances based on the product type or definition can be created.  Context:  Convergent Billing, Customer Management, Configuration Studio  See also Base Product, Product, Product Component, and Product Offer.  "},{"id":927,"title":"Product Group","url":"14845.htm#o782","text":"Base products can be grouped to allow related products to be located more easily when assigning products to customers.  Each product group is displayed on a separate 'tab' section on the Customer Hierarchy form.  Used in Customer Management for filtering the Product Catalogue.  Context:  Convergent Billing, Customer Management, Configuration Studio  See also Base Product.  "},{"id":928,"title":"Product Icon","url":"14845.htm#o783","text":"Icon associated with a specific base product.  The same icon can be used for more than one product.  Product icons are displayed in product groups on the Customer Hierarchy form.  Context:  Convergent Billing  See also Base Product and Product Group.  "},{"id":929,"title":"Product Instance","url":"14845.htm#o784","text":"Specific combination of services and the associated tariff structure offered to a customer based on the framework provided by the corresponding product definition.  The original product definition is preserved, with the product instance being tailored to a specific customer's requirements.  Any changes made to the product definition affect only product instances created after the changes are made, not existing product instances.  Referred to as a Purchased Product in Customer Management.  Context:  Convergent Billing, Customer Management  See also Product Definition and Product Model.  "},{"id":930,"title":"Product Merge","url":"14845.htm#o785","text":"Mechanism of combining services from two or more product instances.  Context:  Convergent Billing  See also Product Split.  "},{"id":931,"title":"Product Model","url":"14845.htm#o60127","text":"Models a product as a set of component definitions that together form the framework on which a product package can be created on behalf of a customer.  Used in Customer Management to determine how to set up the Product Catalogue.  Context:  Convergent Billing, Customer Management  See also Product and Product Offer.  "},{"id":932,"title":"Product Offer","url":"14845.htm#o60113","text":"Collection of products, other product offers, and various charging modifications and restrictions. Used in constructing a product package for a customer.  Context:  Convergent Billing, Configuration Studio  See also Product.  "},{"id":933,"title":"Product Package","url":"14845.htm#o60114","text":"One or more products assigned to a customer.  The product package may result in a 'sale' or require further refinement before being accepted by the customer.  Context:  Convergent Billing, Customer Management  See also Product.  "},{"id":934,"title":"Product Split","url":"14845.htm#o788","text":"Mechanism of removing one or more services from a specified product instance.  Context:  Convergent Billing  See also Product Merge.  "},{"id":935,"title":"Profile","url":"14845.htm#o789","text":"Refer to User Profile.  "},{"id":936,"title":"Progress","url":"14845.htm#o55262","text":"Process of electronically forwarding a query or complaint to a nominated work group for resolution.  The query or complaint is progressed from the current work group to the next work group.  If the query cannot be resolved by the first work group, it is progressed to another.  All progressions are recorded so that at any stage the progression history can be viewed.  Context:  Convergent Billing, Customer Management  See also Query and Work Group.  "},{"id":937,"title":"Progress Text","url":"14845.htm#o55263","text":"Text on which a work group bases its actions.  The progress text is created as resolution text by the previous work group before progressing the query to the current work group.  For the initial progression, the progress text is a copy of the query text.  Context:  Convergent Billing  See also Progress, Progression, Query Text, and Resolution Text.  To progress a query:  View the appropriate customer query.  Click the Progress button.  A message is displayed, prompting confirmation that the query is to be progressed to the specified work force.  By default, the work force displayed is that associated with the query type selected.  If required, select an alternative work force.  Click Yes to progress the query to the nominated work force.  Need more information on queries?  "},{"id":938,"title":"Progression","url":"14845.htm#o55265","text":"Document used to record the actions taken by a work group to resolve a query.  If the query cannot be resolved by the current work group, that work group adds resolution text to the progression before forwarding the query to another work group.    Each progression therefore contains progress text (detailing the actions taken by a previous work group) and resolution text (detailing the actions performed by the current work group to resolve the query).  Context:  Convergent Billing  See also Progress, Progress Text, Query Text, and Resolution Text.  "},{"id":939,"title":"Progression History","url":"14845.htm#o793","text":"Date-time record of the progressions required to resolve a query.  Context:  Convergent Billing, Customer Management  See also Progress and Progression.  "},{"id":940,"title":"Progressive Subtotal","url":"14845.htm#o794","text":"Accessed by the billing engine after each event is processed.  The partial result of the subtotal is accessible after the processing of each subtotal term.  Progressive subtotals are not supported in the rating engine.  The context of the expression where the subtotal is used defines whether a partial or complete result is returned.  Progressive subtotals support contexts of Service, Customer Node, and Customer, but not Normalised Event.  Context:  Convergent Billing  See also Aggregation, Subtotal, and Subtotal Term.  "},{"id":941,"title":"Prorate In","url":"14845.htm#o59553","text":"Prorate amount determined before a charge is made. That is, the reduced period and the proportionally reduced charge determined in advance of the charge being applied.   Context:  Singleview  See also Prorating.  "},{"id":942,"title":"Prorate Out","url":"14845.htm#o59554","text":"Retrospective prorating of charges where the period is shortened after the full amount has been charged. This is most common when a service is cancelled half way through a period that has been charged in advance. Pro-rating out involves refunding a portion of the charge.  Context:  Singleview  See also Prorating.  "},{"id":943,"title":"Prorating","url":"14845.htm#o795","text":"Process of aligning the recurring tariff cycle with the bill cycle.  Context:  Convergent Billing  See also Bill Cycle and Recurring Tariff Cycle.  "},{"id":944,"title":"Public Cache","url":"14845.htm#o796","text":"Area of memory on the server reserved for data that is also stored in the RDBMS.  By retrieving some objects directly from the public cache, without the requirement for a database access, the speed of some operations is increased.  Context:  Process Engine  "},{"id":945,"title":"Public Search","url":"14845.htm#o797","text":"Custom search that can be used by all Process Engine web client users.  Only a Process Engine configurer can define public searches.  Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":946,"title":"Q","url":"14846.htm","text":""},{"id":947,"title":"Query","url":"14846.htm#o53710","text":"Enquiry made by a customer or contact that is recorded.  The resolution of that enquiry generally results in information being passed back to that customer or contact.  A query can range from an enquiry about available products by a prospective customer, to a complaint from a customer about charges on an invoice.  If the query cannot be resolved immediately, it is progressed to a work group for resolution.  The query facility is also used to record internal enquiries.  For example, the query facility can be used to enquire about a customer's credit rating by raising a query and forwarding it to an organisation's finance department.  Context:  Convergent Billing, Customer Management  See also Progress, Progression, and Work Group.  "},{"id":948,"title":"Query Text","url":"14846.htm#o53711","text":"Original text documenting a query.  If a query is progressed to a work group for resolution, a copy of the query text becomes the progress text of the initial progression.  Context:  Convergent Billing, Customer Management  See also Progress Text, Progression, Query, and Resolution Text.  Text added to a progression by a work group.  If this work group has not resolved the query, the resolution text becomes the progress text for the next work group.  Context:  Convergent Billing  See also Progress Text, Progression, and Query Text.  "},{"id":949,"title":"Query Type","url":"14846.htm#o800","text":"Refer to Customer Query Type.  "},{"id":950,"title":"Query Workflow","url":"14846.htm#o801","text":"Refer to Workflow.  "},{"id":951,"title":"Queued Function","url":"14846.htm#o39466","text":"Function placed in a queue for execution.  Queued functions do not require the user to wait for completion.  The user is notified if the function is called successfully.  Context:  Convergent Billing, Process Engine  See also Asynchronous Function, Built-in Function, Function, and Synchronous Function.  "},{"id":952,"title":"Quote Data","url":"14846.htm#o76124","text":"Data required for generating quotes for existing customers and prospects.   Associated entities used to produce a quote for existing customers are duplicated.  All quote data is hidden from general users.   Context:  Convergent Billing, Customer Management, Process Engine  See also Quote Security Group.  "},{"id":953,"title":"Quote Mode","url":"14846.htm#o76126","text":"Mode in which an immediate QA bill run generates temporary bills for quoting purposes.   Regular usage events are excluded from the QA bill run in quote mode.  Context:  Convergent Billing, Customer Management, Process Engine  See also Bill Run.  "},{"id":954,"title":"Quote Security Group","url":"14846.htm#o76122","text":"A security group used to control access to quote data in the database.  All data required for generating quotes is attached to the assigned quote security group. For a tenanted system, each tenant must create their own quote security group for their own customers.   All quote data is hidden from general users.   Context:  Convergent Billing, Customer Management, Process Engine  See also Security Group, Access Level, Permissions, User Profile, Work Group, Function Role, and Form Role.  "},{"id":955,"title":"R","url":"14847.htm","text":""},{"id":956,"title":"RAC Cluster","url":"14847.htm#o802","text":"Full set of Oracle instances on more than one node that forms a single logical database.  Context:  Convergent Billing, High Availability  See also Oracle RAC and RAC Instance.  "},{"id":957,"title":"RAC Instance","url":"14847.htm#o803","text":"Set of Oracle processes on a single machine that is a part of the Oracle RAC cluster.  Context:  Convergent Billing, High Availability  See also Oracle RAC and RAC Cluster.  "},{"id":958,"title":"Rated Event","url":"14847.htm#o804","text":"Normalised event output by an Event Rating Output (ERO) process after being rated successfully by one or more Event Rating (ERT) processes to produce one or more charges.  Context:  Convergent Billing  See also Charge, Event Rating Output (ERO) Process, Event Rating (ERT) Process, and Normalised Event.  "},{"id":959,"title":"Rating Circuit","url":"14847.htm#o806","text":"Operational mode of Real-time Rating (RTR) in which the RTR receives events from a remote system and returns the resulting events and charges to the same system.  Context:  Convergent Billing  See also Rating Pipeline and Real-time Rating (RTR).  "},{"id":960,"title":"Rating Engine","url":"14847.htm#o807","text":"Performs rating of event records, using the Event Rating Broker (BKR), Event Normalisation (ENM), Event Rating (ERT), and Event Rating Output (ERO) processes, or rating servers.  Constructs charges based on service data and event records using tariffs.  Context:  Convergent Billing  See also Event Rating Broker (BKR) Process, Event Rating Output (ERO) Process, Event Rating (ERT) Process, Rating Server, and Tariff.  "},{"id":961,"title":"Rating Error Event","url":"14847.htm#o808","text":"Normalised event flagged, as having an error, by an Event Rating (ERT) process during rating.  Errors that are flagged can occur during the evaluation of a tariff expression, or resulting from a service being undefined.  Any charges that have been generated for the event are discarded by the Event Rating Output (ERO) process and are not output.  Context:  Convergent Billing  See also Event Rating Output (ERO) Process, Event Rating (ERT) Process, and Normalised Event.  "},{"id":962,"title":"Rating Pipeline","url":"14847.htm#o809","text":"Operational mode of Real-time Rating (RTR) in which the RTR receives events from one remote system and sends the resulting events and charges to another system.  Context:  Convergent Billing  See also Rating Circuit and Real-time Rating (RTR).  "},{"id":963,"title":"Rating Servers","url":"14847.htm#o810","text":"TRE servers that provide services to rate an event in real time.  The servers are trerate and trerate_tran.    trerate is a non-transactional server and, dependent on configuration, operates in the one of the following modes:  Rate and return, which provides functions to rate and return events and charges.  Rate and store, which provides functions to rate and store events and charges in the database.  trerate_tran is a transactional event rate and store server, which provides functions to rate and store events, charges, and cache updates in the database in the context of a transaction.  Context: Convergent Billing, Commerce Engine  See also Balance Management, Reservation, Transaction Engine, and Tuxedo Service.  "},{"id":964,"title":"Rating Subtotal Cache (RSC)","url":"14847.htm#o811","text":"Contains subtotal values (aggregates) at rating time.  The cache is used by the rating engine.  Context:  Convergent Billing  See also Rating Engine.  "},{"id":965,"title":"Raw Event","url":"14847.htm#o812","text":"Event generated by a switch or other device.  The format of data in a raw event is typically device specific.  Context:  Convergent Billing  See also Alpha Event.  "},{"id":966,"title":"RDBMS","url":"14847.htm#o813","text":"Relational Database Management System.  Context:  Convergent Billing  "},{"id":967,"title":"Real-time Monitoring (RTM)","url":"14847.htm#o11342","text":"Process that collects statistics in real time and executes alarms in response to changed alarm conditions.   Context:  Convergent Billing  "},{"id":968,"title":"Real-time Rating (RTR)","url":"14847.htm#o814","text":"Operating mode of rating engine that allows events to be processed as soon as possible.  Context:  Convergent Billing  See also Rating Circuit, Rating Engine, and Rating Pipeline.  "},{"id":969,"title":"Real-time Tariffs","url":"14847.htm#o59835","text":"Tariffs used with entitlements to consume allocations in real-time. Real-time tariffs can be used to generate activation, cancellation, or recurring charges.  Context:  Convergent Billing, Commerce Engine  See also Reservation, Balance Management, and Tariff.  "},{"id":970,"title":"Receivable Type","url":"14847.htm#o815","text":"Accounting entities used to:  Separate the amount owing on an invoice into different components.  When payments and adjustments are applied to an invoice, the payment or adjustment amount is allocated to the receivable type components using an allocation algorithm (for example, based on the priority of the receivable type).  Generate invoice receivable type history records that represent the accounts receivable sub-ledger.  The invoice receivable type history can be reconciled against the balances of the accounts receivable amounts uploaded to an external GL system.  Context:  Convergent Billing, Configuration Studio  See also GL Code and Invoice Receivable Type History Records.  "},{"id":971,"title":"Record","url":"14847.htm#o816","text":"Logical database entity consisting of multiple fields in which a complete set of information, such as the details for a single customer, are recorded.  Context:  Convergent Billing  See also Date Ranging and Effective Date.  "},{"id":972,"title":"Recurring Tariff","url":"14847.htm#o817","text":"Calculates recurring charges such as line rentals, appliance rentals, and plan fees.  The recurring tariff is associated with a product.  Recurring tariffs are applied to events generated by the Rental Generation Process (RGP).  Context:  Convergent Billing  See also Prorating, Recurring Tariff Cycle, and Rental Generation Process (RGP).  "},{"id":973,"title":"Recurring Tariff Cycle","url":"14847.htm#o818","text":"Period between individual Rental Generation Process (RGP) runs for a specific set of recurring tariffs.  Context:  Convergent Billing  See also Recurring Tariff and Rental Generation Process (RGP).  "},{"id":974,"title":"Redundancy","url":"14847.htm#o819","text":"Existence of redundant components that can replace a failed component; that is, a minimum of two of everything so that there is no single point of failure.  Context:  Convergent Billing, High Availability  See also Failure.  "},{"id":975,"title":"Redundant Disk Array","url":"14847.htm#o820","text":"Redundant disk arrays (for example, RAID) can be a method of improving the dependability and performance of disk storage by one or both of the following:  Each item of data to be written to the disk being broken up into smaller segments, with each segment written to a separate disk, which increases 'write to' disk performance, but not the data availability.  Redundant data shared on other disks so that any failed disk can be recreated, which increases availability, but may decrease performance.  Context:  Convergent Billing, High Availability  See also Redundancy.  "},{"id":976,"title":"Reference Code","url":"14847.htm#o821","text":"Unique code identifying a specific reference type item.  Context:  Convergent Billing  See also Reference Type.  "},{"id":977,"title":"Reference Fact","url":"14847.htm#o822","text":"Fact with an attribute type of Reference.  The value of a reference fact points (refers) to another object.  A field displaying a reference fact retrieves a list of values from objects in the referenced object class to populate the drop-down list.  The user can then choose a suitable value from the drop-down list.   The number of values populating the drop-down list can be limited using an expression or custom search.  Performance of the population of the drop-down list can be improved by making the class cache locally on the client.  Context:  Process Engine  "},{"id":978,"title":"Reference Subset Fact","url":"14847.htm#o823","text":"Fact with an attribute type of Reference Subset.  The value of a reference subset fact is a list of references to objects in a single object class.  Reference subsets are included in object classes that have associations with other object classes.  Reference subset fact values can be populated automatically by Process Engine or by a derivation.  Also known as Association fact in Configuration Studio.  Context:  Process Engine  "},{"id":979,"title":"Reference Type","url":"14847.htm#o824","text":"Defined list of items that can be referenced throughout Convergent Billing.  Typically used for a list of predefined options for users.  Each item in a reference type is identified by a reference code.  A reference type should be used whenever there is a requirement to access a set number of values where the values are constants.  Reference types should not be used for variable value lists.  A shared class in Process Engine can map to a Convergent Billing reference type.  Context:  Convergent Billing, Process Engine, Customer Management  See also Child Reference Type, Derived Attribute, Reference Code, and Lists.  "},{"id":980,"title":"Referential Integrity","url":"14847.htm#o825","text":"Term describing the validity of foreign references.  When a foreign reference is valid, the reference is said to have referential integrity.  Context:  Convergent Billing  "},{"id":981,"title":"Relational Operator","url":"14847.htm#o826","text":"Operator used in clauses and expressions to describe an arithmetic or Boolean operation.  Context:  Convergent Billing, Process Engine  "},{"id":982,"title":"Remote Function","url":"14847.htm#o827","text":"Function that executes remotely; that is, outside the context of, or remote from, the function caller.  Remote execution is performed by the Transaction Engine (TRE) within a Tuxedo service in a TRE server.  Context:  Convergent Billing  See also Function and Function Type.  "},{"id":983,"title":"Remote Services Server","url":"14847.htm#o828","text":"TRE server (treproxy) that provides an interface service for communication with remote servers.   Context:  Convergent Billing  See also Transaction Engine and Tuxedo Service.  "},{"id":984,"title":"Remote Stored Fact","url":"14847.htm#o58029","text":"Fact that is stored in a Convergent Billing database.  Context:  Singleview  See Also Stored Fact, Local Stored Fact.  "},{"id":985,"title":"Rental Generation Process (RGP)","url":"14847.htm#o830","text":"TRE server (trergp) that provides the services for generating normalised events for recurring and one-off charges such as line rental, handset rental, and frequently used number plan fees.    The normalised events for recurring and one-off charges identify the service, customer, product, a tariff, and optionally equipment.  For recurring charges, the events also identify the period over which the tariff applies, and the proportion of the normal tariff period during which the product was active for the customer.  The normalised events generated by the RGP are then rated (costed) by the rating engine.  The RGP is also used to adjust recurring charges generated during a previous billing cycle.  Adjustments may be required to correct charges made for periods where services were unavailable or cancelled.  Context:  Convergent Billing  See also Event Normalisation (ENM) Process, Event Rating (ERT) Process, Prorating, Recurring Tariff, and Transaction Engine.  "},{"id":986,"title":"Replication","url":"14847.htm#o53112","text":"Process of creating and managing duplicate versions of data (for example, cache).  Replication types are:  Replication with a single master data source for read-write access and multiple read-only copies of the master (active-passive replication)  Replication with multiple master data sources that use an algorithm to keep their data synchronised (active-active replication).  Replication of entity data from a billing instance to a rating instance, where the instances have separate databases.    Convergent Billing enables the replication of:  Changes to the account and rating subtotal caches between separate Convergent Billing instances that are part of a single Convergent Billing cluster.  New or updated schedules across multiple or all instances within a Singleview cluster.  Changes to customer nodes, accounts, product instances, and bill run data from the billing to the rating instance.  Replication is used to ensure a system's high availability.  Context:  Convergent Billing, High Availability  See also Cluster, High Availability, Instance, and Singleview Cluster.  "},{"id":987,"title":"Replication Group","url":"14847.htm#o52875","text":"Set of instances to which a schedule is replicated.   Context:  Convergent Billing  See also Cluster, and Replication.  "},{"id":988,"title":"Reporting Entity","url":"14847.htm#o8081","text":"Entity used to record the historical and current information about financial entities for which sales journals are maintained and general ledger uploads are performed.  A reporting entity effectively acts as a set of books, allowing separate books to be maintained for separate financial reporting entities.  Context:  Convergent Billing, Configuration Studio  See also Sales Journal.  "},{"id":989,"title":"Reporting Level","url":"14847.htm#o833","text":"Type of reporting generated for a specific customer node.  One of the following reporting levels is specified:  No Reporting  Invoice  Statement  Transferred Statement.  Context:  Convergent Billing, Customer Management  See also Invoice and Statement.  "},{"id":990,"title":"Reprocessed File","url":"14847.htm#o834","text":"File that has been reprocessed.  Reprocessing may be performed if errors occurred during event rating.  Whenever an error event is reprocessed, the original error event is associated with the reprocessed file.    When rated events are reprocessed, error events that are created are also associated with the reprocessed file.  Context:  Convergent Billing  See also Revoking, and Rerated File.  "},{"id":991,"title":"Rerated File","url":"14847.htm#o835","text":"File that has been rerated.  Rerating may be done if errors occurred during the rating process.  Files may also need to be re-rated if product or tariff changes were made.  Context:  Convergent Billing  See also Tariff, Rated Event, and Rating Engine.  "},{"id":992,"title":"Reservation","url":"14847.htm#o59822","text":"An amount of customer credit that is pre-allocated to cover the estimated cost of an event.  Reservations are maintained (and possibly updated) throughout the duration of an event. A single reservation can be applied to one or more accounts.  Reservations are stored in the rating engine's account, rating subtotal, and temporal entitlements caches. They are accessed by all processes that use credit information.  The rating engine can be set to cancel or update the specified reservation when an event is rated and the appropriate account balances updated.    Reservations require Commerce Engine licensing.  Context:  Convergent Billing, Commerce Engine  See also Balance Management, Rating Engine, and Real-time Tariffs  "},{"id":993,"title":"Reserved Word","url":"14847.htm#o837","text":"Word with a special meaning when used in expressions.  Reserved words cannot be used as fact or variable names.  Context:  Process Engine  "},{"id":994,"title":"Resolution Text","url":"14847.htm#o55266","text":"Text added to a progression by a work group.  If this work group has not resolved the query, the resolution text becomes the progress text for the next work group.  Context:  Convergent Billing  See also Progress Text, Progression, and Query Text.  "},{"id":995,"title":"Resource Profile","url":"14847.htm#o14889","text":"Matrix that specifies the maximum allowed usage for resource types over specified time bands.  The Scheduled Task Dispatcher monitors the resource usage of running tasks; scheduled tasks that would cause resource usage to exceed the maximum are delayed until resource availability is sufficient.  Context:  Convergent Billing  "},{"id":996,"title":"REST","url":"14847.htm#o74817","text":"Representational State Transfer is an architectural style, and an approach to communications that is often used in the development of web services.  Context:  Convergent Billing  "},{"id":997,"title":"Restore","url":"14847.htm#o839","text":"To reinstate an obsolete item.  Context:  Process Engine   See also Obsolete Items.  "},{"id":998,"title":"Restricted Mode","url":"14847.htm#o41183","text":"Process Engine server state at server startup caused by invalid configuration.  In restricted mode, limited functionality is available to users with Administrator and Developer roles for correcting invalid configuration and initialising the reload configuration operation.  Context:  Process Engine  "},{"id":999,"title":"Resubmitted Task","url":"14847.htm#o840","text":"When a task is resubmitted and resubmission requires that a copy of the task be made, the master is referred to as the original task and the copy as the resubmitted task.  Context:  Convergent Billing  See also Task.  "},{"id":1000,"title":"Result Value","url":"14847.htm#o841","text":"Value held in a look-up table that is returned if its corresponding index value matches the index expression.  Context:  Convergent Billing  See also Index Expression, Index Value, and Lookup Table.  "},{"id":1001,"title":"Result Value Attribute Type","url":"14847.htm#o842","text":"Specifies the data type of the result value returned by a derived attribute.  Context:  Convergent Billing  See also Attribute Type, Derived Attribute, and Result Value.  "},{"id":1002,"title":"Revenue","url":"14847.htm#o11259","text":"Accounting term.  Type of account that measures the increase in assets resulting from the sale of goods and services, and the earnings from dividends, interest, and rent.  Revenue is received in the form of cash or receivables that can be converted to cash at a later date.  Context:  Convergent Billing  See also Account Classifications, Asset, Equity, Liability, and Expense.  "},{"id":1003,"title":"Revoking","url":"14847.htm#o843","text":"Process of restoring a rated file or bill run to its previous state so that it can be rerated or rerun.  Revoking may be necessary if errors occur during event rating or bill run execution.  Context:  Convergent Billing  See also Bill Run, Reprocessed File, and Rerated File.  "},{"id":1004,"title":"RGP","url":"14847.htm#o844","text":"Refer to Rental Generation Process (RGP).  "},{"id":1005,"title":"Root Action","url":"14847.htm#o847","text":"Action at the highest hierarchical level of an action group.  In effect, a root action is a consolidation of its child actions activities and it does not represent an activity in its own right.  A root action is always a parent action.  Context:  Customer Management, Process Engine  See also Action and Action Group.  "},{"id":1006,"title":"Root Customer Node","url":"14847.htm#o848","text":"Node at the root (highest level) of a customer hierarchy.  The root customer node has one or more child customer nodes, but does not have a parent customer node.  Context:  Convergent Billing, Customer Management  See also Child Customer Node, Customer Hierarchy, and Parent Customer Node.  "},{"id":1007,"title":"Row Validation","url":"14847.htm#o849","text":"Used within entity validation to display messages to the user, or to execute actions.  If the entity being validated is in a list, row validation is executed when the row loses input focus.  If the entity being validated is not in a list, row validation is executed when the form is saved, but before the data is committed to the database.  Context:  Convergent Billing  See also Entity Validation, Input Focus, Post-commit Expression, and Pre-commit Validation.  "},{"id":1008,"title":"RTR","url":"14847.htm#o851","text":"Refer to Real-time Rating (RTR).  "},{"id":1009,"title":"Rule Validation","url":"14847.htm#o852","text":"Method used to determine the validity of values entered into fields.  Rule validation allows a Process Engine configurer to specify what values can be entered into a specific field or group of fields.  Context:  Process Engine  "},{"id":1010,"title":"S","url":"14848.htm","text":""},{"id":1011,"title":"Sales and Cash Receipts Journal","url":"14848.htm#o11275","text":"A Sales and Cash Receipts Journal (in Convergent Billing, referred to as the Sales Journal) combines the functions of a Sales Journal and a Cash Receipts Journal.    A Sales and Cash Receipts Journal (in Singleview, referred to as a Sales Journal) tracks financial transactions (including payments, adjustments, and credit) related to sales to customers.  Transactions are associated with GL codes (for sales, indirectly using a GL guidance entity).  GL codes are (usually) defined in a hierarchical manner to group similar transactions for summarisation at varying levels.  In Convergent Billing, GL codes are associated with a reporting entity, providing a separate sales journal for each reporting entity.  Used in Convergent Billing to record and group financial transactions by accounting period.  At the end of each accounting period, the entries can be extracted and posted to an external general ledger system.   Context:  Convergent Billing  See also Sales Journal, Cash Receipts Journal, Normalised Event File Transactions, Invoice Transactions, Payment Transactions, and Adjustment Transactions.  "},{"id":1012,"title":"Sales Journal","url":"14848.htm#o8082","text":"Accounting term.  Journal used to record the sale of goods and services on credit against customer accounts.  In Convergent Billing, Sales Journal refers to the Sales and Cash Receipts Journal.  Context:  Convergent Billing  See also Sales and Cash Receipts Journal.  "},{"id":1013,"title":"Sales Journal Posting Process","url":"14848.htm#o9629","text":"Process that aggregates event and invoice GL guidance records, and payment and adjustment and GL records, and posts them to the Sales Journal.  During Sales Journal posting, Convergent Billing tracks the status, and change in status, of revenue.  Context:  Convergent Billing  See also Sales and Cash Receipts Journal and GL Upload Process.  "},{"id":1014,"title":"Samba","url":"14848.htm#o853","text":"Third party product that allows access and use of files, printers, and other shared resources on a host operating system.  For example, a Windows user could map a network drive in Windows Explorer to a Samba server on a UNIX machine and access and modify the files on the UNIX machine.  Context:  Convergent Billing  "},{"id":1015,"title":"Scalable","url":"14848.htm#o854","text":"Ability to handle increasing workloads using additional hardware such as greater memory and network capability, another disk, extra nodes, or more CPUs on a node.  Context:  Convergent Billing  See also Node.  "},{"id":1016,"title":"Schedule","url":"14848.htm#o855","text":"Defines when an activity (or task) will be executed and the frequency at which that task will be executed.  Context:  Convergent Billing  See also Pre-schedule Count and Task.  "},{"id":1017,"title":"Schedule Type","url":"14848.htm#o856","text":"Specifies any defaults or entity validation for schedules specified with that type.  Context:  Convergent Billing, Configuration Studio  See also Schedule and Task.  "},{"id":1018,"title":"Scheduled Function Monitor (SFM) Process","url":"14848.htm#o50583","text":"Process responsible for executing EPM functions in accordance with their schedule and sequence, if applicable.  The SFM updates the database to track the progress of a scheduled function evaluation, and reschedules any failed functions configured to be retried.    Context:  Convergent Billing  "},{"id":1019,"title":"Scheduled Task Dispatcher (STD) Process","url":"14848.htm#o857","text":"Accepts client commands from the TRE and generates multiple tasks based on the pre-schedule count.  If the schedule defines a one-off activity, only a single task is scheduled.  If the schedule defines a periodic activity, multiple tasks are scheduled.  Context:  Convergent Billing  See also Schedule, Server Process, Task, Task Launch and Monitor (TLM) Process, and TRE API.  "},{"id":1020,"title":"Schema","url":"14848.htm#o53458","text":"Refer to XML Schema.  "},{"id":1021,"title":"Script","url":"14848.htm#o860","text":"Text displayed on the screen designed to assist a user to complete a task in the Process Engine client.  The Process Engine configurer determines the set of circumstances in which a specific script is displayed.  A script is comprised of a set of script nodes.  Context:  Process Engine  See also Script Node.  "},{"id":1022,"title":"Script Node","url":"14848.htm#o861","text":"Autonomous unit of text or other multimedia component included in a script.  The Process Engine client user is provided with a series of nodes sequenced by the Process Engine configurer.  Context:  Process Engine  "},{"id":1023,"title":"Search Clause","url":"14848.htm#o863","text":"Criteria used in custom searches to refine the results.  Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":1024,"title":"Search Results Page","url":"14848.htm#o45994","text":"Process Engine web client page that displays results returned from a search.  Context: Process Engine web client  "},{"id":1025,"title":"Secondary Contact","url":"14848.htm#o867","text":"Person, other than the primary contact, assigned as an additional contact for a customer.  Context:  Convergent Billing  See also Customer Contact and Primary Contact.  "},{"id":1026,"title":"Section","url":"14848.htm#o868","text":"One of three major display areas in a view in the Process Engine client.  The three sections are:  List section  The List section can be also displayed as a tree.  Detail section  Tab section.  Context:  Process Engine  See also Process Engine Client.  "},{"id":1027,"title":"Secure File Transfer","url":"14848.htm#o42132","text":"Method of allowing files to be transferred securely between the server and a PC on which the client is running.  Security is based on validating the user's security group access level.   Context:  Convergent Billing, Customer Management, Process Engine, Singleview  See also Access Level, Group, User Profile, and Security.  "},{"id":1028,"title":"Security","url":"14848.htm#o869","text":"Determines the access level a user has to the information stored in Singleview.  Security is achieved using form roles and groups and is assigned to each user using a user profile.  Context:  Convergent Billing, Customer Management, Process Engine  See also Group, User Profile, and Form Role.  "},{"id":1029,"title":"Security Group","url":"14848.htm#o55825","text":"Security features that, in combination with profiles, work groups, function roles and form roles, determines the access level a user has to data.   In Process Engine a security group includes objects and facts that require the same level of access by system users.  Context:  Convergent Billing, Customer Management, Process Engine  See also Security Group Set, Access Level, Permissions, User Profile, Work Group, Function Role, and Form Role.  "},{"id":1030,"title":"Security Group Set","url":"14848.htm#o75318","text":"A security group set consists of more than one security group. Entities with security access control can reference a security group set instead of a security group. A user is allowed access to the entity based on the access defined by any security group within the security group set. For example, if a user requires access to a customer entity that references a security group set, the user is only allowed access if a security group assigned to the user is referenced in the security group set, and has the required access levels defined in the profile.  Security group sets can only contain security groups, and at least two security groups must exist per security group set.  Security group sets can only be created and managed using Singleview APIs.  Security group sets can be assigned to the following entities:  Convergent Billing instance entities: customers, contacts, and queries  Convergent Billing entities that support multi-tenancy: product offers, reference codes, and derived attribute table contents  Process Engine dynamic and admin static objects.  Context:  Convergent Billing, Process Engine, Singleview  See also Security Groups.  "},{"id":1031,"title":"Segment","url":"14848.htm#o871","text":"In Oracle databases, a segment contains a set of extents that have been allocated for a specific data structure and are stored in the same tablespace.  For example, a table's data is stored in its own data segment, while each index's data is stored in its own index segment.  Context:  Convergent Billing, Process Engine  See also Data Block, Extent, Oracle, and Tablespace.  "},{"id":1032,"title":"Selection Criteria","url":"14848.htm#o872","text":"Conditions that must be met for a search to return data.  Context:  Convergent Billing, Customer Management, Process Engine  "},{"id":1033,"title":"Semaphore","url":"14848.htm#o873","text":"Counter for providing access to a shared data object for multiple processes or threads.  In general, for a process to obtain access to a shared resource, it attempts to reserve the resource using a semaphore 'wait'.  The process blocks until the resource becomes available.  When a process is finished with a shared resource, it releases the semaphore using a semaphore 'signal'.  In Convergent Billing, semaphores are used to control access to various data structures stored in the shared memory segment and are also used to pause the ENM, ERT, and ERO processes.  Context:  Singleview  See also Spinlock.  "},{"id":1034,"title":"Server","url":"14848.htm#o874","text":"Machine on which server processes and RDBMS are run.  Context:  Singleview  See also Server Process.  "},{"id":1035,"title":"Server Instance","url":"14848.htm#o59479","text":"Single Java Virtual Machine (JVM) instance running the Tomcat server on a single machine.  Context:  Process Engine web client  "},{"id":1036,"title":"Server Process","url":"14848.htm#o875","text":"Executed on a server machine rather than on a user (client) workstation.  In Singleview, such processes are run on a UNIX server.  Context:  Singleview  See also Expression Control Program (ECP) and Server.  "},{"id":1037,"title":"Service","url":"14848.htm#o876","text":"Provides a specific component of the overall product for which the customer is charged.  Each service has an associated service type, and unique service number against which usage is charged.  One or more facilities (service options) or items of equipment, or both, can be associated with each service.  Context:  Convergent Billing  See also Equipment, Facility, and Service Type.  "},{"id":1038,"title":"Service Cache","url":"14848.htm#o877","text":"Caches database details of services and products, which are primarily required to rate an event.  The following caches are available:  Service  Service Derived Attribute  Service Name  Network Name  Product.  Context:  Convergent Billing  "},{"id":1039,"title":"Service Type","url":"14848.htm#o878","text":"Specifies any defaults or entity validation for services specified with that type.  If required, an icon can be specified to identify each service type.  Context:  Convergent Billing, Configuration Studio  See also Icon and Service.  "},{"id":1040,"title":"Set of Books","url":"14848.htm#o11288","text":"Refer to Reporting Entity.  "},{"id":1041,"title":"Sharding","url":"14848.htm#o68512","text":"The process of splitting a single data structure (for example, a list) into multiple smaller structures, each containing a portion of the original structure's data. If a process needs to create a lock while accessing data, sharding can ensure that only one portion of a data structure is locked, rather than the whole, leaving the rest available to other processes. This can improve performance in a system by decreasing the likelihood that a process will have to wait for access.  Context: Commerce Engine  See also Spinlock.  "},{"id":1042,"title":"Shared Memory (SHM)","url":"14848.htm#o978","text":"Configuration that runs on single machine.  In SHM mode, only one machine is part of the application.  All the application servers are located on that machine.  Context:  Singleview  See also Transaction Engine.  "},{"id":1043,"title":"Shortcut Key","url":"14848.htm#o879","text":"Single key (or set of keys) that performs a function on a client.  "},{"id":1044,"title":"Shortcut Menu","url":"14848.htm#o880","text":"Context-sensitive floating menu.  The shortcut menu is activated by clicking on the right-hand mouse button.  "},{"id":1045,"title":"Simple Expression","url":"14848.htm#o881","text":"Evaluation type used to derive the value of a derived attribute.  Returns the value of a single expression; no other evaluation is performed.  Typically, this evaluation type is used to define a derived attribute from a direct variable.  Context:  Convergent Billing  See also Derived Attribute and Direct Variable.  "},{"id":1046,"title":"Simple Network Management Protocol (SNMP)","url":"14848.htm#o882","text":"Suite of internet standards to support network management and the monitoring of internet hosts and devices.  Context:  Convergent Billing  See also Trap and Management Information Base (MIB).  "},{"id":1047,"title":"Single Expression","url":"14848.htm#o883","text":"Assignment, variable, function call, value, or two variables linked by an operator.  Context:  Convergent Billing, Process Engine  See also Expression and Expression Type.  "},{"id":1048,"title":"Single Sign-on","url":"14848.htm#o39655","text":"Method for simplifying access to multiple software applications.  When single sign-on is in use, a user's Windows user name and password are used to log in to Singleview.  Context:  Singleview  See also External Authentication and Internal Authentication.  "},{"id":1049,"title":"Single-entry Bookkeeping","url":"14848.htm#o11282","text":"Accounting term.  Accounting system where only one side of a double-entry transaction is entered into the journal.  The other side of the double-entry journal is automatically created by the general ledger system according to the control account being updated.  Context:  Singleview  See also Double-entry Bookkeeping.  "},{"id":1050,"title":"Singleview Cluster","url":"14848.htm#o66816","text":"Configuration that binds multiple Singleview instances with the intent of increasing the processing capacity or availability of Singleview.  Singleview clusters permit Singleview instances to be classified as Guidance, Rating, Billing, or Combined type.  Context:  Convergent Billing, High Availability, Singleview  "},{"id":1051,"title":"SKU","url":"14848.htm#o60582","text":"See Stock Keeping Unit.   Context:  Convergent Billing, Customer Management  "},{"id":1052,"title":"Slave Derived Attribute","url":"14848.htm#o887","text":"References and uses the look-up table defined for another derived attribute (referred to as the master derived attribute).  Context:  Convergent Billing  See also Derived Attribute and Master Derived Attribute.  "},{"id":1053,"title":"SMS","url":"14848.htm#o46381","text":"Acronym for Short Message Service.  "},{"id":1054,"title":"SMTP","url":"14848.htm#o58197","text":"Used for sending emails over the internet.  Context:  Convergent Billing, Process Engine web client, Customer Management  See also MIME, POP3, SSMTP, and TNEF.  "},{"id":1055,"title":"SNMP","url":"14848.htm#o888","text":"Refer to Simple Network Management Protocol (SNMP).  "},{"id":1056,"title":"Socket Interface Server","url":"14848.htm#o889","text":"TRE server (tresok) providing socket interface services for communication with external processes.   Context:  Convergent Billing  See also Transaction Engine and Tuxedo Service.  "},{"id":1057,"title":"SOAP","url":"14848.htm#o57258","text":"Protocol specification for exchanging structured information in implementation of web services in computer networks. It uses Extensible Markup Language (XML) for its message format, and other Application Layer protocols (for example, Hypertext Transfer Protocol (HTTP) and Simple Mail Transfer Protocol (SMTP)), for message negotiation and transmission.   Context:  Convergent Billing  "},{"id":1058,"title":"Soundex Fact","url":"14848.htm#o890","text":"Fact with an attribute type of Text, derived from another text fact using a soundex expression.  Values stored in soundex facts are used in the execution of soundex and case-insensitive searches.  Context:  Process Engine  "},{"id":1059,"title":"Soundex Search","url":"14848.htm#o891","text":"Custom search designed to find words that sound similar to other words.  Context:  Process Engine, Customer Management  See also Custom Search.  "},{"id":1060,"title":"Spinlock","url":"14848.htm#o892","text":"A spinlock is a concurrency control mechanism, similar to a mutex (mutual exclusion) or semaphore. Spinlocks are a useful mechanism in tasks where waiting times for a resource are expected to be short.  Singleview uses spinlocks to coordinate concurrent access to data stored in its caches.  Context:  Convergent Billing  See also Semaphores.  "},{"id":1061,"title":"SQL","url":"14848.htm#o893","text":"Structured Query Language.  SQL is used to access and update the Oracle database.  Context:  Convergent Billing, Process Engine  See also Oracle.  "},{"id":1062,"title":"SQL*Loader Utility","url":"14848.htm#o894","text":"Loads data files output by the Event Rating Output (ERO) process into the database.  Context:  Convergent Billing  See also Event Rating Output (ERO) Process and SQL.  "},{"id":1063,"title":"SSL","url":"14848.htm#o58212","text":"Protocol for securely transmitting data over the internet.  Context:  Convergent Billing, Process Engine web client, Customer Management  See also SMTPS.  "},{"id":1064,"title":"SSMTP","url":"14848.htm#o58198","text":"Secure method of sending email over the internet using SSL protocol.  Context:  Convergent Billing, Process Engine web client, Customer Management  See also MIME, POP3, SMTP, SSL, and TNEF.  "},{"id":1065,"title":"Standby","url":"14848.htm#o73831","text":"A Singleview instance state where the server is running but can only perform limited operations. Non-admin CSRs cannot connect to this instance.  Context:  Singleview, High Availability  "},{"id":1066,"title":"Statement","url":"14848.htm#o896","text":"Document itemising charges (and possibly credits) accrued against a customer's account for services used by, or supplied to, that customer over a specified period.  Unlike an invoice that itemises charges, a statement provides a record of the charges.   Context:  Convergent Billing  See also Invoice and Reporting Level.  "},{"id":1067,"title":"Statement Node","url":"14848.htm#o897","text":"Customer node with a reporting level of 'Statement'.  Accrued charges for a statement node are 'rolled up' into the charges associated with the next customer node (located higher in the customer hierarchy) having a reporting level of 'Invoice'.  Context:  Convergent Billing  See also Customer Node, Invoice Node, and Reporting Level.  "},{"id":1068,"title":"Static Class","url":"14848.htm#o898","text":"Contains configuration type data that cannot be changed in the Process Engine client.  Static classes are often cached on the Process Engine client for performance reasons.  Examples of static classes are the type and calendar classes.  Context:  Process Engine  See also Process Engine Client, Dynamic Class, and Cached Class.  "},{"id":1069,"title":"Static Data","url":"14848.htm#o899","text":"Static data is the data stored for a static class.  Context:  Process Engine  See also Static Class.  "},{"id":1070,"title":"Static Parameter","url":"14848.htm#o56226","text":"Static parameters define the functionality of an interface and cannot be changed when used in an interface. A value must be specified when defining static parameters on an interface template. Static parameters cannot be modified in an interface definition.   Context:  Singleview  See also Operational Parameter.  "},{"id":1071,"title":"Status Fact","url":"14848.htm#o900","text":"Fact whose value can be changed either manually or automatically, according to its definition, as objects are processed.  Examples of common values for status facts are Open, Pending, and Closed.  The value of the status fact represents the current business state of the object.  The value of an object's status fact can be used to change the state of facts in the object.  Context:  Process Engine  "},{"id":1072,"title":"STD","url":"14848.htm#o901","text":"Refer to Scheduled Task Dispatcher (STD) Process.  "},{"id":1073,"title":"Stock Keeping Unit (SKU)","url":"14848.htm#o60583","text":"Unique code identifying a stocked item.  Context:  Convergent Billing, Customer Management  "},{"id":1074,"title":"Stored Fact","url":"14848.htm#o57976","text":"Fact stored or held in a database.  Context:  Singleview  Context: Fact, Non-stored Fact.  "},{"id":1075,"title":"Struct","url":"14848.htm#o902","text":"Data type, corresponding to a record with one or more data types, used to group associated data together.  Structs are used in the Convergent Billing C TRE API.  Context:  Convergent Billing  "},{"id":1076,"title":"Structured Alias Fact","url":"14848.htm#o903","text":"Fact used as the name for each group of permissible values in the structure; this fact value is displayed in the client as the name for each 'set' of values.  Common examples are 'Product' or 'Cause'.  Context:  Process Engine  See also Structured List.  "},{"id":1077,"title":"Structured Class","url":"14848.htm#o904","text":"Static or admin static class that is defined with a hierarchical structure.  Facts in other classes reference the structured data using structured facts.  Context:  Process Engine  See also Structured Fact.  "},{"id":1078,"title":"Structured Fact","url":"14848.htm#o905","text":"Fact with an attribute type of Text used to store values to be displayed in a structured list.  Context:  Process Engine  See also Structured List.  "},{"id":1079,"title":"Structured Fact Level","url":"14848.htm#o906","text":"Position of a structured fact within a hierarchical structure of facts.  Context:  Process Engine  "},{"id":1080,"title":"Structured List","url":"14848.htm#o907","text":"Links to other lists in a hierarchical manner.  When an item is selected from a structured list, a subsequent list can be displayed based on the selected item.  A structured alias fact names each unique group of values in the structured list.    Context:  Process Engine  See also Structured Alias Fact  "},{"id":1081,"title":"Subcomponent","url":"14848.htm#o908","text":"Defines the minimum and maximum value allowed of a referenced component.  Context:  Convergent Billing  "},{"id":1082,"title":"Sub-ledger","url":"14848.htm#o11279","text":"Accounting term.  Ledger containing details for the main account, used to maintain the balance of the account for general ledger accounts containing a large number of transactions.  Sub-ledgers are a distinct component and are often separate from the general ledger system.   Context:  Convergent Billing  See also General Ledger.  "},{"id":1083,"title":"Subtotal","url":"14848.htm#o909","text":"Variable containing calculated values (such as aggregated cost totals) stored for subsequent use in the rating and billing process.   A subtotal defines one or more subtotal terms aggregated using the method specified by the associated aggregation function.  Context:  Convergent Billing  See also Aggregation Function, Progressive Subtotal, Keyed Subtotal, and Subtotal Term.  "},{"id":1084,"title":"Subtotal Term","url":"14848.htm#o910","text":"Component of a subtotal that defines which entities are aggregated and what values are aggregated.  Terms must have evaluation context which is less than or equal to the context of the subtotal.  Each term consists of one or more eligibility criteria to identify which entities are aggregated, and an expression that is evaluated on an eligible entity to determine the value passed to the aggregation function.  Context:  Convergent Billing  See also Aggregation Function, Progressive Subtotal, and Subtotal.  "},{"id":1085,"title":"Summary of Change View","url":"14848.htm#o911","text":"Defines parameters displayed on the Summary of Change form.  The Summary of Change form displays details of changes made between two consecutive data records.  Context:  Convergent Billing  "},{"id":1086,"title":"Switchover","url":"14848.htm#o73825","text":"A manually triggered change of state in a Singleview cluster where an active instance is moved to standby state and a standby instance is moved to active state. This covers both planned events and unplanned events (failovers).  Context:  Singleview, High Availability  See also Node, Failover, Tuxedo Domain, and Tuxedo Gateway.  "},{"id":1087,"title":"Synchronous Function","url":"14848.htm#o39467","text":"Function that is executed immediately.  Synchronous functions require the user to wait for completion, when a value is returned.   Context:  Convergent Billing, Process Engine  See also Asynchronous Function, Built-in Function, Function, and Queued Function.  "},{"id":1088,"title":"Syntax","url":"14848.htm#o913","text":"Set of grammatical rules that apply to the construction of expressions or functions.  Context:  Convergent Billing, Process Engine  "},{"id":1089,"title":"System","url":"14848.htm#o914","text":"Combination of components working together (for example, a system that includes both hardware and software).  Context:  Singleview  "},{"id":1090,"title":"T","url":"14849.htm","text":""},{"id":1091,"title":"Tab","url":"14849.htm#o915","text":"Division of a form or view on which to enter or view information about a specific aspect of the current record or object.  Context:  Convergent Billing, Customer Management, Process Engine  See also Form and View.  "},{"id":1092,"title":"Tab Fact Group","url":"14849.htm#o916","text":"Group of specified facts displayed as fields within a tab in the layouts of Detail or Tab sections in the Process Engine client.  Context:  Process Engine  "},{"id":1093,"title":"Tab Menu","url":"14849.htm#o45996","text":"Drop-down menu on a tab, listing options available for the current tab.  Overview tabs do not have a tab menu.  Context: Process Engine web client  See also Details Page.  "},{"id":1094,"title":"Tab Section","url":"14849.htm#o922","text":"Section of a view that displays details about the selected object in the Process Engine client.  The user controls the display of this section.  A number of tabs display the associated objects.  Context:  Process Engine  "},{"id":1095,"title":"Table Lookup by Best Match","url":"14849.htm#o918","text":"Evaluation type used to derive the value of a derived attribute.  Table Lookup by Best Match allows up to ten indexes to be defined as the keys into the look-up table.  Any result value returned must match all of the indexes specified.    Table Lookup by Best Match compares the index expression with each predefined index value held in a table of values (known as a look-up table).  The best match (the value having the longest matching prefix) for the specified index is determined and the corresponding result value (also held in the look-up table) is returned.  Context:  Convergent Billing  See also Derived Attribute, Evaluation Type, Index Expression, Lookup Table, and Result Value.  "},{"id":1096,"title":"Table Lookup by Multiple (1 - 10) Keys","url":"14849.htm#o919","text":"Evaluation type used to derive the value of a derived attribute.  Table Lookup by Multiple allows up to ten indexes to be defined as the keys into the look-up table.  Any result value returned must match all of the indexes specified.  Context:  Convergent Billing  See also Derived Attribute, Evaluation Type, and Result Value.  "},{"id":1097,"title":"Table Lookup by Searching","url":"14849.htm#o37441","text":"Evaluation type used to derive the value of a derived attribute.  Table Lookup by Searching allows up to ten indexes to be specified as the keys into the lookup table and supports population of wildcards.  Context:  Convergent Billing  See also Derived Attribute, Evaluation Type, Index Value, and Result Value.  "},{"id":1098,"title":"Table Lookup by Single Range","url":"14849.htm#o920","text":"Evaluation type used to derive the value of a derived attribute.  Table Lookup by Single Range allows a single index expression to be defined as the key into a look-up table that contains one or more ranges of values.  When a table row is found with a range that includes the value of the index expression, the corresponding result value is returned.  Context:  Convergent Billing  See also Derived Attribute, Evaluation Type, and Result Value.  "},{"id":1099,"title":"Table Partitioning","url":"14849.htm#o921","text":"Improves the management and the performance of the rating, billing and archive processes.  Database table scalability can often be compromised when tables that hold large quantities of data are seldom accessed, or when data is accessed very frequently.  Convergent Billing provides the capability to define and manage table partitions.   Context:  Convergent Billing  See also Billing Engine and Rating Engine.  "},{"id":1100,"title":"Tablespace","url":"14849.htm#o923","text":"An Oracle database is divided into one or more logical storage units called tablespaces.  Physically, Oracle stores data in datafiles and each tablespace consists of one or more datafiles.  The simplest Oracle database has one tablespace and one datafile.  Context:  Convergent Billing, Process Engine  See also Data Block, Datafile, Extent, Oracle, and Segment.  "},{"id":1101,"title":"T-account","url":"14849.htm#o11283","text":"Accounting term.  Visual representation of a general ledger account and journal posting changes affecting a company's assets and liabilities, using double-entry bookkeeping.  Context:  Convergent Billing  See also Double-entry Bookkeeping.  "},{"id":1102,"title":"TAF","url":"14849.htm#o66742","text":"See Transparent Application Failover.  "},{"id":1103,"title":"TAPI","url":"14849.htm#o924","text":"Telephony Application Programming Interface.  Context:  Process Engine  "},{"id":1104,"title":"Tariff","url":"14849.htm#o925","text":"Specifies the charges to be applied to events and the rules for applying them, to calculate cost information.  Tariffs can result in both positive and negative values being calculated.  Each tariff is specified as being billable or non-billable thereby determining whether the values calculated are included on a customer's invoice.  Typically, tariffs include:  Usage tariffs  Discount tariffs  Recurring tariffs  Tax tariffs  Comparative tariffs.  Context:  Convergent Billing  See also Billing Engine and Rating Engine.  "},{"id":1105,"title":"Tariff Configuration","url":"14849.htm#o927","text":"Process in which the basic properties of the tariff are entered, the structure of the tariff table is defined, and the charge expression for the tariff is defined.  Context:  Convergent Billing  See also Tariff, Tariff Definition, and Tariff Table.  "},{"id":1106,"title":"Tariff Definition","url":"14849.htm#o928","text":"Process in which values for the conditions and charges are entered into the configured tariff table.  When defined, a tariff is available for inclusion in all product definitions.  Context:  Convergent Billing  See also Tariff, Tariff Configuration, and Tariff Table.  "},{"id":1107,"title":"Tariff Table","url":"14849.htm#o929","text":"Table of conditions and associated charges.  The table is used to determine the charge values to be substituted into the charge expression to calculate the value of the specified tariff.  The charge values used for the substitution are those associated with the conditions in the tariff table that match the conditional expressions used as keys into the tariff table.  The structure of the tariff table is created during tariff configuration and the appropriate conditions and charges entered into the table during tariff definition.  Context:  Convergent Billing  See also Tariff, Tariff Configuration, and Tariff Definition.  "},{"id":1108,"title":"Tariff/Charge Category Pair","url":"14849.htm#o926","text":"Association or link between a tariff and a charge category.  Each tariff defined in a product definition is associated with a charge category that defines the account type to which any resulting tariff charges are posted.  Context:  Convergent Billing  See also Charge Category and Tariff.  "},{"id":1109,"title":"Task","url":"14849.htm#o930","text":"Action or operation scheduled to be performed on behalf of a client by the Scheduled Task Dispatcher (STD) process.  The STD process generates the required tasks based on the schedule definition.  A task is executed as a server process by the Task Launch and Monitor (TLM) process.  Context:  Convergent Billing  See also Schedule, Scheduled Task Dispatcher (STD) Process, and Task Launch and Monitor (TLM) Process.  "},{"id":1110,"title":"Task Launch and Monitor (TLM) Process","url":"14849.htm#o931","text":"Executes tasks (passed to it at the appropriate time by the Scheduled Task Dispatcher (STD) process) as server processes, and monitors their progress.  When a task is performed, the TLM process notifies the STD process of completion.  Context:  Convergent Billing  See also Scheduled Task Dispatcher (STD) Process, Server Process, and Task.  "},{"id":1111,"title":"Task Queue","url":"14849.htm#o932","text":"List of scheduled tasks that have been, or are yet to be executed.  Each scheduled task has a unique task ID and a task status.  Context:  Convergent Billing  See also Task, Task Launch and Monitor (TLM) Process, and Task Status.  "},{"id":1112,"title":"Task Status","url":"14849.htm#o933","text":"Current state of a task.  Before being executed by the Task Launch and Monitor (TLM) process, a task has a status of Pending.  During execution, a task has a status of Running.  After execution, a task has a status of Failure or Success.  Context:  Convergent Billing  See also Task Launch and Monitor (TLM) Process.  "},{"id":1113,"title":"Tax Tariff","url":"14849.htm#o934","text":"Tariff that calculates the amount of tax to be paid to the Taxation Department.  Context:  Convergent Billing  See also Tariff.  "},{"id":1114,"title":"TCO","url":"14849.htm#o935","text":"Refer to Total Cost of Ownership.  "},{"id":1115,"title":"Template","url":"14849.htm#o936","text":"Entity containing document processing instructions that are used by the IGP when creating a document image.  The Invoice Design Tool is used to manage template design.  Context:  Convergent Billing, Singleview  See also Document, IGP, and Invoice Design Tool.  "},{"id":1116,"title":"Temporal Entitlement Cache","url":"14849.htm#o59349","text":"Cache responsible for maintaining data on the available amount of entitlement allocations that have been allocated to customers or services.  Context:  Singleview  See also Entitlements and Entitlement Allocation.  "},{"id":1117,"title":"Tenant","url":"14849.htm#o68801","text":"Distinct group of Singleview users that cannot view or interact with each other, or each other's data.  Context:  Convergent Billing  See also Access Level, Form Role, Function Role, Non-tenantable, Security Group, Tenantable, Tenanted, Untenanted, User, and User Profile.  "},{"id":1118,"title":"Tenantable","url":"14849.htm#o75955","text":"An entity that is configured to be tenanted only if it is used in a tenanted Singleview implementation. If it is used in an untenanted Singleview implementation, the entity is considered to be untenanted. Singleview automatically detects and applies the appropriate behaviour.  For example, the following entities can be made tenantable:  Derived attribute tables  Reference types.  Context:  Convergent Billing  See also Tenant, Tenanted, Untenanted, and Non-tenantable.  "},{"id":1119,"title":"Tenanted","url":"14849.htm#o75956","text":"An entity that is configured to be tenanted, or is configured to be tenantable and is being used in a tenanted Singleview implementation. User access to the entity's data is restricted by tenant.   A tenanted Singleview implementation has one or more tenants defined.  Context:  Convergent Billing  See also Tenant, Tenantable, Untenanted, and Non-tenantable.  "},{"id":1120,"title":"TEX","url":"14849.htm#o937","text":"Third party product that produces device independent files used for displaying and printing high quality documents.  TEX can be used during the Invoice Generation Process (IGP) to output documents in a format that can be later displayed and printed.  Context:  Singleview  See also Document, IDTTeX, Invoice Generation Process (IGP), TEX Format, and TEX Template.  "},{"id":1121,"title":"TEX Format","url":"14849.htm#o938","text":"Document written in the TEX formatting language.  Documents written in TEX are set up as templates to be used to generate customer documents.  Context:  Singleview  See also Document, IDTTeX, Invoice Template, Template, and TEX Template.  "},{"id":1122,"title":"TEX Template","url":"14849.htm#o939","text":"Template written in the TEX formatting language.  Context:  Singleview  See also Document, IDTTeX, Invoice Template, and Template.  "},{"id":1123,"title":"Text Fact","url":"14849.htm#o940","text":"Fact with an attribute type of Text.  The value of a text face contains only printable characters.  Context:  Process Engine  "},{"id":1124,"title":"THP","url":"14849.htm#o941","text":"Refer to Tuxedo Handler Process (THP).  "},{"id":1125,"title":"Three Tier Architecture","url":"14849.htm#o942","text":"Divides the user interface, application logic, and data storage into three distinct layers.  The interface layer communicates only with the application or middle layer, which contains the business objects.  The application layer handles the application's processing logic, and in turn, communicates with the database layer, such as an Oracle server.  A three tier application allows the implementation of thin clients, and is much more flexible and easy to maintain than a two or one tier application.  For example, the data storage layer can be substituted completely without having to change a single line of code at the client side (user interface layer).  Context:  Convergent Billing  "},{"id":1126,"title":"Throughput","url":"14849.htm#o943","text":"Rate at which data processing is measured.  Context:  Convergent Billing, Commerce Engine  "},{"id":1127,"title":"Tier 1 Carrier","url":"14849.htm#o944","text":"Service provider that owns 99.9% of its underlying network infrastructure to connect 90% of its customers.  Tier 1 carriers usually provide interconnect access to Tiers 2 and 3 carriers for access to backbone networks for toll calls and high-speed data networks.  Tier 1 carriers usually own the backbone network and some, if not a large share, of the local loop.  This level of access is governed by deregulation in each region.  Context:  Singleview  "},{"id":1128,"title":"Tier 2 Carrier","url":"14849.htm#o945","text":"Service provider that owns some of its underlying network infrastructure and leases a percentage of the network infrastructure from Tier 1 and other Tier 2 carriers to connect 90% of its customers.  Tier 2 carriers may own a portion of the backbone network to connect between their own remote switches, or alternatively, establish interconnect agreements with Tier 1 carriers to access to the Tier 1 network backbone and local loop.  Context:  Singleview  "},{"id":1129,"title":"Tier 3 Carrier","url":"14849.htm#o946","text":"Service provider with no underlying network infrastructure.  It leases all network infrastructure from Tiers 1 and 2 carriers to connect 90% of its customers.  Tier 3 carriers establish interconnect and network leasing agreements with Tiers 1 and 2 carriers to provide service to their customers.  Tier 3 carriers are also known as 'switchless service providers'; the switch is owned by another tiered carrier.  Context:  Singleview  "},{"id":1130,"title":"Title Bar","url":"14849.htm#o947","text":"Top section of a window.  A title bar may display the name of the system and identity of the view, window, or operation in use.  The bar may include conventional Microsoft Windows buttons for controlling the window.  Context:  Singleview  "},{"id":1131,"title":"TLM","url":"14849.htm#o948","text":"Refer to Task Launch and Monitor (TLM) Process.  "},{"id":1132,"title":"TNEF","url":"14849.htm#o58196","text":"Proprietary format used for email attachments by Microsoft Outlook and Microsoft Exchange Server.    Context:  Convergent Billing, Process Engine web client, Customer Management  See also MIME, POP3, SMTP, and SSMTP.  "},{"id":1133,"title":"Tomcat","url":"14849.htm#o72727","text":"See Apache Tomcat.  "},{"id":1134,"title":"Tomcat Instance","url":"14849.htm#o72721","text":"Common authentication and administration area for servers and clients on a network. A Process Engine web client application runs within a deployed Tomcat instance.   Context:  Process Engine web client  See also Application, Apache Tomcat.  "},{"id":1135,"title":"Tool","url":"14849.htm#o949","text":"Component of the Process Engine Configuration Workbench that allows the Process Engine configurer to configure objects.  Context:  Process Engine  "},{"id":1136,"title":"Toolbar","url":"14849.htm#o950","text":"Area of a display reserved for displaying a toolset.  Context:  Convergent Billing, Customer Management, Process Engine  "},{"id":1137,"title":"Toolset","url":"14849.htm#o951","text":"Group of buttons displayed on a toolbar.  Context:  Process Engine  "},{"id":1138,"title":"Total Cost of Ownership","url":"14849.htm#o952","text":"Financial model that helps quantify the budgeted (direct) and unbudgeted (indirect) costs incurred for acquiring, maintaining, and using an application or a computing system.  It normally includes training, upgrades, and administration, and the purchase price.  Context:  Singleview  "},{"id":1139,"title":"TQF","url":"14849.htm#o953","text":"Refer to Tuxedo Queue Forward (TQF) Process.  "},{"id":1140,"title":"Transaction Engine (TRE)","url":"14849.htm#o954","text":"Tuxedo transaction processing middleware, forming the middle tier in a three tier client/server system, configured to:  Act as a communications centre, which routes data between client and server processes.  Provide Application Programming Interfaces (APIs) for communication with external processes.  Provide access to the database for all other client and server processes.  Context:  Convergent Billing  See also TRE API and Tuxedo Service.  "},{"id":1141,"title":"Transactional Server","url":"14849.htm#o955","text":"TRE server (trerwdb) that supports global transactions using the Tuxedo two-phase commit.  A transactional server advertises services that read and write to the database and also ensures the integrity of the transactions.  Context:  Convergent Billing, Process Engine  See also Transaction Engine and Tuxedo Service.  "},{"id":1142,"title":"Transferred Account Number","url":"14849.htm#o62734","text":"Prime account number to which invoice amounts are rolled up.   Available only if the customer is a root customer.    Mandatory if the report level is set to Transferred Statement.  Context:  Singleview  See also Reporting Level.  "},{"id":1143,"title":"Transparent Application Failover (TAF)","url":"14849.htm#o66743","text":"Oracle database feature that allows Singleview processes to fail over to a backup database node.  Context: High Availability  See also Database Failure Auto-Detection.  "},{"id":1144,"title":"Trap","url":"14849.htm#o959","text":"Asynchronous notification message sent to a network management station, when working with SNMP.  A trap sink is a SNMP notification receiver.  Context:  Convergent Billing  See also Simple Network Management Protocol (SNMP) and Notification Generator and Receiver.  "},{"id":1145,"title":"TRE","url":"14849.htm#o960","text":"Refer to Transaction Engine (TRE).  "},{"id":1146,"title":"TRE API","url":"14849.htm#o961","text":"Transaction Engine (TRE) Application Programming Interface (API).  The API provides the interface between the TRE and a remote host in the form of TRE function calls for the following programming languages:  C  Object Pascal  Perl  Java.  Context:  Convergent Billing, Process Engine  See also Transaction Engine.  "},{"id":1147,"title":"Tree Fact Group","url":"14849.htm#o962","text":"Has an ordered structure displayed as a tree.  Tree fact groups are displayed on layouts in the Detail or Tab sections.  The Process Engine client user can view dependencies within the structure.  Context:  Process Engine  "},{"id":1148,"title":"Tree Section","url":"14849.htm#o11333","text":"Displays a hierarchy tree of the objects returned from a search and behaves in the same way as a standard, non-association hierarchy tree.  The Tree section allows search results for classes configured as hierarchies to be displayed in a hierarchical manner.  Context:  Customer Management, Process Engine     "},{"id":1149,"title":"Trigger","url":"14849.htm#o965","text":"Set of conditions specified by the Process Engine configurer that, when satisfied, cause an EPM script to be invoked.  Context:  Process Engine  "},{"id":1150,"title":"Truststore","url":"14849.htm#o55393","text":"File containing trusted certificates.  Context: Convergent Billing, Process Engine web client  "},{"id":1151,"title":"try-except Expression","url":"14849.htm#o966","text":"Used to avoid the default action of an exception error.  The try-except expression takes the form:  try <expression> except <expression>;  Example:  try  {<br>   biReferenceCodeByLabel&(Listing$, Reference$);<br>   return 1;<br>}<br>except<br>{<br>   return 0;<br>}  Context:  Convergent Billing  "},{"id":1152,"title":"Tuxedo","url":"14849.htm#o969","text":"Third party product that provides the framework, or middleware, for multi-tier client/server applications such as Singleview.  Tuxedo provides software services that exist between a client and server, and between the operating system and network services on a system node in a network.  In Convergent Billing, Tuxedo provides the framework for the Transaction Engine (TRE) using multiple Tuxedo services.  Context:  Convergent Billing, Process Engine  See also Transaction Engine and Tuxedo Service.  "},{"id":1153,"title":"Tuxedo Domain","url":"14849.htm#o971","text":"Connects applications logically (and physically) separate.  The configuration is transparent and appears to be a single unit.  Tuxedo Domains are used in multi-instance configurations with each Convergent Billing instance configured as a separate Tuxedo Domain.  Context:  Convergent Billing, Process Engine  See also Tuxedo Gateway and Instance.  "},{"id":1154,"title":"Tuxedo Gateway","url":"14849.htm#o973","text":"Highly asynchronous multitasking server provided by Tuxedo to process service requests to and from remote domains.  In a Convergent Billing multi-instance configuration, gateways allow clients in one domain transparent access to services physically located in remote domains.  Context:  Convergent Billing, High Availability  See also Tuxedo Domain, Failover, and Instance.  "},{"id":1155,"title":"Tuxedo Handler Process (THP)","url":"14849.htm#o974","text":"Proxy for interaction with the TRE used by a Java application or applet to connect to the TRE API for executing TRE commands.  Context:  Convergent Billing, High Availability  See also TRE API and Transaction Engine.  "},{"id":1156,"title":"Tuxedo Queue Forwarder (TQF)","url":"14849.htm#o976","text":"Launched by the BMP when Convergent Billing is started.  The TQF process reads messages from a Tuxedo transaction queue, calls the appropriate service, and passes the requested information.  Context:  Convergent Billing, High Availability  See also TRE API and Transaction Engine.  "},{"id":1157,"title":"Tuxedo Service","url":"14849.htm#o977","text":"Code written to perform a specific application task.  Each service has a service name and is advertised as being available.  Service requests for an advertised service are added to the message queue of the server containing the service.  Context:  Convergent Billing  See also Tuxedo, TRE API, and Transaction Engine.  "},{"id":1158,"title":"Two-phase Commit","url":"14849.htm#o979","text":"Strategy in which changes to a database are temporarily applied.  When it is determined that all parts of a change can be made successfully, the changes are permanently posted to the database.  Context:  Convergent Billing  "},{"id":1159,"title":"Type Fact","url":"14849.htm#o980","text":"Refers to the type fact that groups objects within a class.  Context:  Process Engine  "},{"id":1160,"title":"U","url":"14850.htm","text":""},{"id":1161,"title":"UML","url":"14850.htm#o981","text":"See Unified Modelling Language (UML).  "},{"id":1162,"title":"UML Notation","url":"14850.htm#o984","text":"Visual rendering of data elements.  UML notation is the graphical display of the UML syntax.  The many forms of UML notations include Class diagram, Object diagram, or User case diagram.  Context:  Singleview  See also Unified Modelling Language (UML).  "},{"id":1163,"title":"Unicode","url":"14850.htm#o982","text":"Unicode is a character encoding system designed to support all languages, regardless of platform, program, and programming language.  It provides a unique number, called a code point, for every character.   Unicode code points are represented in the format 'U+' format; for example, the English letter 'A' is represented as 'U+0041'.  Code points are grouped into code blocks for convenience and to represent different languages.   Context:  Convergent Billing, Process Engine  See also Code Point, Unicode Transformation Format (UTF), and Character Set.  "},{"id":1164,"title":"Unicode Transformation Format (UTF)","url":"14850.htm#o983","text":"A Unicode transformation format (UTF) is a mapping from a series of Unicode code points to a unique byte sequence.  Unicode data can be encoded in a variety of ways, including UTF-8 and UTF-16.  A Unicode transformation format is also known as a Unicode encoding form.  Context:  Singleview  See also Unicode and Code Point.  "},{"id":1165,"title":"Unified Modelling Language (UML)","url":"14850.htm#o985","text":"Graphical notation language for the analysis and design of software.  UML is used to present the data model and class diagrams in abstract and meta models.  It is based on the object-oriented model.  Context:  Singleview  See also Abstract Model, Meta Model, and UML Notation.  "},{"id":1166,"title":"Unplanned Outage","url":"14850.htm#o986","text":"Unscheduled loss of service, usually due to a failure.  Context:  Convergent Billing, Commerce Engine, High Availability  See also Failure.  "},{"id":1167,"title":"Untenanted","url":"14850.htm#o75958","text":"An entity that is not configured to be tenanted, or is configured to be tenantable and is being used in an untenanted Singleview implementation.   An untenanted Singleview implementation has no tenants defined.  Context:  Convergent Billing  See also Tenant, Tenantable, Tenanted, and Non-tenantable.  "},{"id":1168,"title":"Update Permission","url":"14850.htm#o58780","text":"Permission attribute that gives a user authority to modify items with the associated security group.  Context:  Process Engine  "},{"id":1169,"title":"Update Privilege","url":"14850.htm#o988","text":"Access level required by a user to update current and future records.  Context:  Convergent Billing  See also Access Level, Date Ranging, and Historical Update Privilege.  "},{"id":1170,"title":"Usage Tariff","url":"14850.htm#o989","text":"Calculates the charges owed by a customer for use of services, equipment, and facilities.  Context:  Convergent Billing  See also Equipment, Facility, Service, and Tariff.  "},{"id":1171,"title":"User","url":"14850.htm#o53689","text":"User-defined, is the entity that controls access to Singleview and its elements.  A user's access to forms and data, and the range of permitted operations (for example, update or delete), is controlled using a profile.  User is shared between Convergent Billing and Process Engine.  Context:  Convergent Billing, Process Engine, Configuration Studio  See also Access Level, Security Group, User Profile, Form Role, and Work Group.  "},{"id":1172,"title":"User-defined Function","url":"14850.htm#o14873","text":"Refer to Function Type.  "},{"id":1173,"title":"UTF","url":"14850.htm#o992","text":"See Unicode Transformation Format (UTF).  "},{"id":1174,"title":"User Profile","url":"14850.htm#o53709","text":"Set of attributes to control a user's access to, and usage of, elements of Convergent Billing and Process Engine.   Context:  Convergent Billing, Process Engine, Configuration Studio  See also Access Level, Permission, Security Group, User, Form Role, and Work Group.  "},{"id":1175,"title":"V","url":"14851.htm","text":""},{"id":1176,"title":"Validation","url":"14851.htm#o993","text":"Process of automatically checking data against predefined requirements.  Context:  Convergent Billing, Customer Management, Process Engine  See also Data Validation.  "},{"id":1177,"title":"Validation Table","url":"14851.htm#o994","text":"Table used within entity validation that contains a group of generic fields, including general fields, which can be customised.  Each table represents a specific area such as accounts, addresses, adjustments, and so on.  Context:  Convergent Billing  See also Entity Validation and Parent Table.  "},{"id":1178,"title":"Variable","url":"14851.htm#o995","text":"Named entity containing a value that is referenced in Convergent Billing.  A variable is a field in a database record or a more complex expression based entity (containing other variables, calculated values, and constants).  Convergent Billing supports the following types of variable:  Local variables  Direct variables  Entity validation variables  Functions  Derived attributes  Subtotals  Tariffs.  Variables have specialised properties such as data type, context, and application environment, and are generally used in expressions.  Context:  Convergent Billing  See also Application Environment, Context, Data Type, Derived Attribute, Direct Variable, Entity Validation, Expression, Function, Lists, Subtotal, and Tariff.  "},{"id":1179,"title":"Variable Assignment","url":"14851.htm#o996","text":"The following is the order of variable assignments in EPM expressions:  Evaluate the left-hand side of the assignment; the result is a variable reference.  Evaluate the right-hand side of the assignment.  Assign the right-hand side result to the left-hand side variable reference.  Context:  Convergent Billing  "},{"id":1180,"title":"Variable Definition Expression","url":"14851.htm#o997","text":"Used to define a local variable.  The scope of the variable begins when it is defined, and lasts to the end of the current expression block or function.  The variable can be assigned a value as it is declared.  Within its scope, this type of variable takes precedence over any other variable of the same name.  Context:  Convergent Billing  See also Expression and Expression Type.  "},{"id":1181,"title":"Vertical Scalability","url":"14851.htm#o999","text":"Scalability achieved by increasing the size of a single node on which Convergent Billing operates (including adding more CPUs and memory).  Context:  Convergent Billing, High Availability  See also Horizontal Scalability, Node, Scalable, and System.  "},{"id":1182,"title":"View","url":"14851.htm#o1000","text":"Windows of information from one or more of the database tables.   Examples of these in Convergent Billing are the TRE views (for example, the PAYMENT_TRE_V view that combines values from five different tables to provide information that can be used by the biPayment service).  The Process Engine client can have a view configured for any class.  Each view displays sections dependant on what the user selected.  Context:  Convergent Billing, Customer Management, Process Engine, High Availability  See also Service, Action View, Case View, and Contact View.  "},{"id":1183,"title":"View-only Field","url":"14851.htm#o1001","text":"Used primarily to display information that cannot be edited on the current form or view.  Typically, view-only fields display information referenced by the current record.  For example, the name of the master derived attribute is referenced and displayed in a view-only field when a slave derived attribute is defined.  Context:  Convergent Billing, Customer Management, Process Engine  See also Disabled Field and Form.  "},{"id":1184,"title":"VIP","url":"14851.htm#o73836","text":"Refer to Virtual IP Address.  "},{"id":1185,"title":"Virtual IP Address","url":"14851.htm#o73835","text":"IP address(es) configured in Oracle Clusterware to point to a Singleview application server(s). This IP address can be configured to point to the server on which the active Singleview instance is running, negating the need for client configuration changes as a result of switchover.  Context:  Singleview, High Availability  See also Switchover.  "},{"id":1186,"title":"W","url":"14852.htm","text":""},{"id":1187,"title":"Web Services Description Language (WSDL)","url":"14852.htm#o63255","text":"XML-based service description that describes public interface, protocol bindings, and message formats required to interact with a Web service.    It can be used with SOAP, and is extensible to allow description of endpoints and their messages regardless of what message formats or network protocols are used for communication.  Context:  Singleview  See also SOAP.   "},{"id":1188,"title":"while Expression","url":"14852.htm#o1002","text":"Causes an expression to be evaluated while a conditional expression is TRUE.  The while expression takes the form:  while <single expression> do <expression>;  Example:  while CustomerType$ [count&] = 'Special' do {  \trefund# += bonus#[count&++];<br>}  Context:  Convergent Billing  "},{"id":1189,"title":"Wildcard","url":"14852.htm#o1003","text":"Predefined symbol used as a substitute for one or more characters in a search string.  For example:  _ (underscore) for a single character  % (percentage) for one or more characters.  Context:  Singleview  "},{"id":1190,"title":"Work Group","url":"14852.htm#o53688","text":"Group of users with similar roles to whom actions or queries can be assigned. Each user is associated with a specific work group and is permitted to progress a query to another work group (if the work group is specified as one of a predefined set of work groups for that user).  Context:  Convergent Billing, Customer Management, Process Engine  See also Action, Action Group, Progress, Query, and User.  "},{"id":1191,"title":"Workflow","url":"14852.htm#o55267","text":"Sequencing of actions to ensure work tasks are completed by appropriate individuals or work groups.  Context:  Customer Management, Process Engine  See also Action, Action Group, Query, and Work Group.  "},{"id":1192,"title":"Workflow Engine","url":"14852.htm#o69464","text":"Software application that manages and executes modelled computer processes.  A workflow engine facilitates the flow of information, tasks, and events.   Context:  Singleview  See also Work Item.   "},{"id":1193,"title":"Work Item","url":"14852.htm#o69468","text":"Single node in a business process flowchart.    Context:  Singleview  See also Business Process, and Workflow Engine.  "},{"id":1194,"title":"WSDL","url":"14852.htm#o63256","text":"Refer to Web Services Description Language (WSDL).  "},{"id":1195,"title":"WS-I Basic Profiles (BP)","url":"14852.htm#o75207","text":"Specification from the Web Services Interoperability industry consortium (WS-I) providing interoperability guidance for core Web Services specifications such as SOAP and Web Services Description Language (WSDL).&nbsp;   It uses WSDL to enable the description of services as sets of endpoints operating on messages.  Context:  Singleview  See also SOAP and WSDL.  "},{"id":1196,"title":"X","url":"14853.htm","text":""},{"id":1197,"title":"X/Open XA","url":"14853.htm#o53077","text":"Interface specification that describes the protocol for transaction coordination, commitment, and recovery between a transaction manager and one or more local resource managers.  XA uses a two-phase commit to ensure that all resources consistently either commit or roll back a transaction.  Context:  Convergent Billing, Process Engine  "},{"id":1198,"title":"XA","url":"14853.htm#o53075","text":"Refer to X/Open XA.  "},{"id":1199,"title":"XBRL","url":"14853.htm#o11328","text":"Refer to eXtensible Business Reporting Language (XBRL).  "},{"id":1200,"title":"XLIFF","url":"14853.htm#o55425","text":"Abbreviation for XML Localization Interchange File Format. XLIFF is an XML-based file format for exchanging localisation data. It focuses on text requiring translation.  Context: Process Engine web client  "},{"id":1201,"title":"XML","url":"14853.htm#o1011","text":"Refer to Extensible Markup Language (XML).  "},{"id":1202,"title":"XML Schema","url":"14853.htm#o53459","text":"Schema that expresses shared vocabularies and allows machines to carry out rules made by people.  It defines the structure, content, and semantics of XML documents.  XML schema files are used in Singleview to create and maintain external definitions.  Context:  Singleview, Convergent Billing  See also Extensible Markup Language (XML) and External Definition.  "},{"id":1203,"title":"XSI","url":"14853.htm#o1015","text":"External Systems Interface.  A group of processes on the server that handles communication with external systems.  Context:  Convergent Billing, Process Engine  "},{"id":1204,"title":"XSL","url":"14853.htm#o31413","text":"Refer to Extensible Stylesheet Language (XSL).  "},{"id":1205,"title":"XSLT","url":"14853.htm#o31414","text":"Refer to Extensible Stylesheet Language Transformation (XSLT).  "},{"id":1206,"title":"Z","url":"14854.htm","text":""},{"id":1207,"title":"Zoom","url":"14854.htm#o1017","text":"Process of selecting an item and opening another window that provides more detail in the Process Engine client.  Context:  Process Engine  "}]}