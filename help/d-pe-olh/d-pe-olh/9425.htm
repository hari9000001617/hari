<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> ObjectInsert@() </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Online Help for Configuration Workbench for Singleview Process Engine 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "37926.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "52839.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('57331');expand('11011');highlight('9425')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="37926.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="52839.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Online Help for Configuration Workbench for Singleview Process Engine 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h3 class="heading3">ObjectInsert@()</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'ObjectInsert@()' (9425)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="syntaxheading">Syntax</p>
<pre class="unixinputp">ObjectInsert@(    class@,    facts@[],    factValues?[])</pre>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Description</p>
<p class="bodytext">Inserts an object of a specified class with specified fact values.  </p>
<p class="syntaxheading">Parameters</p>
<table class="tableintopic" width="696" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="126"><p class="tableheading">Parameter</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="570"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="126"><p class="tablebodytext"><span class="unixoutputc">class@</span></p>
</td>
<td style="border:1px solid #010101;" width="570"><p class="tablebodytext">Class of new object to insert.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="126"><p class="tablebodytext"><span class="unixoutputc">fact@[]</span></p>
</td>
<td style="border:1px solid #010101;" width="570"><p class="tablebodytext">Facts to be used when creating a new object.</p>
<p class="tablebodytext">The object type of the facts must be compatible with the type of the object being created.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="126"><p class="tablebodytext"><span class="unixoutputc">factValues?[]</span></p>
</td>
<td style="border:1px solid #010101;" width="570"><p class="tablebodytext">Fact values to be used when creating a new object.</p>
<p class="tablebodytext">The fact values can be converted.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Returns</p>
<p class="bodytext">OID of the inserted object, or null or undefined if no object was created.</p>
<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="note">Null is returned if an association object is specified but the association exists; that is, a duplicate association object is not created.</p></td></tr></table>
<p class="syntaxheading">Remarks</p>
<p class="bodytext">The function is commonly used to create action and issue action associations for action type triggers.</p>

<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><ul class="notelistbullet"><li class="notelistbullet">Unless specifically instructed through a call to<span class="unixoutputc"> ObjectInsert@()</span> in the EPM, the only association object the server creates automatically is a Case_Action object where an Action object is inserted and there is a Case object in the current transaction context.  </li><li class="notelistbullet">It is recommended that <span class="unixoutputc">TempObjectCreate@()</span> be used instead of this function when creating temporary or external objects because it is more efficient.</li></td></tr></table></ul><p class="syntaxheading">Example 1</p>
<p class="bodytext">With a trigger on the Case class, insert an issue of type Billing Inquiry with the issue's Case fact set to the current case:</p>
<pre class="unixoutputp">{<br>    const thisCase@ := CurrentObjectGet@();<br>    const enquiryType@ := StaticObj@('Issue_Type', 'Billing Inquiry');<br>    const myIssue@ := ObjectInsert@(Class:Issue@,<br>                 [Fact:Issue.Case@, Fact:Issue.Type@],<br>                 [thisCase@, enquiryType@]);<br>}</pre>
<p class="syntaxheading">Example 2</p>
<p class="bodytext">With a trigger on Order class, insert an OrderedProd object, associated with the current order object:</p>
<pre class="unixoutputp">{<br>    const thisOrder@ := CurrentObjectGet@();<br>    const prodType@ := StaticObj@('Purchased_Item_Type', 'Base Product');<br>    const newProd@ :=  ObjectInsert@(Class:OrderedProd@,<br>    [Fact:OrderedProd.Order@, Fact:OrderedProd.ProductType_R@],<br>    [thisOrder@,prodType@]);<br>}</pre>
<p class="syntaxheading">Example 3</p>
<p class="bodytext">This example uses reference facts instead of static objects.</p>
<p class="bodytext">With a trigger on OrderedProd class, create a new OrderedComp object and associate it with the current ordered product object:</p>
<pre class="unixoutputp">{<br>    const thisOrdProd@ := CurrentObjectGet@();<br>    const SelProdStruc@:= to_blob(ObjectFactGet?(thisOrdProd@,</pre>
<pre class="unixoutputp">    Fact:OrderedProd.SelectServ_R@));<br>    CompType@ := to_blob(ObjectFactGet?(SelProdStruc@,<br>                        Fact:ProdStruc.Type_R@));<br>    const newServ@ :=  ObjectInsert@(Class:OrderedComp@,<br>    [Fact:OrderedComp.OrderedProd@,<br>                          Fact:OrderedComp.Type_R@],<br>                         [thisOrdProd@,CompType@]);<br>}</pre>
<p class="syntaxheading">Example 4</p>
<p class="bodytext">Insert an object into a non-association class (for example, the Action class):</p>
<pre class="unixoutputp">{<br>    const thisOrder@ :=CurrentObjectGet@();<br>    const CustAcct@ := to_blob@(ObjectFactGet?(thisOrder@,Fact:Order.CustAcctOrd_R@));<br>    # Create the Action Object<br>    const newAction@ := ObjectInsert@(Class:Action@,<br>        [Fact:Action.Type@, Fact:Action.CustAcct_R@],<br>        [StaticObj@('Action_Type', 'Order In Progress'), CustAcct@]);<br>}</pre>
<table class="cautionstyle" width="100%"><tr><td><p class="caution">Caution:</p><p class="caution">Pass the Type fact as the first fact for a non-association class, or as the second fact for an association class, because there are often many dependencies on the Type fact of a dynamic class.  Passing the Type fact as the first or second fact in the function call ensures that the Type fact is set or updated when:</p><ul class="cautionlistbullet"><li class="cautionlistbullet">Derivation expressions are parsed.</li><li class="cautionlistbullet">Any After Fact Update or After Group Update triggers are assessed for firing.  </li></td></tr></table></ul><p class="bodytext">Passing the Type fact as the first or second fact is important when creating an After Fact Update trigger which has the Type fact set for a defined class.  If the class's Type fact is not set, and the trigger's Group fact has a dependency on another fact that is defined before the class Type fact, the After Fact Update trigger does not fire as expected.</p>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="37926.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="52839.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Online Help for Configuration Workbench for Singleview Process Engine 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


