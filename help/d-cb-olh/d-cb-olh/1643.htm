<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> Arrays </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Online Help for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "1647.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "40866.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('4501');highlight('1643')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="1647.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="40866.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Online Help for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h2 class="heading2">Arrays</h2>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Arrays' (1643)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Arrays can be defined in Convergent Billing as local variables in expression blocks and functions, subject to the following conditions:</p>
<ul class="listbullet"><li class="listbullet">Arrays are defined using the following syntax:  <p class="listcontinue"><span class="unixoutputc">&lt;array name&gt;&lt;scalar type&gt;[]</span></p>
<p class="listcontinue">The <span class="unixoutputc">&lt;scalar type&gt;</span> defines the data type of each element in the array.  For example, <span class="unixoutputc">var charges#[]</span> defines an array of real data type.</p>
</li><li class="listbullet">Array elements are referenced using the following syntax:<p class="listcontinue"><span class="unixoutputc">&lt;array name&gt;&lt;scalar type&gt;[&lt;expression&gt;]</span></p>
<p class="listcontinue">The &lt;expression&gt; must evaluate to an integer.  For example, <span class="unixoutputc">charges#</span> <span class="unixoutputc">[1] := '5.25'</span> assigns the value '<span class="unixoutputc">5.25</span>' to the second element of the array (the first element is <span class="unixoutputc">charges#</span> <span class="unixoutputc">[0]</span>).</p>
</li></ul><p class="bodytext">The following table lists examples of array usage.</p>
<p class="bodytext">&nbsp;</p>
<table class="tableintopic" width="636" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="288"><p class="tableheading">Example</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="348"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="288"><p class="tablebodytext"><span class="unixoutputc">a$[10]</span></p>
</td>
<td style="border:1px solid #010101;" width="348"><p class="tablebodytext">Accesses the array element.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="288"><p class="tablebodytext"><span class="unixoutputc">a$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="348"><p class="tablebodytext">Accesses the array as a whole.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="288"><p class="tablebodytext"><span class="unixoutputc">var b?[];b$[0][] := a$[];</span></p>
</td>
<td style="border:1px solid #010101;" width="348"><p class="tablebodytext">Assigns an array to an array element.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="288"><p class="tablebodytext"><span class="unixoutputc">b$ [0][0] := 'expression';</span></p>
</td>
<td style="border:1px solid #010101;" width="348"><p class="tablebodytext">Assigns an element in a two-dimensional array.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="288"><p class="tablebodytext"><span class="unixoutputc">var b?[];b$[0]{} := a${};</span></p>
</td>
<td style="border:1px solid #010101;" width="348"><p class="tablebodytext">Assigns a hash to an array element.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="288"><p class="tablebodytext"><span class="unixoutputc">b$[0]{'First'} := 'FirstValue';</span></p>
</td>
<td style="border:1px solid #010101;" width="348"><p class="tablebodytext">Assigns an element of a hash within an array.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>

<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><ul class="notelistbullet"><li class="notelistbullet">Array variables expand dynamically to accommodate new elements, limited only by available memory.</li><li class="notelistbullet">Only arrays with the 'unknown' scalar type support nested arrays and hashes.  Nested arrays and hashes are implicitly created as they are referenced.  There is no limit to the depth at which arrays or hashes can be nested.</li><li class="notelistbullet">An array cannot be declared with multiple dimensions.  For example, the following is incorrect:<p class="listcontinue"><span class="unixoutputc">var a?[ ][ ];</span></p>
<p class="listcontinue">To create a multi-dimensional array, a single-dimensional array of unknown type must first be declared, and then the nested arrays (or hashes) are accessed as required.</p>
</li><li class="notelistbullet">An array variable is uniquely identified by its name only, as opposed to scalar variables, which are uniquely identified by name and type.  For example, the following is incorrect:<p class="listcontinue"><span class="unixoutputc">var a&amp;[ ], a$[ ];</span></p>
<p class="listcontinue">The variable <span class="unixoutputc">a</span> has already been declared to be of type integer array, and cannot be declared to be of type string array in the same scope.</p>
</li><li class="notelistbullet">Arrays, hashes, and scalar variables have their own namespaces.  For example, <span class="unixoutputc">var a&amp;[ ],a${</span> <span class="unixoutputc">},</span> <span class="unixoutputc">a$,</span> <span class="unixoutputc">a&amp;,</span> <span class="unixoutputc">a#,</span> <span class="unixoutputc">a~,</span> is sound, but to avoid confusion it is not recommended.</li><li class="notelistbullet">To access or assign a value as a specific type in an unknown array, use the appropriate data type suffix; for example:<p class="listcontinue"><span class="unixoutputc">var a?[];</span><br><span class="unixoutputc">a$[0] := 'Sample String';</span><br><span class="unixoutputc">#Assign string value to first element of a?[]</span></p>
</li><li class="notelistbullet"><span class="unixoutputc">a$[0]</span> is not equivalent to <span class="unixoutputc">to_string(a?[0])</span>.  The expression <span class="unixoutputc">a$[0]</span> results in a runtime error if the value stored in the first element of the <span class="unixoutputc">a?[]</span> is not a string, whereas <span class="unixoutputc">to_string(a?[0])</span> converts the value to a string (using default formats for integers, reals, and dates) if it is not already a string. <p class="listcontinue">In general, the value accessed must be of the type specified, or a runtime error occurs, although casting between integer and real values is permitted.  However, accessing a real value as an integer changes the value stored in the element to an integer, and accessing a integer as a real value changes the value stored in the element to a real value; for example:</p>
<p class="listcontinue"><span class="unixoutputc">var a?[];</span><br><span class="unixoutputc">a#[0] := 1.1;</span><br><span class="unixoutputc">if (a&amp;[0] &gt; 0) then # Implicit casting to Integer</span><br><span class="unixoutputc">print(a#[0]); # This prints 1, NOT 1.1</span></p>
</li><li class="notelistbullet">Data types in an anonymous array determine the data type of the array.  If the data types are not all the same, the data type of the <a id="h1644" class="jump" title="Anonymous Arrays" href="1645.htm" target="_self">anonymous array</a> is unknown.</li></td></tr></table></ul>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="1647.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="40866.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Online Help for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


