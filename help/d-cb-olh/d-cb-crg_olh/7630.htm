<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> Object Pascal Function Calls </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Configurer's Reference Guide for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "7629.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "7631.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('7625');expand('51074');highlight('7630')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="7629.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="7631.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h3 class="heading3">Object Pascal Function Calls</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Object Pascal Function Calls' (7630)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="syntaxheading">Types</p>
<pre class="unixoutputp"><span class="unixoutputc">PTreVariant = ^TTrevariant;</span></pre>
<pre class="unixoutputp">    <span class="unixoutputc">PTreHashValue = ^TTreHashValue;</span></pre>
<pre class="unixoutputp">    <span class="unixoutputc">TTreVariant = record</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">NullInd:  SmallInt;    { Mandatory: TRE_NULL or TRE_NOTNULL }</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">case TreType: TRE_DATATYPE of</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">TRE_LONG, TRE_VAR or TRE_LONG:</span></pre>
<pre class="unixoutputp">            <span class="unixoutputc">(VLong:  Int64);</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">TRE_DOUBLE, TRE_VAR or TRE_DOUBLE:</span></pre>
<pre class="unixoutputp">            <span class="unixoutputc">(VDouble: Double);</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">TRE_STRING, TRE_VAR or TRE_STRING:</span></pre>
<pre class="unixoutputp">            <span class="unixoutputc">(VPChar: PChar);</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">TRE_WSTRING, TRE_VAR or TRE_WSTRING:</span></pre>
<pre class="unixoutputp">            <span class="unixoutputc">(VPWChar: PWideChar);</span><br>        <span class="unixoutputc">TRE_DATETIME, TRE_VAR or TRE_DATETIME:</span></pre>
<pre class="unixoutputp">            <span class="unixoutputc">(VTJTime_t: TJTime_t);</span></pre>
<pre class="unixoutputp">        <span class="unixoutputc">TRE_BLOB, TRE_VAR or TRE_BLOB:</span></pre>
<pre class="unixoutputp">            (VBlobSize: Int64; VBlobData: PChar);</pre>
<pre class="unixoutputp">        TRE_UNKNOWN, TRE_VAR or TRE_UNKNOWN:</pre>
<pre class="unixoutputp">            ();                { Scalar unknown must be NULL }</pre>
<pre class="unixoutputp">        TRE_ARRAY or TRE_LONG, TRE_VAR or TRE_ARRAY or TRE_LONG,</pre>
<pre class="unixoutputp">        TRE_ARRAY or TRE_DOUBLE, TRE_VAR or TRE_ARRAY or TRE_DOUBLE,</pre>
<pre class="unixoutputp">        TRE_ARRAY or TRE_STRING, TRE_VAR or TRE_ARRAY or TRE_STRING,</pre>
<pre class="unixoutputp">        TRE_ARRAY or TRE_WSTRING, TRE_VAR or TRE_ARRAY or TRE_WSTRING,</pre>
<pre class="unixoutputp">        TRE_ARRAY or TRE_DATETIME, TRE_VAR or TRE_ARRAY or TRE_DATETIME,</pre>
<pre class="unixoutputp">        TRE_ARRAY or TRE_UNKNOWN, TRE_VAR or TRE_ARRAY or TRE_UNKNOWN:</pre>
<pre class="unixoutputp">            (VArraySize: Int64; VArrayElements:  PTreVariant);</pre>
<pre class="unixoutputp">        TRE_HASH or TRE_LONG, TRE_VAR or TRE_HASH or TRE_LONG,</pre>
<pre class="unixoutputp">        TRE_HASH or TRE_DOUBLE, TRE_VAR or TRE_HASH or TRE_DOUBLE,</pre>
<pre class="unixoutputp">        TRE_HASH or TRE_STRING, TRE_VAR or TRE_HASH or TRE_STRING,</pre>
<pre class="unixoutputp">        TRE_HASH or TRE_WSTRING, TRE_VAR or TRE_HASH or TRE_WSTRING,</pre>
<pre class="unixoutputp">        TRE_HASH or TRE_DATETIME, TRE_VAR or TRE_HASH or TRE_DATETIME,</pre>
<pre class="unixoutputp">        TRE_HASH or TRE_UNKNOWN, TRE_VAR or TRE_HASH or TRE_UNKNOWN:</pre>
<pre class="unixoutputp">            (VHashSize: Int64; VHashElements:  PTreHashValue);</pre>
<pre class="unixoutputp">    end;</pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp">    TTreHashValue = record</pre>
<pre class="unixoutputp">        Key: PChar;</pre>
<pre class="unixoutputp">        Value: TTreVariant;</pre>
<pre class="unixoutputp">    end;</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Memory Management</p>
<pre class="unixoutputp">function treMalloc(Size: TSize_t): Pointer</pre>
<pre class="unixoutputp">function treMallocString(String: PChar): Pchar</pre>
<pre class="unixoutputp">function treMallocWString(WString: PWideChar): PWideChar</pre>
<pre class="unixoutputp">function treReAlloc(Ptr: Pointer; Size: TSize_t): Pointer</pre>
<pre class="unixoutputp">function treFreeVariant(Variant: PTreVariant): TRE_RESULT</pre>
<pre class="unixoutputp">function treFreeVariantArray(NrParams: Int64; VariantArray: PTreVariant):</pre>
<pre class="unixoutputp">                        TRE_RESULT</pre>
<pre class="unixoutputp">function treCopyVariant(Destination: PTreVariant; Source: PTreVariant):</pre>
<pre class="unixoutputp">                        TRE_RESULT</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Deprecated Interfaces</p>
<pre class="unixoutputp">function treFree(Ptr: Pointer): TRE_RESULT</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Connection Management</p>
<pre class="unixoutputp">function treInit(ConfigDir: PChar; WsEnvFile: PChar): TRE_RESULT</pre>
<pre class="unixoutputp">function treConnect(UserName: PChar; Password: PChar; ClientName: Pchar):</pre>
<pre class="unixoutputp">                        TRE_RESULT</pre>
<pre class="unixoutputp">function treConnectNewPassword(UserName: PChar; OldPassword: PChar;</pre>
<pre class="unixoutputp">                        NewPassword: PChar; ClientName: PChar): TRE_RESULT</pre>
<pre class="unixoutputp">function treConnectExternal(Username: PChar, </pre>
<pre class="unixoutputp">                        Blob: Pointer, </pre>
<pre class="unixoutputp">                        Len: TSize_t, </pre>
<pre class="unixoutputp">                        ClientName: PChar</pre>
<pre class="unixoutputp">                        ): TRE_RESULT function</pre>
<pre class="unixoutputp">treConnectExternalFlags(Username: PChar, </pre>
<pre class="unixoutputp">                        Blob: Pointer, </pre>
<pre class="unixoutputp">                        Len: TSize_t, </pre>
<pre class="unixoutputp">                        ClientName: PChar, </pre>
<pre class="unixoutputp">                        Flags: Int64<br>                        ): TRE_RESULT</pre>
<pre class="unixoutputp">function treConnectExternalFlagsPE(Username: PChar, </pre>
<pre class="unixoutputp">                        Blob: Pointer, </pre>
<pre class="unixoutputp">                        Len: TSize_t, </pre>
<pre class="unixoutputp">                        ClientName: PChar, </pre>
<pre class="unixoutputp">                        Flags: Int64</pre>
<pre class="unixoutputp">                        ClientType: TRE_CT_CLIENT_TYPE,</pre>
<pre class="unixoutputp">                        VerClient: PChar, </pre>
<pre class="unixoutputp">                        ISOCode: PChar</pre>
<pre class="unixoutputp">                        ): TRE_RESULT </pre>
<pre class="unixoutputp">function treDisconnect: TRE_RESULT</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Transaction Management</p>
<pre class="unixoutputp">function treBegin(Timeout: Int64): TRE_RESULT</pre>
<pre class="unixoutputp">function treCommit: TRE_RESULT</pre>
<pre class="unixoutputp">function treRollback: TRE_RESULT</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Error Handling</p>
<pre class="unixoutputp">function treGetErrno: Integer</pre>
<pre class="unixoutputp">function treErrmsg: Pchar</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Overflow Handling</p>
<pre class="unixoutputp">function treGetLongConversion: Integer</pre>
<pre class="unixoutputp">procedure treSetLongConversion(mode: Integer)</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Remote Function Invocation</p>
<pre class="unixoutputp">function treRegisterEpmFn(Epm: Pointer; FnDefn: Pchar; EffectiveStartDate:</pre>
<pre class="unixoutputp">                        TJTime_t; EffectiveEndDate: TJTime_t; ServiceName:</pre>
<pre class="unixoutputp">                        Pchar; Flags: Int64): TRE_RESULT</pre>
<pre class="unixoutputp">function treVariantCall(FnName: PChar; EffectiveDate: TJTime_t;</pre>
<pre class="unixoutputp">                        Flags: Int64; ReturnValue: PTreVariant;</pre>
<pre class="unixoutputp">                        NrParams: Int64;</pre>
<pre class="unixoutputp">                        ArgList: PTreVariant):TRE_RESULT</pre>
<pre class="unixoutputp">procedure treQueueTimeSet(DequeueTime: TJTime_t)</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Deprecated Interfaces</p>
<pre class="unixoutputp">function treRegisterFn(FnDefn: PChar; EffectiveStartDate: TJTime_t;</pre>
<pre class="unixoutputp">                        EffectiveEndDate: TJTime_t; ServiceName: PChar;</pre>
<pre class="unixoutputp">                        Flags: Int64): TRE_RESULT</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Event Handling and Client Notification</p>
<pre class="unixoutputp">function treClientNotify(ClientID: Pchar; NotificationName: Pchar;</pre>
<pre class="unixoutputp">                        FieldValues: TTreVariant):TRE_RESULT</pre>
<pre class="unixoutputp">function treClientNotifyWait(ClientID: Pchar; NotificationName: Pchar;</pre>
<pre class="unixoutputp">                        FieldValues: TTreVariant):TRE_RESULT</pre>
<pre class="unixoutputp">function treEventCheck(var EventCount: Int64): TRE_RESULT</pre>
<pre class="unixoutputp">function treEventPostx(EventName: PChar; FieldValues:</pre>
<pre class="unixoutputp">                        TTreVariant):TRE_RESULT</pre>
<pre class="unixoutputp">function treEventPostWait(EventName: PChar, ErrorId: Int64; ErrorMsg:</pre>
<pre class="unixoutputp">                        PChar; Param1, Param2, Param3, Param4, Param5:<br>                        PChar; var NrRecipients: Int64): TRE_RESULT</pre>
<pre class="unixoutputp">function treEventPostWaitx(EventName: PChar; FieldValues: TTreVariant; var</pre>
<pre class="unixoutputp">                        NrRecipients: Int64): TRE_RESULT</pre>
<pre class="unixoutputp">function treEventSetEpmHandlerx(Handler: TtreEventEpmHandlerx): TRE_RESULT</pre>
<pre class="unixoutputp">function treEventSetHandler(Handler: TTreEventHandler): TRE_RESULT</pre>
<pre class="unixoutputp">function treEventSetHandlerx(Handler: TTreEventHandlerx): TRE_RESULT</pre>
<pre class="unixoutputp">function treEventSubscribe(EventPattern: PChar): Int64</pre>
<pre class="unixoutputp">function treEventUnsubscribe(SubscribeHandle: Int64): TRE_RESULT</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Tracing</p>
<pre class="unixoutputp">procedure treTraceOn(FileName: PChar)</pre>
<pre class="unixoutputp">procedure treTraceOff</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Data Type Conversion</p>
<pre class="unixoutputp">function treDateTimeToJTime_t(l_Value: TDateTime): TJTime_t</pre>
<pre class="unixoutputp">function treJTime_tToDateTime(l_Value: TJTime_t): TdateTime</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Miscellaneous</p>
<pre class="unixoutputp">function treParseFn(FnDefn: PChar; FnName: PChar; var ReturnType:</pre>
<pre class="unixoutputp">                        TRE_DATATYPE; var&nbsp;NrParams: Int64;</pre>
<pre class="unixoutputp">                        ParamTypes: PInt64): TRE_RESULT</pre>
<pre class="unixoutputp">function treOperatorGetId : Int64;</pre>
<pre class="unixoutputp">function treOperatorSetId(NewOperatorId: Int64): TRE_RESULT<br>function treOperatorGetSessionId: Int64;</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Statistics</p>
<pre class="unixoutputp">function treStats : PTreVariant</pre>
<pre class="unixoutputp">procedure treStatsOn</pre>
<pre class="unixoutputp">procedure treStatsOff</pre>
<pre class="unixoutputp">procedure treStatsReset</pre>
<pre class="unixoutputp"></pre>
<p class="syntaxheading">Deprecated Interfaces</p>
<pre class="unixoutputp">function treEventPost(EventName: PChar; ErrorId: Int64; ErrorMsg: PChar;</pre>
<pre class="unixoutputp">                        Param1, Param2, Param3, Param4, Param5: PChar):</pre>
<pre class="unixoutputp">                        TRE_RESULT</pre>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="7629.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="7631.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


