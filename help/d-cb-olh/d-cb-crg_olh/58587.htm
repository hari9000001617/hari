<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> fEV_ProdInstUpdate&amp;() </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Configurer's Reference Guide for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "28119.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "77362.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('51544');expand('28068');expand('45618');highlight('58587')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="28119.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="77362.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h4 class="heading4">fEV_ProdInstUpdate&amp;()</h4>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'fEV_ProdInstUpdate&amp;()' (58587)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="syntaxheading">Syntax</p>
<table class="tableintopic" width="516" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td class="tableheading" width="234"><p class="tableheading">Interface 1</p>
</td>
<td width="48"><p class="tablebodytext">&nbsp;</p>
</td>
<td class="tableheading" width="234"><p class="tableheading">Interface 2</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="234"><pre class="unixinputp">fEV_ProdInstUpdate&amp;(    prodInstId&amp;,    effectiveDate~,    var lastModified~,    const fieldNames$[],    const fieldValues?[])&nbsp;</pre>
</td>
<td width="48"><p class="tablebodytext">&nbsp;</p>
</td>
<td width="234"><pre class="unixinputp">fEV_ProdInstUpdate&amp;(    prodInstId&amp;,    effectiveDate~,    var lastModified~,    const fieldValues?{})</pre>
</td>
</tr>
<tr align="left" valign="top">
<td class="tableheading" width="234"><p class="tableheading">Interface 3</p>
</td>
<td width="48"><p class="tablebodytext">&nbsp;</p>
</td>
<td class="tableheading" width="234"><p class="tableheading">Interface 4</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="234"><pre class="unixinputp">fEV_ProdInstUpdate&amp;(    const Keys?{},    var LastModified~,    const FieldValues?{})</pre>
</td>
<td width="48"><p class="tablebodytext">&nbsp;</p>
</td>
<td width="234"><pre class="unixinputp">fEV_ProdInstUpdate&amp;(    const Keys?{},    var LastModified~,    const FieldValues?{},    var IdentifierKeys?{})&nbsp;</pre>
</td>
</tr>

</table>
<p class="syntaxheading">Description</p>
<p class="bodytext">Updates a product instance in the database.  The function is similar to and wraps the <span class="unixoutputc">biProductInstanceUpdate&amp;()</span> function.</p>
<p class="syntaxheading">Context</p>
<p class="bodytext">The following groups of variables are available throughout all stages of processing a product instance update request, except where otherwise specified:</p>
<ul class="listbullet"><li class="listbullet">System client</li><li class="listbullet">Operator</li><li class="listbullet">Miscellaneous<ul class="listdashbullet2"><li class="listdashbullet2"><span class="unixoutputc">evFormCode$</span> contains the value <span class="unixoutputc">PRODSVR</span>.</li><li class="listdashbullet2"><span class="unixoutputc">evLastRowInd&amp;</span> contains the value <span class="unixoutputc">0</span> during all stages of processing except for the evaluation of the product instance pre-commit expressions.</li><li class="listdashbullet2"><span class="unixoutputc">evRowStatus$</span> contains the value <span class="unixoutputc">Update</span>.</li></ul></li><li class="listbullet">Product instance<p class="listcontinue">The product instance variables are available only during the processing of a base product instance. Companion product instances have access to the companion product instance variables only.</p>
<ul class="listdashbullet2"><li class="listdashbullet2"><span class="unixoutputc">evProdAllocate&amp;</span> contains the value of 1 if <span class="unixoutputc">ALLOCATE_IND_CODE </span>is specified and<span class="unixoutputc"> </span>equipment is to be allocated.</li><li class="listdashbullet2"><span class="unixoutputc">evProdComplete&amp;</span> contains the value of 1 if <span class="unixoutputc">COMPLETE_IND_CODE </span>is specified and the product instance is to be completed.</li></ul></li><li class="listbullet">Companion product instance<p class="listcontinue">The companion product instance variables may only be available during the companion product instance processing stages.</p>
</li></ul><p class="syntaxheading">Parameters</p>
<table class="tableintopic" width="696" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="151"><p class="tableheading">Parameter</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="545"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="151"><p class="tablebodytext"><span class="unixoutputc">prodInstId&amp;</span></p>
</td>
<td style="border:1px solid #010101;" width="545"><p class="tablebodytext">ID of the product instance being updated.</p>
<p class="tablebodytext">A product instance with the specified ID must exist in the database for the effective date specified; otherwise, an error is raised.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="151"><p class="tablebodytext"><span class="unixoutputc">Keys?{}</span></p>
</td>
<td style="border:1px solid #010101;" width="545"><p class="tablebodytext">Keys used to identify the product instance being updated.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="151"><p class="tablebodytext"><span class="unixoutputc">effectiveDate~</span></p>
</td>
<td style="border:1px solid #010101;" width="545"><p class="tablebodytext">Effective date used to identify the historical product instance that is updated.</p>
<p class="tablebodytext">Date used as equipment allocation effective date or equipment completion date.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="151"><p class="tablebodytext"><span class="unixoutputc">lastModified~</span></p>
<p class="tablebodytext"><span class="unixoutputc">LastModified~</span></p>
</td>
<td style="border:1px solid #010101;" width="545"><p class="tablebodytext">Initial value must match the value in the record matching the specified <span class="unixoutputc">prodInstId&amp;</span> and <span class="unixoutputc">effectiveDate~</span>, or identified by <span class="unixoutputc">Keys?{}</span>, if <span class="unixoutputc">Keys?{}</span> is specified.</p>
<p class="tablebodytext">If <span class="unixoutputc">Keys?{}</span> is specified, <span class="unixoutputc">lastModified~</span> can be undefined. If <span class="unixoutputc">lastModified~</span> is not defined, it is automatically derived.</p>
<p class="tablebodytext">On successful return, the value is the date-time of this update.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="151"><p class="tablebodytext"><span class="unixoutputc">fieldValues?{}</span></p>
<p class="tablebodytext"><span class="unixoutputc">fieldNames$[]</span></p>
<p class="tablebodytext"><span class="unixoutputc">fieldValues?[]</span></p>
<p class="tablebodytext"><span class="unixoutputc">FieldValues?{}</span></p>
</td>
<td style="border:1px solid #010101;" width="545"><p class="tablebodytext">Data to be updated for the specified product instance.</p>
<p class="tablebodytext">The data can be keyed according to the corresponding column name in the <span class="unixoutputc">PRODUCT_INSTANCE_TRE_V</span> view. When keyed according to database column name, the data passed must match the data type stored in the database.</p>
<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="tablenote"><span class="unixoutputc">ALLOCATION_IND_CODE</span> and <span class="unixoutputc">COMPLETE_IND_CODE</span> are not stored in the <span class="unixoutputc">PRODUCT_INSTANCE_TRE_V</span> view. They are used to indicate that an equipment item is to be allocated to the product instance, or that the creation of the product instance requires completion.</p></td></tr></table>
<p class="tablebodytext">If attribute validation is enabled, data can also be keyed by a label specified in the appropriate entity validation, or in Convergent Billing defaults.</p>
<p class="tablebodytext">When keyed by interface or display label, the data passed must match the type and value expected as defined in the appropriate attribute type. Denormalised fields must pass the denormalised string values. Other fields must pass data of the type defined in the attribute type.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="151"><p class="tablebodytext"><span class="unixoutputc">IdentifierKeys?{}</span></p>
</td>
<td style="border:1px solid #010101;" width="545"><p class="tablebodytext">Populated on successful return with the values of the <span class="unixoutputc">PRODUCT_INSTANCE_HISTORY</span> identifier fields derived from <span class="unixoutputc">Keys?{}</span>.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Processing</p>
<p class="bodytext">If <span class="unixoutputc">Keys?{}</span> is specified, the product instance key lookup function is called to retrieve the product instance ID and the effective date. If the lookup function does not find a unique product instance, an error is raised.</p>
<p class="syntaxheading">Before Update of Base Product Instance</p>
<p class="bodytext">Assuming that all processing stages are enabled, the following is the order of evaluation of expressions and constraints:</p>
<ol class="listnumber"><li class="listnumber">Bundle direct variables if the call is nested.</li><li class="listnumber">Decrypt any encrypted values and mask any appropriate values configured for masking.</li><li class="listnumber">Apply attribute type defaults and validation.</li><li class="listnumber">Evaluate product instance defaults.</li><li class="listnumber">Check product instance mandatory fields.</li><li class="listnumber">Evaluate product instance attribute type validation expressions.</li><li class="listnumber">Evaluate product instance row expressions.</li><li class="listnumber">Evaluate product instance pre-commit expressions.</li><li class="listnumber">If <span class="unixoutputc">evProdAllocate&amp;</span> is 1, extract values from allocation variables and call the appropriate allocation function depending on which allocation variables are defined.</li><li class="listnumber">Evaluate product instance service pre-commit expressions for each service, in order of creation.</li><li class="listnumber">Evaluate product instance equipment pre-commit expressions for each allocated item of equipment, in order of creation.</li><li class="listnumber">Evaluate facility group instance pre-commit expressions for each facility group instance.</li><li class="listnumber">Unmask any masked values and encrypt any variable values configured for encryption.</li></ol><p class="bodytext">Product instance equipment entity validation triggers only on date range changes.</p>
<p class="bodytext">Product instance service entity validation triggers only:</p>
<ul class="listbullet"><li class="listbullet">On date range changes</li><li class="listbullet">Status changes</li><li class="listbullet">First time that the status of this product instance is set to Active.</li></ul><p class="bodytext">Update the base product instance.</p>
<p class="syntaxheading">After Update of Base Product Instance</p>
<p class="bodytext">Compare the status of associated companion product instances before and after the product instance update. For each companion product instance that has a transitioned state as part of the product instance update, identify each entitlement associated with that companion product instance.</p>
<ol class="listnumber"><li class="listnumber">Evaluate companion product pre-commit expressions.</li></ol><p class="bodytext">If the <span class="unixoutputc">evProdCmpDoNotSyncInd&amp;</span> variable is not set to TRUE, for each entitlement, perform the following steps:</p>
<ol class="listnumber"><li class="listnumber">If the entitlement has been processed as part of a product instance status change within the current transaction, abort to avoid an infinite looping condition.</li><li class="listnumber">Retrieve the real-time activation tariff, real-time recurring tariff and real-time cancellation tariff for the entitlement.</li><li class="listnumber">If the updated status of the companion product instance matches the value required to trigger the regeneration of a charge for the tariff (specified in the <span class="unixoutputc">TRIGGER_RETRY_PI_STATUS_CODE</span> column in the <span class="unixoutputc">TARIFF_RECURRING_TRE_V</span> view), the following are performed:<ul class="listbullet2"><li class="listbullet2">Mark the status update as processed for the current transaction, so that the charge is not regenerated more than once.</li><li class="listbullet2">Reserve and debit the activation and/or recurring charge(s) for the entitlement with instructions for rating to abort if the account cannot be successfully charged for the entitlement.</li></ul></li><li class="listnumber">If the new status of the companion product instance matches the cancelled status of the product (<span class="unixoutputc">CANCELLED_STATUS_CODE</span>), debit the associated account with the cancellation charge for the entitlement.</li></ol><p class="bodytext">On performing the update of a base product instance, the following sequence of actions occurs:</p>
<ol class="listnumber"><li class="listnumber">If <span class="unixoutputc">evProdComplete&amp;</span> is set to 1, extract values from the completion variable and call the <span class="unixoutputc"><a id="h57390" class="jump" title="fEV_ProdInstComplete&amp;()" href="58582.htm" target="_self">fEV_ProdInstComplete&amp;()</a></span> completion function.</li><li class="listnumber">Insert associated entitlements specified in the <span class="unixoutputc">ProductOfferEntitlementCat#</span> derived attributes using the <span class="unixoutputc"><a id="h75298" class="jump" title="fEV_EntitlementInsert&amp;()" href="58585.htm" target="_self">fEV_EntitlementInsert&amp;()</a></span> function for all active companion product instances if all the following are true: <ul class="listbullet2"><li class="listbullet2"><span class="unixoutputc">evProdCmpDoNotSyncInd&amp; </span>is not set to TRUE</li><li class="listbullet2"><span class="unixoutputc">evProdComplete&amp;</span> is not set to TRUE</li><li class="listbullet2"><span class="unixoutputc">evProdProductOfferId&amp;</span> is defined</li><li class="listbullet2">Status of this product instance changes to Active for the first time.</li></ul><p class="listcontinue">The <span class="unixoutputc">ProductOfferEntitlementCat#</span> derived attribute table also contains the initial allocation amount, recurring allocation amount, and entitlement validity period for inserted entitlements.</p>
</li><li class="listnumber">If <span class="unixoutputc">evProdComplete&amp;</span> is not set to 1, both <span class="unixoutputc">evProdProductOfferId&amp;</span> and <span class="unixoutputc">evOldProdActiveDate~</span> are defined, and <span class="unixoutputc">evProdCmpDoNotSyncInd&amp;</span> is not set to TRUE, determine if the:<ul class="listbullet2"><li class="listbullet2">Product instance status has changed to Cancelled or to the <span class="unixoutputc">CANCEL_STATUS_CODE</span> of the product or to a value listed in the <span class="unixoutputc">PRODUCT_INSTANCE_CANCELLED </span>reference type (from a non-cancelled status).</li><li class="listbullet2">Status changes to or from an Active status.<p class="listcontinue2">If so, update the companion product instance entitlements using the <span class="unixoutputc"><a id="h75299" class="jump" title="fEV_EntitlementUpdate&amp;" href="58608.htm" target="_self">fEV_EntitlementUpdate&amp;()</a></span> function if the status has changed to:</p>
<ul class="listdashbullet3"><li class="listdashbullet3">Cancelled (from non-cancelled)<p class="listcontinue3">Expire all associated entitlements for companion product instances that have also changed to Cancelled status.</p>
</li><li class="listdashbullet3">Non-active (from active)<p class="listcontinue3">Suspend all associated recurring entitlements for companion product instances that have changed to non-active status.</p>
</li><li class="listdashbullet3">Active (from non-active)<p class="listcontinue3">Un-suspend all associated recurring entitlements for companion product instances that have changed to active status.</p>
</li></ul></li></ul></li><li class="listnumber">If <span class="unixoutputc">evProdComplete&amp;</span> is not set to 1, <span class="unixoutputc">evOldProdActiveDate~</span> is defined, and product instance status has changed, for all child companion product instances, evaluate companion product instance:<ul class="listbullet2"><li class="listbullet2">In-transaction expressions</li><li class="listbullet2">Post-commit expressions.</li></ul></li></ol><p class="syntaxheading">Commit Updates of a Base Product Instance</p>
<p class="bodytext">The following sequence of post-commit actions occurs:</p>
<ol class="listnumber"><li class="listnumber">Evaluate product instance service post-commit expressions for each service, in order of creation.</li><li class="listnumber">Evaluate product instance equipment post-commit expressions for each allocated item of equipment, in order of creation.</li><li class="listnumber">Evaluate facility group instance post-commit expressions for each facility group instance.</li><li class="listnumber">Evaluate product instance post-commit expressions.</li></ol><p class="syntaxheading">Before Update of Companion Product Instance</p>
<p class="bodytext">Assuming that all processing stages are enabled, the following is the order of evaluation of expressions and constraints:</p>
<ol class="listnumber"><li class="listnumber">Bundle direct variables if the call is nested.</li><li class="listnumber">Decrypt any encrypted values and mask any appropriate values.</li><li class="listnumber">Apply attribute type defaults and validation.</li><li class="listnumber">Evaluate companion product instance attribute type validation expressions.</li><li class="listnumber">Evaluate companion product instance defaults.</li><li class="listnumber">Check companion product instance mandatory fields.</li><li class="listnumber">Evaluate companion product instance row expressions.</li><li class="listnumber">Evaluate companion product instance pre-commit expressions.</li></ol><p class="bodytext">The following are conditions for further processing:</p>
<ul class="listbullet"><li class="listbullet"><span class="unixoutputc">evProdCmpProductOfferId&amp;</span> is defined.</li><li class="listbullet">Status of the product instance is updated.</li><li class="listbullet"><span class="unixoutputc">STS_UPDATE_PROD_OFFER_IND_CODE</span> is set for the product.</li><li class="listbullet">Product is a mandatory companion product of the companion product instance's product offer (<span class="unixoutputc">MANDATORY_IND_CODE</span> is set to 1).</li></ul><p class="bodytext">If the conditions are satisfied, perform the following:</p>
<ol class="listnumber"><li class="listnumber">Determine applicable product offers within the product offer hierarchy:<ul class="listbullet2"><li class="listbullet2">Ascend the product offer hierarchy to the highest possible product offer node with a matching <span class="unixoutputc">SERVICE_SPECIFIC_IND_CODE</span> until <span class="unixoutputc">MANDATORY_IND_CODE</span> is not set.</li><li class="listbullet2">Descend from the highest offer to all child product offers.</li></ul></li><li class="listnumber">Update the status of all product instances with a matching <span class="unixoutputc">PRODUCT_OFFER_ID</span> and <span class="unixoutputc">PRODUCT_OFFER_NODE_ID</span>.</li><li class="listnumber">Set <span class="unixoutputc">DO_NOT_UPDATE_STATUS_IND_CODE</span> for the base product instance if it requires a status update.</li><li class="listnumber">Update the status of services associated with each updated product instance, and with matching <span class="unixoutputc">PRODUCT_OFFER_ID</span> and <span class="unixoutputc">PRODUCT_OFFER_NODE_ID</span>, are updated when the following statuses are updated:<ul class="listbullet2"><li class="listbullet2">Every companion product instance associated with the service</li><li class="listbullet2">Root product offer</li><li class="listbullet2">The service's service-specific product offer.</li></ul></li></ol><p class="syntaxheading">After Update of a Companion Product Instance</p>
<p class="bodytext">If <span class="unixoutputc">evProdCmpProductOfferId&amp;</span> is defined, the following sequence of actions occurs:</p>
<ol class="listnumber"><li class="listnumber">If the status of this product instance changes to Active for the first time, <span class="unixoutputc">evProdCmpDoNotSyncInd&amp;</span> is not set to TRUE, and real-time tariffs are associated with the entitlements of this product instance, generate charges as required.</li><li class="listnumber">If <span class="unixoutputc">evOldProdCmpActiveDate~</span> is set and one of the following is true:<ul class="listbullet2"><li class="listbullet2">Product instance status has changed to Cancelled (from a non-cancelled status)</li><li class="listbullet2">Product instance status has changed to the value set for <span class="unixoutputc">CANCEL_STATUS_CODE</span> of the product.</li><li class="listbullet2">Product instance status has changed to a value listed in the <span class="unixoutputc">PRODUCT_INSTANCE_CANCELLED </span>reference type.</li></ul><p class="listcontinue">The following occurs:</p>
<ol class="listalpha2"><li class="listalpha2">Expire all associated entitlements for the companion product instance.</li><li class="listalpha2">If the status changes to or from Active, update all associated recurring entitlements for the companion product instance using <span class="unixoutputc"><a id="h75299_2" class="jump" title="fEV_EntitlementUpdate&amp;" href="58608.htm" target="_self">fEV_EntitlementUpdate&amp;()</a></span> as follows:<ul class="listdashbullet3"><li class="listdashbullet3">Active to Non-active (suspend)</li><li class="listdashbullet3">Non-active to active (un-suspend).</li></ul></li></ol></li><li class="listnumber">If the assigned product offer ID has changed, update <span class="unixoutputc">UNCOMPLETED_IND_CODE</span> to 1 (true) to indicate that a re-completion is required.</li></ol><p class="syntaxheading">After Commit of Update of a Companion Product Instance</p>
<ol class="listnumber"><li class="listnumber">Evaluate companion product instance post-commit expressions.<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="listnote">Post-commit expressions are evaluated only if a change is committed to the database.</p></td></tr></table>
</li></ol><p class="syntaxheading">After Update and Evaluation of Post-commit Expressions</p>
<ol class="listnumber"><li class="listnumber">Unbundle variables that have been stored.</li></ol><p class="syntaxheading">Returns</p>
<p class="bodytext">A non-zero value, if successful; if the update or any of the pre-update validation steps fail, an error is raised.</p>
<p class="syntaxheading">Remarks</p>
<ol class="listnumber"><li class="listnumber">The function can be used to:<ul class="listbullet2"><li class="listbullet2">Allocate an item of equipment to a product instance by specifying a value of 1 for <span class="unixoutputc">ALLOCATE_IND_CODE</span>.</li><li class="listbullet2">Complete creation of a product instance by specifying a value of for <span class="unixoutputc">COMPLETE_IND_CODE.</span> <span class="unixoutputc">CALL_PARAMS</span> cannot be specified. Non-stored attribute types are used instead.</li></ul></li><li class="listnumber">Update occurs within EVS Scope.</li></ol>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="28119.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="77362.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


