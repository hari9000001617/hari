<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> Calling TRE Database Functions </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Configurer's Reference Guide for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "10994.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "11007.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('10992');highlight('10996')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="10994.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="11007.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h2 class="heading2">Calling TRE Database Functions</h2>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Calling TRE Database Functions' (10996)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">This section provides information about using functions that provide access to Convergent Billing database tables.</p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o10997"></a><h3 class="heading3">TRE Views</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'TRE Views' (10997)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Functions that work on the Convergent Billing database, operate using views that expose the data that each function requires.</p>
<p class="bodytext">The field names, their associated data type, and whether they are mandatory, are defined in the view that the function operates on. </p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o10998"></a><h3 class="heading3">Array Parameters</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Array Parameters' (10998)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Data is passed between the function and the caller using arrays.  The data in the arrays is passed by value when the function inserts or updates data in the database and by reference when data is being retrieved.</p>
<p class="bodytext">Because arrays in EPM can be strongly typed, a different array is required for each data type that the function is required to handle.  Many TRE database functions, therefore, specify five arrays, to account for the names of the fields and the range of data types, in their parameters.</p>
<p class="bodytext">The following table lists the arrays.</p>
<p class="bodytext">&nbsp;</p>
<p class="caption">Arrays for Field Names and Data Types</p>
<table class="tableintopic" width="696" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="189"><p class="tableheading">Array</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="507"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="189"><p class="tablebodytext"><span class="unixoutputc">FieldNames$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="507"><p class="tablebodytext">Column name (not case-sensitive) of the required value, as defined in its view.</p>
<p class="tablebodytext">Unlike EPM variables, type identifiers are not required.</p>
<p class="tablebodytext">Column names must be specified in the following order:</p>
<ul class="tablelistbullet"><li class="tablelistbullet">Strings</li><li class="tablelistbullet">Integers</li><li class="tablelistbullet">Reals</li><li class="tablelistbullet">Dates.</li></ul></td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="189"><p class="tablebodytext"><span class="unixoutputc">StringFieldValues$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="507"><p class="tablebodytext">Values for the string fields specified in <span class="unixoutputc">FieldNames$[]</span> in the same relative order.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="189"><p class="tablebodytext"><span class="unixoutputc">IntegerFieldValues$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="507"><p class="tablebodytext">Values for the integer fields specified in <span class="unixoutputc">FieldNames$[]</span> in the same relative order.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="189"><p class="tablebodytext"><span class="unixoutputc">RealFieldValues$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="507"><p class="tablebodytext">Values for the real fields specified in <span class="unixoutputc">FieldNames$[]</span> in the same relative order.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="189"><p class="tablebodytext"><span class="unixoutputc">DateFieldValues$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="507"><p class="tablebodytext">Values for the date fields specified in <span class="unixoutputc">FieldNames$[]</span> in the same relative order.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="bodytext">An alternate method for a function interface is the use of an untyped array.  Some functions provide an interface using only this method while other functions provide interfaces using this method and the method using typed arrays.  An interface with an untyped array uses only two arrays:</p>
<p class="bodytext">The following table lists arrays used for an interface with an untyped array.</p>
<p class="bodytext">&nbsp;</p>
<p class="caption">Arrays for Interfaces with Untyped Arrays</p>
<table class="tableintopic" width="696" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="150"><p class="tableheading">Array</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="546"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="150"><p class="tablebodytext"><span class="unixoutputc">FieldNames$[]</span></p>
</td>
<td style="border:1px solid #010101;" width="546"><p class="tablebodytext">Column names of the required values, as described earlier.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="150"><p class="tablebodytext"><span class="unixoutputc">FieldValues?[]</span></p>
</td>
<td style="border:1px solid #010101;" width="546"><p class="tablebodytext">Field values in the same order as the column names in <span class="unixoutputc">FieldNames$[]</span>.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="bodytext">The field values are accessed by de-referencing the array element using the appropriate data type.  For example, to access the sixth field which is of an integer data type, the reference would use the integer data type character (<span class="unixoutputc">&amp;</span>) and an index of 5 as follows: <span class="unixoutputc">FieldValues&amp;[5]</span>.</p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o10999"></a><h4 class="heading4">Typed Array Example</h4>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Typed Array Example' (10999)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">To obtain the make, model, status, and purchase date of an item of equipment with <span class="unixoutputc">EQUIPMENT_ID=13364</span>, the following code could be used:</p>
<pre class="unixoutputp"><span class="unixoutputc"># biEquipmentFetchById&amp;(EquipmentId&amp;,</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">#                       EffectiveDate~,</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">#                       FieldNames$[],</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">#                       var StringFieldValues$[],</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">#                       var IntegerFieldValues&amp;[],</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">#                       var RealFieldValues#[],</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">#                       var DateFieldValues~[])</span></pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;FieldNames$[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;StringFieldValues$[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;IntegerFieldValues&amp;[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;RealFieldValues#[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;DateFieldValues~[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;rv&amp;:=0;</span></pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[0]:= 'MAKE';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[1]:= 'model';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[2]:= 'EQUIPMENT_STATUS_CODE';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[3]:= 'PURCHASE_DATE';</span></pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp"><span class="unixoutputc">rv&amp;:=biEquipmentFetchById&amp;(13364, current_date(), </span><br><span class="unixoutputc">				   FieldNames$[], </span><br><span class="unixoutputc">				   StringFieldValues$[], </span><br><span class="unixoutputc">				   IntegerFieldValues&amp;[], </span><br><span class="unixoutputc">				   RealFieldValues#[], </span><br><span class="unixoutputc">				   DateFieldValues~[]);</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">print(StringFieldValues$[0]);	# make</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">print(StringFieldValues$[1]);	# </span>model</pre>
<pre class="unixoutputp"><span class="unixoutputc">print(IntegerFieldValues&amp;[0]);	# status</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">print(DateFieldValues~[0]);		# purchase date</span></pre>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11000"></a><h4 class="heading4">Untyped Array Example</h4>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Untyped Array Example' (11000)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Using the untyped array method for an interface, the appropriate EPM code would have the references to the individual typed arrays replaced by references to an untyped array:</p>
<pre class="unixoutputp"><span class="unixoutputc"># biEquipmentFetchById&amp;(EquipmentId&amp;, </span>EffectiveDate~,<br>#                       <span class="unixoutputc">const FieldNames$[], </span><br><span class="unixoutputc">#</span>                       <span class="unixoutputc">var FieldValues?[])</span></pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;FieldNames$[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;FieldValues?[];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var&nbsp;rv&amp;:=0;</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[0]:='MAKE';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[1]:='model';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[2]:='EQUIPMENT_STATUS_CODE';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">FieldNames$[3]:='PURCHASE_DATE';</span></pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp"><span class="unixoutputc">rv&amp;:=biEquipmentFetchById&amp;(13364, current_date(), </span><br><span class="unixoutputc">                           FieldNames$[], </span><br><span class="unixoutputc">                           FieldValues?[]);</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">print(FieldValues$[0]);	# make</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">print(FieldValues$[1]);	# </span>model</pre>
<pre class="unixoutputp"><span class="unixoutputc">print(FieldValues&amp;[2]);	# status</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">print(FieldValues~[3]);	# purchase date</span></pre>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11001"></a><h3 class="heading3">Effective Date</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Effective Date' (11001)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Search and data retrieval functions require an effective date, or date-time as appropriate, parameter to specify the relevant history record for an entity.  To be specified, a history record must have a date range, defined by the <span class="unixoutputc">EFFECTIVE_START_DATE</span> and <span class="unixoutputc">EFFECTIVE_END_DATE</span> columns of the record, which spans the value of the effective date. </p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11002"></a><h3 class="heading3">Search Functions</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Search Functions' (11002)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Remote functions that search the database make use of an SQL <span class="unixoutputc">WHERE</span> clause and an optional SQL <span class="unixoutputc">ORDER BY</span> clause that refer to the columns in the appropriate view.  The function returns an array of IDs of items that meet the requirements of the <span class="unixoutputc">WHERE</span> clause.</p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11003"></a><h4 class="heading4">Example</h4>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Example' (11003)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">To retrieve the IDs of all Nokia model 8210 equipment with a status of Idle into the <span class="unixoutputc">EquipmentId[]</span> array, ordered by serial number, use the following code:</p>
<pre class="unixoutputp"># biEquipmentSearch&amp;(EffectiveDate~,</pre>
<pre class="unixoutputp">#                    WhereClause$,</pre>
<pre class="unixoutputp">#                    OrderByClause$,</pre>
<pre class="unixoutputp">#                    var EquipmentId&amp;[],</pre>
<pre class="unixoutputp">#                    var LastModified~[])</pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp">var&nbsp;EquipmentId&amp;[];</pre>
<pre class="unixoutputp">var&nbsp;LastModified~[];</pre>
<pre class="unixoutputp">var&nbsp;rv&amp;:=0;</pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp">rv&amp;:=biEquipmentSearch&amp;(current_date(), 'make=\'Nokia\' and model=\'8210\' and idle_ind_code=1', 'serial_number',  EquipmentId&amp;[], LastModified~[]);</pre>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11004"></a><h3 class="heading3">Data Retrieval Functions</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Data Retrieval Functions' (11004)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Data retrieval functions are based on a table lookup using the ID (often obtained from a previous search function call) for the relevant item.</p>
<p class="bodytext">For data retrieval, the <span class="unixoutputc">FieldNames$[]</span> array is passed by value, and the other <a id="h11129" class="jump" title="Array Parameters" href="10996.htm#o10998" target="_self">arrays are passed by reference so that the function can populate them with the required data</a>.</p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11005"></a><h3 class="heading3">Insert and Update Functions</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Insert and Update Functions' (11005)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Functions that insert or update data pass all the arrays by value, after populating them with data.  The following conditions apply:</p>
<ul class="listbullet"><li class="listbullet">All columns specified as not null in the appropriate view are mandatory.  For insertion, the columns and values must be supplied in the function call.  For update, the function cannot attempt to set the columns to null.</li><li class="listbullet">Exceptions to the rule are:<ul class="listdashbullet2"><li class="listdashbullet2">Columns identified as derived or populated by the system cannot be specified, unless noted otherwise.</li><li class="listdashbullet2">The ID, which, if supplied, must be unique; otherwise the ID is generated by the system.</li><li class="listdashbullet2">For entities that can be partitioned, if <span class="unixoutputc">CUSTOMER_PARTITION_NR</span> is specified, the ID is derived from the sequence defined for the instance associated with that partition; otherwise, it is derived from the sequence defined for the default partition of the instance performing the insert (<span class="unixoutputc">$ATA_INSTANCE</span>). <p class="listcontinue2">For more information about sequences, refer to the <span class="referrals">High Availability and Scalability Guide for Singleview Convergent Billing</span>.</p>
</li><li class="listdashbullet2">The last modified date (<span class="unixoutputc">LAST_MODIFIED</span>), should not be supplied; the field is specified as a separate pass-by-reference parameter (<span class="unixoutputc">LastModified~</span>).</li><li class="listdashbullet2">For insert functions, <span class="unixoutputc">LastModified~</span> is set by the called function.</li><li class="listdashbullet2">For update functions, <span class="unixoutputc">LastModified~</span> is set by the caller to the last modified date (<span class="unixoutputc">LAST_MODIFIED</span>) of the record to be updated.  If <span class="unixoutputc">LastModified~</span> does not match <span class="unixoutputc">LAST_MODIFIED</span> of the record in the database, the update call fails.  On completion of a successful update, the new <span class="unixoutputc">LAST_MODIFIED</span> date of the updated record is returned by the called function in <span class="unixoutputc">LastModified~</span>.</li><li class="listdashbullet2">The effective end date, which, if not supplied for insertions, defaults to the most future date possible (<span class="unixoutputc">MAX_DATE</span>).</li><li class="listdashbullet2">Other values, dependent on the data concerned (refer to <span class="referrals"><span class="referrals">Appendix H, TRE Views</span></span> of the <span class="referrals">Configurer's Reference Guide for Singleview Convergent Billing (Vol. 1)</span>.</li></ul></li><li class="listbullet">Some data items have two associated columns, one an ID and the other a name (for example, <span class="unixoutputc">CURRENCY_ID</span> and <span class="unixoutputc">CURRENCY_SYMBOL</span>).  A value is supplied for either one of these columns, or for both.  If values are supplied for both columns, they must correspond to each other.</li></ul>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o11006"></a><h3 class="heading3">Delete Functions</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Delete Functions' (11006)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Delete functions typically do not delete an entity; rather the entity is deleted by setting the end date, or end date-time as appropriate, of a history record to a specific value.  Delete functions only affect the last history record for an entity (otherwise, the date range for the entity would become non-contiguous).</p>
<p class="bodytext">When only one history record exists for the entity, and the function specifies a date range that matches the start and end date of that history record, the history record is typically physically deleted.  However, some entities, such as a customer, are not permitted to be physically deleted and an attempt to delete the last history record causes an exception.</p>
<p class="bodytext">The prerequisite conditions for deleting an entity are:</p>
<ul class="listbullet"><li class="listbullet">1 or more history records must exist for the range specified.</li><li class="listbullet">The end date for a deletion must match the end date of the last history record.</li><li class="listbullet">A reference to the entity must not exist for a date after the date for which the deletion is effective.</li></ul>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="10994.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="11007.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


