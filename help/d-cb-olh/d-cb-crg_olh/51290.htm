<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> biXmlBuildFile&amp;() </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Configurer's Reference Guide for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "53603.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "12247.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('11007');expand('10992');highlight('51290')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="53603.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="12247.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h3 class="heading3">biXmlBuildFile&amp;()</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'biXmlBuildFile&amp;()' (51290)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="syntaxheading">Syntax</p>
<table class="tableintopic" width="450" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td class="tableheading" width="198"><p class="tableheading">Interface 1 - Append</p>
</td>
<td width="54"><p class="tablebodytext">&nbsp;</p>
</td>
<td class="tableheading" width="198"><p class="tableheading">Interface 2 - Create</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="198"><pre class="unixinputp">biXmlBuildFile&amp;(    const FileName&amp;,    const Append&amp;,    const DefHeader$,    const Entry?{},    const Data?{},    const Exit?{})&nbsp;</pre>
</td>
<td width="54"><pre class="unixinputp">&nbsp;</pre>
</td>
<td width="198"><pre class="unixinputp">biXmlBuildFile&amp;(    const FileName$,    const DefHeader$,    const Data?{})</pre>
</td>
</tr>
<tr align="left" valign="top">
<td class="tableheading" width="198"><p class="tableheading">Interface 3 - Append</p>
</td>
<td width="54"><p class="tablebodytext">&nbsp;</p>
</td>
<td class="tableheading" width="198"><p class="tableheading">Interface 4 - Create</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="198"><pre class="unixinputp">biXmlBuildFile&amp;(    const FileName&amp;,    const Append&amp;,    const DefHeader$,    const Entry?{},    const Data?[],    const Exit?{})</pre>
</td>
<td width="54"><pre class="unixinputp">&nbsp;</pre>
</td>
<td width="198"><pre class="unixinputp">biXmlBuildFile&amp;(    const FileName$,    const DefHeader$,    const Data?[])</pre>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Description</p>
<p class="bodytext">Builds and writes an XML document to a new file or appends XML to an existing file.</p>
<p class="syntaxheading">Attributes</p>
<table class="tableintopic" width="330" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="180"><p class="tablebodytext"><span class="bold">Function Type</span></p>
</td>
<td style="border:1px solid #010101;" width="150"><p class="tablebodytext">Remote Synchronous</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="180"><p class="tablebodytext"><span class="bold">Service</span></p>
</td>
<td style="border:1px solid #010101;" width="150"><p class="tablebodytext"><span class="unixoutputc">biTrexml</span></p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="180"><p class="tablebodytext"><span class="bold">Application Environment</span></p>
</td>
<td style="border:1px solid #010101;" width="150"><p class="tablebodytext">Any</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="180"><p class="tablebodytext"><span class="bold">Context</span></p>
</td>
<td style="border:1px solid #010101;" width="150"><p class="tablebodytext">Any</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<table class="tableintopic" width="696" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="114"><p class="tableheading">Parameter</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="582"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">FileName$</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  Name and path of the file to be output.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">Append&amp;</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  If <span class="unixoutputc">TRUE</span>, the specified file is appended to. If <span class="unixoutputc">FALSE</span>, a new file is created.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">DefHeader$</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  Header information to be output after the XML declaration and before XML data.</p>
<p class="tablebodytext">It must be undefined if <span class="unixoutputc">Append&amp;</span> is <span class="unixoutputc">TRUE</span>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">Entry?{}</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  XML elements that are to be considered already open when appending to the output file.</p>
<p class="tablebodytext">If <span class="unixoutputc">Append&amp;</span> is <span class="unixoutputc">FALSE</span>, <span class="unixoutputc">Entry?{}</span> must be empty or undefined.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">Data?{}</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  Hash containing data for the XML document.</p>
<p class="tablebodytext">If default parsing is not to be used, the top level of the structure must be a single entry with a key corresponding to the name of the schema to use to parse the XML data. </p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">Exit?{}</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  XML elements that are to remain open after the XML data has been output to the file.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="114"><p class="tablebodytext"><span class="unixoutputc">Data?[]</span></p>
</td>
<td style="border:1px solid #010101;" width="582"><p class="tablebodytext">In:  Array containing data for the XML document when ordered parsing is used.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Returns</p>
<p class="bodytext">1 if successful; otherwise, an error is raised.</p>
<p class="syntaxheading">Remarks</p>
<p class="bodytext">Interfaces 1 and 3 append data to an existing XML file.  Interfaces 2 and 4 create an XML file.</p>
<p class="bodytext">Default parsing is used for <span class="unixoutputc">Data?{}</span> when the top-level key does not contain a reference to an XML schema.  Default parsing assumes that the structure of <span class="unixoutputc">Data?{}</span> is the same as the uncompressed format representation described in <span class="unixoutputc"><a id="h36696" class="jump" title="biXmlBuildString$()" href="12247.htm" target="_self">biXmlBuildString$</a></span>.</p>
<p class="bodytext">If parsing using an XML schema is required, the top level of <span class="unixoutputc">Data?{}</span> must contain a single key that corresponds to the name of the XML schema to use.  The XML schema must be loaded in the cache of the trexml server (see the <span class="referrals">Tuxedo Guide for Singleview</span>).</p>
<p class="bodytext"><span class="unixoutputc">Entry?{}</span> and <span class="unixoutputc">Exit?{}</span> are chains of single key hashes that describe the nested structure of open XML tags.  The chain is terminated by a hash key with an undefined value.  An example is: </p>
<pre class="unixoutputp">{</pre>
<pre class="unixoutputp">    test =&gt; {complex5 =&gt; }}</pre>
<pre class="unixoutputp">}</pre>
<p class="bodytext">&nbsp;</p>
<p class="bodytext">This hash describes two open elements named <span class="unixoutputc">test</span> and <span class="unixoutputc">complex5</span>.</p>
<p class="syntaxheading">Example</p>
<p class="bodytext">The following EPM code demonstrates the use of write mode, append mode, <span class="unixoutputc">Entry?{}</span> tags, and <span class="unixoutputc">Exit?{}</span> tags:</p>
<pre class="unixoutputp">{</pre>
<pre class="unixoutputp">    # Set up the Exit?{} so the XML elements for &lt;test&gt; and &lt;complex5&gt; remain open</pre>
<pre class="unixoutputp">    # i.e. set it to {test =&gt; { complex5 =&gt; }}</pre>
<pre class="unixoutputp">    var ComplexEntry?{} := hash(['complex5'], [null$]);</pre>
<pre class="unixoutputp">    var Exit?{} := hash(['test'], [ComplexEntry?{}]);</pre>
<pre class="unixoutputp">   </pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp">    # The first call just writes 'string1' in the array for element complex5</pre>
<pre class="unixoutputp">    # for the hash { test =&gt; { complex5 =&gt; [ string1 ] } }</pre>
<pre class="unixoutputp">    var Complex?{} := hash(['complex5'], [['string1']]);</pre>
<pre class="unixoutputp">    var Data?{} := hash(['test'], [Complex?{}]);</pre>
<pre class="unixoutputp">    var FileName$ := '/tmp/test1.xls' ;</pre>
<pre class="unixoutputp">    biXmlBuildFile&amp;(FileName$, FALSE, null$, null?, Data?{}, Exit?{});</pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp">    # Append 'string2' to the array for element complex5</pre>
<pre class="unixoutputp">    # for the hash { test =&gt; { complex5 =&gt; [ string2 ] } }</pre>
<pre class="unixoutputp">    var Entry?{} := Exit?{};</pre>
<pre class="unixoutputp">    Complex?{} := hash(['complex5'], [['string2']]); </pre>
<pre class="unixoutputp">    Data?{} := hash(['test'], [Complex?{}]);</pre>
<pre class="unixoutputp">    biXmlBuildFile&amp;(FileName$, TRUE, null$, Entry?{}, Data?{}, Exit?{});</pre>
<pre class="unixoutputp"></pre>
<pre class="unixoutputp">    # Append 'string3' to the array for element complex5</pre>
<pre class="unixoutputp">    # for the hash { test =&gt; { complex5 =&gt; [ string3 ] } }</pre>
<pre class="unixoutputp">    # and close all open elements</pre>
<pre class="unixoutputp">    Complex?{} := hash(['complex5'], [['string3']]);</pre>
<pre class="unixoutputp">    Data?{} := hash(['test'], [Complex?{}]);</pre>
<pre class="unixoutputp">    biXmlBuildFile&amp;(FileName$, TRUE, null$, Entry?{}, Data?{}, null?{});</pre>
<pre class="unixoutputp">}</pre>
<p class="bodytext">&nbsp;</p>
<p class="bodytext">This code writes the following XML to <span class="unixoutputc">/tmp/test.xls</span>:</p>
<pre class="unixoutputp">&lt;test&gt;</pre>
<pre class="unixoutputp">    &lt;complex5&gt;</pre>
<pre class="unixoutputp">        &lt;ele&gt;string1&lt;/ele&gt;</pre>
<pre class="unixoutputp">        &lt;ele&gt;string2&lt;/ele&gt;</pre>
<pre class="unixoutputp">        &lt;ele&gt;string3&lt;/ele&gt;</pre>
<pre class="unixoutputp">    &lt;/complex5&gt;</pre>
<pre class="unixoutputp">&lt;/test&gt;</pre>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="53603.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="12247.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


