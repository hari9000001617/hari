<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> Entity Validation Expressions </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Configurer's Reference Guide for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "27907.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "59016.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('27907');expand('45618');highlight('51598')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="27907.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="59016.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h3 class="heading3">Entity Validation Expressions</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Entity Validation Expressions' (51598)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Entity validation expressions can be configured to be evaluated at different points of a transaction updating an entity.  The processing sequence is:</p>
<ol class="listnumber"><li class="listnumber">Row validation.</li><li class="listnumber">Transaction started.</li><li class="listnumber">Pre-commit expressions evaluated.</li><li class="listnumber">Changes applied to the database as part of the transaction.</li><li class="listnumber">In-transaction expressions evaluated.</li><li class="listnumber">Transaction committed to database.</li><li class="listnumber">Post-commit expressions evaluated after commit to database.</li></ol><table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="note">Post-commit expressions are not evaluated by default when Singleview quote mode is enabled. For more information about quoting, refer to the <span class="referrals">Configuring Quoting for Singleview</span></p></td></tr></table>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o51634"></a><h4 class="heading4">In-transaction Expressions</h4>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'In-transaction Expressions' (51634)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">An entity validation definition can have in-transaction expressions associated with it.  Each expression is evaluated and executed in the order specified as part of the in-transaction processing for the entity.  </p>
<p class="bodytext">In-transaction expressions are executed for an entity's insert, update, and delete functionality.  The expressions are executed after the changes to the entity have been made, but before the changes are committed to the database.  Therefore, if an in-transaction expression fails, the transaction is automatically rolled back and no changes are committed to the database.</p>
<p class="bodytext">If row validation, pre-commit, or in-transaction expressions fail during:</p>
<ul class="listbullet"><li class="listbullet">Insert or update of an entity, the form remains in Insert or Update mode.  Saving the form again re-executes row validation, pre-commit, and in-transaction expressions for the entity.</li><li class="listbullet">Delete of an entity, the process aborts.  Row validation is not performed on delete. </li></ul>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o27909"></a><h4 class="heading4">Post-commit Processing</h4>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Post-commit Processing' (27909)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">An entity validation definition can have a list of post-commit expressions associated with it.</p>
<p class="bodytext">Post-commit processing refers to expressions that are evaluated after changes are committed to the database.  Each expression is evaluated and executed in the order specified.</p>
<p class="bodytext">If an expression raises an error, the processing can either halt or continue based on the configuration of the <span class="fieldname">Stop on Failure</span> field<span class="fieldname">.</span>  If this field is set to 1 (True) and the expression raises an error, the post-commit processing for the remainder of the configured post-commit expressions are not executed.  If set to NULL or FALSE and the evaluation of this expression fails, subsequent post-commit expressions are still evaluated.</p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o27910"></a><h5 class="heading5">Transactional Queue</h5>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Transactional Queue' (27910)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">A transactional queue is required for post-commit processing in EVS.  The required functionality is placed within an EPM function, and that function marked as a remote function using queued dispatch.  </p>
<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="note">A queued function call is executed remotely and, if called from a transactional context, does not begin until after the current transaction commits.  It cannot be assumed that the operations implemented in the function have been completed when the EVS function call returns.</p></td></tr></table>
<p class="bodytext">A queued function call is a remote function call, which means that the function call is likely to be evaluated in a process different from the EVS function that enqueues the function call request.  </p>
<p class="bodytext">Queued functions must not assume they have access to any global data available within the entity validation expressions, including any direct variables.  Queued functions must be given an application environment of Any and a context of Any, and information required by the function must be provided in the parameters passed to the function.</p>
<table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%"><a name="o27911"></a><h5 class="heading5">Post-Commit Error Handling</h5>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'Post-Commit Error Handling' (27911)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="bodytext">Any errors that occur during post-commit expression evaluation are caught by EVS.  By default these errors are discarded; however, an error handler callback function can be used to process the error.  This could involve sending a notification for the error, or recording it in an error log.  Alternatively, it could be as simple as re-throwing the error to ensure that the transaction is rolled back and the calling function is notified of the error.</p>
<p class="bodytext">The sample post-commit error handling <span class="unixoutputc"><a id="h68965" class="jump" title="fEVS_PostCommitError&amp;()" href="68964.htm" target="_self">fEVS_PostCommitError&amp;()</a></span><a id="h68965_2" class="jump" title="fEVS_PostCommitError&amp;()" href="68964.htm" target="_self"> function is supplied with Singleview</a>.  The function describes the expected interface of an error handler function, and provides an example of the function by posting an unsolicited event containing the details of the error that occurred and other information made available to the callback function.</p>
<p class="bodytext">To use a post-commit error callback function, the function must be placed in the <span class="unixoutputc">POST_COMMIT_ERROR_CALLBACK</span> attribute in the <span class="unixoutputc">EVS</span> configuration item.  For more information about the EVS configuration item and implementing an EVS post-commit queue, refer to the <span class="referrals">System Configuration Guide for Singleview Convergent Billing</span>.</p>
<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><p class="note">It is not possible to successfully recover from errors that originate remotely; that is, in a different server process.  Tuxedo sees the error response in the inter-process communication, marks the current transaction as bad, and subsequently rolls it back.  The Tuxedo response cannot occur with asynchronous or queued function calls.  It can also be avoided by performing remote function calls in their own transaction.</p></td></tr></table>
<p class="bodytext">EVS is unable to handle errors that occur during execution of asynchronous or queued function calls.</p>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="27907.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="59016.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


