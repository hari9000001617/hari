<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> sort() </title>
<script type="text/javascript" src="open_parent.js"></script>
<link rel="stylesheet" type="text/css" href="pkc.css">
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="description" content="Configurer's Reference Guide for Singleview Convergent Billing 9.1 ">
<script language="javascript" type="text/javascript" src="dhtml_toc.js"></script>
<script language="JavaScript">
<!--

document.onkeydown = checkChangePage;
function checkChangePage(e)
{
   if (!e) var e = window.event;
   // Don't put the following into the first page
   if ((e.ctrlKey && (e.keyCode == 37))) {
      // Ctrl-Left Arrow was pressed or Page up key pressed at the top of the page
      document.location.href = "13792.htm";
   } else
   // Don't put the following into the late page for a document
   if ((e.ctrlKey && (e.keyCode == 39))) {
      // Ctrl-Right Arrow was pressed or Page down key pressed and at the bottom of the page
      document.location.href = "13794.htm";
   }
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}

function printpage()
{
	window.print();
}
//-->
</script>
</head>
<body onload="loadParent();MM_preloadImages('left_down.gif','right_down.gif','index_down.gif','contents_down.gif','search_down.gif','print_down.gif');if (isTOCLoaded()) {expand('11007');expand('10992');highlight('13793')}">
<div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="13792.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="13794.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div><table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td width="100%">
<h3 class="heading3">sort()</h3>
</td><td class="feedback"><p><a href="mailto:ipoint@csgi.com?subject=Feedback on Topic 'sort()' (13793)"><img border=0 src="email.png" alt="Provide feedback on this topic"></a></p></td></tr></table><p class="syntaxheading">Syntax</p>
<table class="tableintopic" width="504" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td class="tableheading" width="162"><p class="tableheading">Interface 1</p>
</td>
<td width="48"><p class="tablebodytext">&nbsp;</p>
</td>
<td class="tableheading" width="294"><p class="tableheading">Interface 2</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="162"><pre class="unixinputp">sort(    var value?[])</pre>
</td>
<td width="48"><pre class="unixinputp">&nbsp;</pre>
</td>
<td width="294"><pre class="unixinputp">sort(    var value?[],    parse(comparison_expression$))</pre>
</td>
</tr>

</table>
<p class="syntaxheading">Description</p>
<p class="bodytext">Sorts the elements in the array.</p>

<table width="100%" class="notestyle"><tr><td><p class="note">Note:</p><ul class="notelistbullet"><li class="notelistbullet">Sort expressions frequently make use of the EPM comparison operator (<span class="unixoutputc">&lt;=&gt;</span>), enabling complex expressions to use natural ordering of data types.  If <span class="unixoutputc">comparison_expression$</span> is not included, the function defaults to the natural ordering of the data type being sorted.</li><li class="notelistbullet">Quotation marks must be prefaced (escaped) with a backslash (<span class="unixoutputc">\</span>) if they are to be interpreted literally.</li><li class="notelistbullet"><span class="unixoutputc">parse()</span> returns an EPM expression used by <span class="unixoutputc">sort()</span>, but <span class="unixoutputc">parse()</span> cannot be used in its own right.</li><li class="notelistbullet">A sort expression can access any variables declared at the point in the expression at which the <span class="unixoutputc">sort()</span> function is called, and can also call registered, user-defined, or remote functions.</li></td></tr></table></ul><p class="syntaxheading">Attributes</p>
<table class="tableintopic" width="288" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext"><span class="bold">Application Environment</span></p>
</td>
<td style="border:1px solid #010101;" width="96"><p class="tablebodytext">Any</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext"><span class="bold">Context</span></p>
</td>
<td style="border:1px solid #010101;" width="96"><p class="tablebodytext">Any</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="192"><p class="tablebodytext"><span class="bold">Method</span></p>
</td>
<td style="border:1px solid #010101;" width="96"><p class="tablebodytext">Built-in</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<table class="tableintopic" width="696" cellpadding="2" cellspacing="0" border="1" style="border-collapse:collapse; border:1px solid #010101">
<tr align="left" valign="top">
<td class="tableheading" style="border:1px solid #010101;" width="210"><p class="tableheading">Parameter</p>
</td>
<td class="tableheading" style="border:1px solid #010101;" width="486"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="210"><p class="tablebodytext"><span class="unixoutputc">value?[]</span></p>
</td>
<td style="border:1px solid #010101;" width="486"><p class="tablebodytext">In/Out:  Array to be sorted, and returns the sorted results.</p>
</td>
</tr>
<tr align="left" valign="top">
<td style="border:1px solid #010101;" width="210"><p class="tablebodytext"><span class="unixoutputc">comparison_expression$</span></p>
</td>
<td style="border:1px solid #010101;" width="486"><p class="tablebodytext">In:  Expression for sorting the array.</p>
<p class="tablebodytext">It is a string that must be parsed to return an integer.</p>
</td>
</tr>

</table>
<p class="bodytext">&nbsp;</p>
<p class="syntaxheading">Returns</p>
<p class="bodytext">Integer value of the number of comparisons performed; otherwise, an error is raised.  Any of the following conditions cause an error to be raised:</p>
<ul class="listbullet"><li class="listbullet">The sort expression does not reference <span class="unixoutputc">@a</span> or <span class="unixoutputc">@b</span>.</li><li class="listbullet">The sort expression does not return an integer.</li><li class="listbullet">The data type of <span class="unixoutputc">@a</span> or <span class="unixoutputc">@b</span> is incompatible with elements of the sort array.</li></ul><p class="syntaxheading">Remarks</p>
<p class="bodytext">The <span class="unixoutputc">comparison_expression&amp;</span> parameter defines how elements are to be sorted and must make reference to local expression variables <span class="unixoutputc">@a</span> and <span class="unixoutputc">@b</span> suffixed with the appropriate type for the elements in the array.  The expression returns an integer value:</p>
<ul class="listbullet"><li class="listbullet">Less than zero, if <span class="unixoutputc">@a</span> is before <span class="unixoutputc">@b</span>.</li><li class="listbullet">Greater than zero, if <span class="unixoutputc">@a</span> is after <span class="unixoutputc">@b</span>.</li><li class="listbullet">Of zero, if <span class="unixoutputc">@a</span> and <span class="unixoutputc">@b</span> are equal.</li></ul><p class="bodytext">The function is a versatile function that can be used in a wide variety of circumstances.  </p>
<p class="syntaxheading">Usage Example</p>
<p class="bodytext">For reporting purposes, it is requested that serial numbers for a batch of equipment items are sorted first by increasing length and then alphabetically; serial numbers having the same length are ordered alphabetically.</p>
<p class="bodytext">The following user-defined function, <span class="unixoutputc">fSortEquipBatch&amp;()</span> is created to perform the sort action.  <span class="unixoutputc">fSortEquipBatch&amp;()</span> receives a batch of unsorted equipment serial numbers as its input from <span class="unixoutputc">EquipBatch$[]</span>, performs the required sort, replaces the input serial number list with the newly sorted list, and returns the number of comparisons required to perform the sort.</p>
<pre class="unixoutputp"><span class="unixoutputc">fSortEquipBatch&amp;(var EquipBatch$[]) = {</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var SortExpr$ := 'if length(@a$) != length(@b$)</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">                then length(@a$) &lt;=&gt; length(@b$)</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">                else @a$ &lt;=&gt; @b$'</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">return sort(EquipBatch$[], parse(SortExpr$))</span></pre>
<pre class="unixoutputp"></pre>
<p class="bodytext"><span class="unixoutputc">fSortEquipBatch&amp;()</span> can be tested in the <span class="formname">Expression Test</span> window in the following manner:</p>
<pre class="unixoutputp"><span class="unixoutputc">{</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var EquipBatch$[] := ['XB1001',</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">                    'AT1000',</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">                    'CM21199',</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">                    'AA00000001',</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">                    'XY302'];</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">var NumSorts&amp; := fSortEquipBatch&amp;(EquipBatch$[]);</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">return    to_string(EquipBatch$[])</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">          + ' after '</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">          + to_string(NumSorts&amp;)</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">          + ' comparisons.';</span></pre>
<pre class="unixoutputp"><span class="unixoutputc">}</span></pre>
<p class="bodytext">&nbsp;</p>
<p class="bodytext">The following string is the expected return from the <span class="formname">Expression Test</span> window, indicating that the sort was performed correctly, and required seven comparisons to achieve the final ordering:</p>
<p class="bodytext"><span class="unixoutputc">[ XY302, AT1000. XB1001, CM21199, AA00000001 ] after 7 comparisons.</span></p>


<br><div class="menubar">  <table width="100%" border="0" cellspacing="0" cellpadding="0">    <tr valign="middle">      <td width="70">        <a href="13792.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('left','','left_down.gif',1)">        <img name="left" border="0" src="left_up.gif" width="26" height="26" alt="Previous topic" title="Previous topic"></a>        <a href="13794.htm" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('right','','right_down.gif',1)">        <img name="right" border="0" src="right_up.gif" width="26" height="26" alt="Next topic" title="Next topic"></a></td>        <td class="bodytext">Configurer's Reference Guide for Singleview Convergent Billing 9.1 </td>        <td width="40">        <div align="center">        <a href="javascript:printpage();" onMouseOut="MM_swapImgRestore()" onMouseOver="MM_swapImage('print','','print_down.gif',1)">        <img name="print" border="0" src="print_up.gif" width="26" height="26" alt="Print this page" title="Print this page"></a>      </div>       </td></tr>  </table></div></body>
</html>


